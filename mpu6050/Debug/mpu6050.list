
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f78  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800a138  0800a138  0000b138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e4  0800a5e4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a5e4  0800a5e4  0000b5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5ec  0800a5ec  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5ec  0800a5ec  0000b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5f0  0800a5f0  0000b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20040000  0800a5f4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  200401d8  0800a7c8  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20040630  0800a7c8  0000c630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013de3  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002854  00000000  00000000  0001ffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00022840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d07  00000000  00000000  000238f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000322a4  00000000  00000000  000245ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ef3  00000000  00000000  000568a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128bf7  00000000  00000000  0006b796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019438d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000578c  00000000  00000000  001943d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00199b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401d8 	.word	0x200401d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a120 	.word	0x0800a120

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401dc 	.word	0x200401dc
 80001fc:	0800a120 	.word	0x0800a120

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void MPU6050_Init(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // Check device ID WHO_AM_I
    HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2275      	movs	r2, #117	@ 0x75
 8000fbc:	21d0      	movs	r1, #208	@ 0xd0
 8000fbe:	4833      	ldr	r0, [pc, #204]	@ (800108c <MPU6050_Init+0xe8>)
 8000fc0:	f001 fe22 	bl	8002c08 <HAL_I2C_Mem_Read>

    if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b68      	cmp	r3, #104	@ 0x68
 8000fc8:	d14b      	bne.n	8001062 <MPU6050_Init+0xbe>
        // Power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	226b      	movs	r2, #107	@ 0x6b
 8000fe0:	21d0      	movs	r1, #208	@ 0xd0
 8000fe2:	482a      	ldr	r0, [pc, #168]	@ (800108c <MPU6050_Init+0xe8>)
 8000fe4:	f001 fcfc 	bl	80029e0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2219      	movs	r2, #25
 8000ffe:	21d0      	movs	r1, #208	@ 0xd0
 8001000:	4822      	ldr	r0, [pc, #136]	@ (800108c <MPU6050_Init+0xe8>)
 8001002:	f001 fced 	bl	80029e0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
        Data = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	1dbb      	adds	r3, r7, #6
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	221c      	movs	r2, #28
 800101c:	21d0      	movs	r1, #208	@ 0xd0
 800101e:	481b      	ldr	r0, [pc, #108]	@ (800108c <MPU6050_Init+0xe8>)
 8001020:	f001 fcde 	bl	80029e0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
        Data = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	1dbb      	adds	r3, r7, #6
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	221b      	movs	r2, #27
 800103a:	21d0      	movs	r1, #208	@ 0xd0
 800103c:	4813      	ldr	r0, [pc, #76]	@ (800108c <MPU6050_Init+0xe8>)
 800103e:	f001 fccf 	bl	80029e0 <HAL_I2C_Mem_Write>

        sprintf(uart_buf, "MPU6050 Initialization Successful!\r\n");
 8001042:	4913      	ldr	r1, [pc, #76]	@ (8001090 <MPU6050_Init+0xec>)
 8001044:	4813      	ldr	r0, [pc, #76]	@ (8001094 <MPU6050_Init+0xf0>)
 8001046:	f006 ff39 	bl	8007ebc <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800104a:	4812      	ldr	r0, [pc, #72]	@ (8001094 <MPU6050_Init+0xf0>)
 800104c:	f7ff f928 	bl	80002a0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	490e      	ldr	r1, [pc, #56]	@ (8001094 <MPU6050_Init+0xf0>)
 800105a:	480f      	ldr	r0, [pc, #60]	@ (8001098 <MPU6050_Init+0xf4>)
 800105c:	f005 fa4a 	bl	80064f4 <HAL_UART_Transmit>
    } else {
        sprintf(uart_buf, "MPU6050 Initialization Failed! WHO_AM_I = %d\r\n", check);
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
    }
}
 8001060:	e010      	b.n	8001084 <MPU6050_Init+0xe0>
        sprintf(uart_buf, "MPU6050 Initialization Failed! WHO_AM_I = %d\r\n", check);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	461a      	mov	r2, r3
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <MPU6050_Init+0xf8>)
 8001068:	480a      	ldr	r0, [pc, #40]	@ (8001094 <MPU6050_Init+0xf0>)
 800106a:	f006 ff27 	bl	8007ebc <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800106e:	4809      	ldr	r0, [pc, #36]	@ (8001094 <MPU6050_Init+0xf0>)
 8001070:	f7ff f916 	bl	80002a0 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	4905      	ldr	r1, [pc, #20]	@ (8001094 <MPU6050_Init+0xf0>)
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MPU6050_Init+0xf4>)
 8001080:	f005 fa38 	bl	80064f4 <HAL_UART_Transmit>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20040308 	.word	0x20040308
 8001090:	0800a138 	.word	0x0800a138
 8001094:	20040240 	.word	0x20040240
 8001098:	200403f0 	.word	0x200403f0
 800109c:	0800a160 	.word	0x0800a160

080010a0 <MPU6050_Read_All>:

    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    MPU6050.Temperature = ((float)temp / 340.0) + 36.53;
}

void MPU6050_Read_All(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[14];

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 1000);
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	230e      	movs	r3, #14
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	463b      	mov	r3, r7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	223b      	movs	r2, #59	@ 0x3b
 80010b8:	21d0      	movs	r1, #208	@ 0xd0
 80010ba:	486b      	ldr	r0, [pc, #428]	@ (8001268 <MPU6050_Read_All+0x1c8>)
 80010bc:	f001 fda4 	bl	8002c08 <HAL_I2C_Mem_Read>

    MPU6050.Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80010c0:	783b      	ldrb	r3, [r7, #0]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b66      	ldr	r3, [pc, #408]	@ (800126c <MPU6050_Read_All+0x1cc>)
 80010d2:	801a      	strh	r2, [r3, #0]
    MPU6050.Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80010d4:	78bb      	ldrb	r3, [r7, #2]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b61      	ldr	r3, [pc, #388]	@ (800126c <MPU6050_Read_All+0x1cc>)
 80010e6:	805a      	strh	r2, [r3, #2]
    MPU6050.Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80010e8:	793b      	ldrb	r3, [r7, #4]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b5c      	ldr	r3, [pc, #368]	@ (800126c <MPU6050_Read_All+0x1cc>)
 80010fa:	809a      	strh	r2, [r3, #4]
    int16_t temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	81fb      	strh	r3, [r7, #14]
    MPU6050.Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800110c:	7a3b      	ldrb	r3, [r7, #8]
 800110e:	b21b      	sxth	r3, r3
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	7a7b      	ldrb	r3, [r7, #9]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b53      	ldr	r3, [pc, #332]	@ (800126c <MPU6050_Read_All+0x1cc>)
 800111e:	841a      	strh	r2, [r3, #32]
    MPU6050.Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001120:	7abb      	ldrb	r3, [r7, #10]
 8001122:	b21b      	sxth	r3, r3
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b4e      	ldr	r3, [pc, #312]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001132:	845a      	strh	r2, [r3, #34]	@ 0x22
    MPU6050.Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	b21b      	sxth	r3, r3
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b49      	ldr	r3, [pc, #292]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001146:	849a      	strh	r2, [r3, #36]	@ 0x24

    MPU6050.Ax = MPU6050.Accel_X_RAW / 16384.0;
 8001148:	4b48      	ldr	r3, [pc, #288]	@ (800126c <MPU6050_Read_All+0x1cc>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa00 	bl	8000554 <__aeabi_i2d>
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b45      	ldr	r3, [pc, #276]	@ (8001270 <MPU6050_Read_All+0x1d0>)
 800115a:	f7ff fb8f 	bl	800087c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4942      	ldr	r1, [pc, #264]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001164:	e9c1 2302 	strd	r2, r3, [r1, #8]
    MPU6050.Ay = MPU6050.Accel_Y_RAW / 16384.0;
 8001168:	4b40      	ldr	r3, [pc, #256]	@ (800126c <MPU6050_Read_All+0x1cc>)
 800116a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9f0 	bl	8000554 <__aeabi_i2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <MPU6050_Read_All+0x1d0>)
 800117a:	f7ff fb7f 	bl	800087c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	493a      	ldr	r1, [pc, #232]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001184:	e9c1 2304 	strd	r2, r3, [r1, #16]
    MPU6050.Az = MPU6050.Accel_Z_RAW / 16384.0;
 8001188:	4b38      	ldr	r3, [pc, #224]	@ (800126c <MPU6050_Read_All+0x1cc>)
 800118a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9e0 	bl	8000554 <__aeabi_i2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <MPU6050_Read_All+0x1d0>)
 800119a:	f7ff fb6f 	bl	800087c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4932      	ldr	r1, [pc, #200]	@ (800126c <MPU6050_Read_All+0x1cc>)
 80011a4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    MPU6050.Temperature = ((float)temp / 340.0) + 36.53;
 80011a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	ee17 0a90 	vmov	r0, s15
 80011b8:	f7ff f9de 	bl	8000578 <__aeabi_f2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MPU6050_Read_All+0x1d4>)
 80011c2:	f7ff fb5b 	bl	800087c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	a322      	add	r3, pc, #136	@ (adr r3, 8001258 <MPU6050_Read_All+0x1b8>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff f872 	bl	80002bc <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fcfa 	bl	8000bd8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a21      	ldr	r2, [pc, #132]	@ (800126c <MPU6050_Read_All+0x1cc>)
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40

    MPU6050.Gx = MPU6050.Gyro_X_RAW / 131.0;
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MPU6050_Read_All+0x1cc>)
 80011ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f9af 	bl	8000554 <__aeabi_i2d>
 80011f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001260 <MPU6050_Read_All+0x1c0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb3e 	bl	800087c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4919      	ldr	r1, [pc, #100]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001206:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    MPU6050.Gy = MPU6050.Gyro_Y_RAW / 131.0;
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MPU6050_Read_All+0x1cc>)
 800120c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f99f 	bl	8000554 <__aeabi_i2d>
 8001216:	a312      	add	r3, pc, #72	@ (adr r3, 8001260 <MPU6050_Read_All+0x1c0>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb2e 	bl	800087c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4911      	ldr	r1, [pc, #68]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001226:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    MPU6050.Gz = MPU6050.Gyro_Z_RAW / 131.0;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MPU6050_Read_All+0x1cc>)
 800122c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f98f 	bl	8000554 <__aeabi_i2d>
 8001236:	a30a      	add	r3, pc, #40	@ (adr r3, 8001260 <MPU6050_Read_All+0x1c0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fb1e 	bl	800087c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4909      	ldr	r1, [pc, #36]	@ (800126c <MPU6050_Read_All+0x1cc>)
 8001246:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	f3af 8000 	nop.w
 8001258:	0a3d70a4 	.word	0x0a3d70a4
 800125c:	404243d7 	.word	0x404243d7
 8001260:	00000000 	.word	0x00000000
 8001264:	40606000 	.word	0x40606000
 8001268:	20040308 	.word	0x20040308
 800126c:	200401f8 	.word	0x200401f8
 8001270:	40d00000 	.word	0x40d00000
 8001274:	40754000 	.word	0x40754000

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800127c:	ed2d 8b04 	vpush	{d8-d9}
 8001280:	b08e      	sub	sp, #56	@ 0x38
 8001282:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001284:	f000 ffe7 	bl	8002256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001288:	f000 f866 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128c:	f000 fa10 	bl	80016b0 <MX_GPIO_Init>
  MX_FMC_Init();
 8001290:	f000 f9a8 	bl	80015e4 <MX_FMC_Init>
  MX_SAI1_Init();
 8001294:	f000 f8f2 	bl	800147c <MX_SAI1_Init>
  MX_USART2_UART_Init();
 8001298:	f000 f958 	bl	800154c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800129c:	f000 f8ae 	bl	80013fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 80012a0:	f7ff fe80 	bl	8000fa4 <MPU6050_Init>

    sprintf(uart_buf, "Starting MPU6050 data reading...\r\n");
 80012a4:	4927      	ldr	r1, [pc, #156]	@ (8001344 <main+0xcc>)
 80012a6:	4828      	ldr	r0, [pc, #160]	@ (8001348 <main+0xd0>)
 80012a8:	f006 fe08 	bl	8007ebc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <main+0xd0>)
 80012ae:	f7fe fff7 	bl	80002a0 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	4923      	ldr	r1, [pc, #140]	@ (8001348 <main+0xd0>)
 80012bc:	4823      	ldr	r0, [pc, #140]	@ (800134c <main+0xd4>)
 80012be:	f005 f919 	bl	80064f4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read all MPU6050 data
	      MPU6050_Read_All();
 80012c2:	f7ff feed 	bl	80010a0 <MPU6050_Read_All>

	      // Format and send data via UART
	      sprintf(uart_buf, "Acc: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Temp=%.2f°C\r\n",
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <main+0xd8>)
 80012c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80012cc:	ed87 7b00 	vstr	d7, [r7]
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <main+0xd8>)
 80012d2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <main+0xd8>)
 80012d8:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <main+0xd8>)
 80012de:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	@ 0x28
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <main+0xd8>)
 80012e4:	ed93 8b0c 	vldr	d8, [r3, #48]	@ 0x30
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <main+0xd8>)
 80012ea:	ed93 9b0e 	vldr	d9, [r3, #56]	@ 0x38
	              MPU6050.Ax, MPU6050.Ay, MPU6050.Az,
	              MPU6050.Gx, MPU6050.Gy, MPU6050.Gz,
	              MPU6050.Temperature);
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <main+0xd8>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
	      sprintf(uart_buf, "Acc: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Temp=%.2f°C\r\n",
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f940 	bl	8000578 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001300:	ed8d 9b08 	vstr	d9, [sp, #32]
 8001304:	ed8d 8b06 	vstr	d8, [sp, #24]
 8001308:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800130c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001310:	e9cd 4500 	strd	r4, r5, [sp]
 8001314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001318:	490e      	ldr	r1, [pc, #56]	@ (8001354 <main+0xdc>)
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <main+0xd0>)
 800131c:	f006 fdce 	bl	8007ebc <siprintf>

	      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <main+0xd0>)
 8001322:	f7fe ffbd 	bl	80002a0 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	4906      	ldr	r1, [pc, #24]	@ (8001348 <main+0xd0>)
 8001330:	4806      	ldr	r0, [pc, #24]	@ (800134c <main+0xd4>)
 8001332:	f005 f8df 	bl	80064f4 <HAL_UART_Transmit>

	      // Wait 500ms
	      HAL_Delay(500);
 8001336:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800133a:	f001 f801 	bl	8002340 <HAL_Delay>
	      MPU6050_Read_All();
 800133e:	bf00      	nop
 8001340:	e7bf      	b.n	80012c2 <main+0x4a>
 8001342:	bf00      	nop
 8001344:	0800a190 	.word	0x0800a190
 8001348:	20040240 	.word	0x20040240
 800134c:	200403f0 	.word	0x200403f0
 8001350:	200401f8 	.word	0x200401f8
 8001354:	0800a1b4 	.word	0x0800a1b4

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	@ 0x58
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2244      	movs	r2, #68	@ 0x44
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fe0d 	bl	8007f86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800137a:	2000      	movs	r0, #0
 800137c:	f002 f8d8 	bl	8003530 <HAL_PWREx_ControlVoltageScaling>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001386:	f000 fc49 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800138a:	2310      	movs	r3, #16
 800138c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800138e:	2301      	movs	r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001396:	2360      	movs	r3, #96	@ 0x60
 8001398:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800139e:	2301      	movs	r3, #1
 80013a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013a6:	233c      	movs	r3, #60	@ 0x3c
 80013a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80013aa:	2305      	movs	r3, #5
 80013ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 f96c 	bl	8003698 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013c6:	f000 fc29 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2303      	movs	r3, #3
 80013d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	2105      	movs	r1, #5
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fd72 	bl	8003ecc <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013ee:	f000 fc15 	bl	8001c1c <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3758      	adds	r7, #88	@ 0x58
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001402:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <MX_I2C3_Init+0x78>)
 8001404:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001408:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <MX_I2C3_Init+0x7c>)
 800140a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_I2C3_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_I2C3_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C3_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001436:	480e      	ldr	r0, [pc, #56]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001438:	f001 fa36 	bl	80028a8 <HAL_I2C_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001442:	f000 fbeb 	bl	8001c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001446:	2100      	movs	r1, #0
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <MX_I2C3_Init+0x74>)
 800144a:	f001 ffb9 	bl	80033c0 <HAL_I2CEx_ConfigAnalogFilter>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001454:	f000 fbe2 	bl	8001c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001458:	2100      	movs	r1, #0
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_I2C3_Init+0x74>)
 800145c:	f001 fffb 	bl	8003456 <HAL_I2CEx_ConfigDigitalFilter>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001466:	f000 fbd9 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20040308 	.word	0x20040308
 8001474:	40005c00 	.word	0x40005c00
 8001478:	30a175ab 	.word	0x30a175ab

0800147c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001480:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001482:	4a30      	ldr	r2, [pc, #192]	@ (8001544 <MX_SAI1_Init+0xc8>)
 8001484:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001488:	2200      	movs	r2, #0
 800148a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800148c:	4b2c      	ldr	r3, [pc, #176]	@ (8001540 <MX_SAI1_Init+0xc4>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001494:	2240      	movs	r2, #64	@ 0x40
 8001496:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <MX_SAI1_Init+0xc4>)
 800149a:	2200      	movs	r2, #0
 800149c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014aa:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014c4:	4a20      	ldr	r2, [pc, #128]	@ (8001548 <MX_SAI1_Init+0xcc>)
 80014c6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014f8:	2208      	movs	r2, #8
 80014fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_SAI1_Init+0xc4>)
 80014fe:	2201      	movs	r2, #1
 8001500:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <MX_SAI1_Init+0xc4>)
 800150a:	2200      	movs	r2, #0
 800150c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001510:	2200      	movs	r2, #0
 8001512:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001516:	2200      	movs	r2, #0
 8001518:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_SAI1_Init+0xc4>)
 800151c:	2200      	movs	r2, #0
 800151e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001522:	2201      	movs	r2, #1
 8001524:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_SAI1_Init+0xc4>)
 8001528:	2200      	movs	r2, #0
 800152a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_SAI1_Init+0xc4>)
 800152e:	f004 fd31 	bl	8005f94 <HAL_SAI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001538:	f000 fb70 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2004035c 	.word	0x2004035c
 8001544:	40015404 	.word	0x40015404
 8001548:	0002ee00 	.word	0x0002ee00

0800154c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <MX_USART2_UART_Init+0x94>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 8001596:	f004 ff5d 	bl	8006454 <HAL_UART_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015a0:	f000 fb3c 	bl	8001c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 80015a8:	f005 fd86 	bl	80070b8 <HAL_UARTEx_SetTxFifoThreshold>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015b2:	f000 fb33 	bl	8001c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4808      	ldr	r0, [pc, #32]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 80015ba:	f005 fdbb 	bl	8007134 <HAL_UARTEx_SetRxFifoThreshold>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015c4:	f000 fb2a 	bl	8001c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_USART2_UART_Init+0x90>)
 80015ca:	f005 fd3c 	bl	8007046 <HAL_UARTEx_DisableFifoMode>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f000 fb22 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200403f0 	.word	0x200403f0
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2220      	movs	r2, #32
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fcc8 	bl	8007f86 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <MX_FMC_Init+0xc4>)
 80015f8:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80015fc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001600:	4a2a      	ldr	r2, [pc, #168]	@ (80016ac <MX_FMC_Init+0xc8>)
 8001602:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001604:	4b28      	ldr	r3, [pc, #160]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <MX_FMC_Init+0xc4>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001612:	2204      	movs	r2, #4
 8001614:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001618:	2210      	movs	r2, #16
 800161a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <MX_FMC_Init+0xc4>)
 800161e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001622:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_FMC_Init+0xc4>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001630:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001646:	2200      	movs	r2, #0
 8001648:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_FMC_Init+0xc4>)
 800164c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001650:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001654:	2200      	movs	r2, #0
 8001656:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_FMC_Init+0xc4>)
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001660:	2200      	movs	r2, #0
 8001662:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800166a:	230f      	movs	r3, #15
 800166c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800166e:	230f      	movs	r3, #15
 8001670:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001672:	23ff      	movs	r3, #255	@ 0xff
 8001674:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800167a:	230f      	movs	r3, #15
 800167c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800167e:	2310      	movs	r3, #16
 8001680:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_FMC_Init+0xc4>)
 8001692:	f004 fe97 	bl	80063c4 <HAL_SRAM_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 800169c:	f000 fabe 	bl	8001c1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20040484 	.word	0x20040484
 80016ac:	a0000104 	.word	0xa0000104

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	@ 0x38
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016c6:	4bb1      	ldr	r3, [pc, #708]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4ab0      	ldr	r2, [pc, #704]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4bae      	ldr	r3, [pc, #696]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	4bab      	ldr	r3, [pc, #684]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4aaa      	ldr	r2, [pc, #680]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4ba8      	ldr	r3, [pc, #672]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	4ba5      	ldr	r3, [pc, #660]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4aa4      	ldr	r2, [pc, #656]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4ba2      	ldr	r3, [pc, #648]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	4b9f      	ldr	r3, [pc, #636]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a9e      	ldr	r2, [pc, #632]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b9c      	ldr	r3, [pc, #624]	@ (800198c <MX_GPIO_Init+0x2dc>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b99      	ldr	r3, [pc, #612]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a98      	ldr	r2, [pc, #608]	@ (800198c <MX_GPIO_Init+0x2dc>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b96      	ldr	r3, [pc, #600]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800173e:	4b93      	ldr	r3, [pc, #588]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a92      	ldr	r2, [pc, #584]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b90      	ldr	r3, [pc, #576]	@ (800198c <MX_GPIO_Init+0x2dc>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001756:	f001 ff8f 	bl	8003678 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b8c      	ldr	r3, [pc, #560]	@ (800198c <MX_GPIO_Init+0x2dc>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a8b      	ldr	r2, [pc, #556]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b89      	ldr	r3, [pc, #548]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	4b86      	ldr	r3, [pc, #536]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a85      	ldr	r2, [pc, #532]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b83      	ldr	r3, [pc, #524]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800178a:	4b80      	ldr	r3, [pc, #512]	@ (800198c <MX_GPIO_Init+0x2dc>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a7f      	ldr	r2, [pc, #508]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001790:	f043 0320 	orr.w	r3, r3, #32
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b7d      	ldr	r3, [pc, #500]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f244 0114 	movw	r1, #16404	@ 0x4014
 80017a8:	4879      	ldr	r0, [pc, #484]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 80017aa:	f001 f865 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b4:	4877      	ldr	r0, [pc, #476]	@ (8001994 <MX_GPIO_Init+0x2e4>)
 80017b6:	f001 f85f 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2140      	movs	r1, #64	@ 0x40
 80017be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c2:	f001 f859 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2104      	movs	r1, #4
 80017ca:	4873      	ldr	r0, [pc, #460]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 80017cc:	f001 f854 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80017d0:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80017e2:	2305      	movs	r3, #5
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	486b      	ldr	r0, [pc, #428]	@ (800199c <MX_GPIO_Init+0x2ec>)
 80017ee:	f000 feb1 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 80017f2:	f244 0314 	movw	r3, #16404	@ 0x4014
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4861      	ldr	r0, [pc, #388]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 800180c:	f000 fea2 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001810:	2310      	movs	r3, #16
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001820:	2302      	movs	r3, #2
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	485b      	ldr	r0, [pc, #364]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 800182c:	f000 fe92 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001842:	2307      	movs	r3, #7
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f000 fe80 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 8001854:	2301      	movs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001864:	2305      	movs	r3, #5
 8001866:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	484b      	ldr	r0, [pc, #300]	@ (800199c <MX_GPIO_Init+0x2ec>)
 8001870:	f000 fe70 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001874:	23b0      	movs	r3, #176	@ 0xb0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001884:	230a      	movs	r3, #10
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	4843      	ldr	r0, [pc, #268]	@ (800199c <MX_GPIO_Init+0x2ec>)
 8001890:	f000 fe60 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8001894:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80018a6:	2305      	movs	r3, #5
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	483b      	ldr	r0, [pc, #236]	@ (80019a0 <MX_GPIO_Init+0x2f0>)
 80018b2:	f000 fe4f 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4834      	ldr	r0, [pc, #208]	@ (800199c <MX_GPIO_Init+0x2ec>)
 80018cc:	f000 fe42 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80018d0:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80018e2:	230a      	movs	r3, #10
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4828      	ldr	r0, [pc, #160]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 80018ee:	f000 fe31 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 80018f2:	2340      	movs	r3, #64	@ 0x40
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001902:	2304      	movs	r3, #4
 8001904:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4822      	ldr	r0, [pc, #136]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 800190e:	f000 fe21 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001924:	2303      	movs	r3, #3
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192c:	4619      	mov	r1, r3
 800192e:	4818      	ldr	r0, [pc, #96]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 8001930:	f000 fe10 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8001934:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001946:	2305      	movs	r3, #5
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800194a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	480f      	ldr	r0, [pc, #60]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 8001952:	f000 fdff 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001956:	2304      	movs	r3, #4
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001966:	230c      	movs	r3, #12
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <MX_GPIO_Init+0x2f4>)
 8001972:	f000 fdef 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D0_Pin
                           uSD_D1_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001976:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |uSD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001988:	230c      	movs	r3, #12
 800198a:	e00d      	b.n	80019a8 <MX_GPIO_Init+0x2f8>
 800198c:	40021000 	.word	0x40021000
 8001990:	48001c00 	.word	0x48001c00
 8001994:	48000800 	.word	0x48000800
 8001998:	48000400 	.word	0x48000400
 800199c:	48002000 	.word	0x48002000
 80019a0:	48001800 	.word	0x48001800
 80019a4:	48000c00 	.word	0x48000c00
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4896      	ldr	r0, [pc, #600]	@ (8001c0c <MX_GPIO_Init+0x55c>)
 80019b2:	f000 fdcf 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_ID_Pin USB_OTG_FS_DP_Pin USB_OTGFS_DM_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 80019b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019c8:	230a      	movs	r3, #10
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d6:	f000 fdbd 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80019da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4886      	ldr	r0, [pc, #536]	@ (8001c0c <MX_GPIO_Init+0x55c>)
 80019f4:	f000 fdae 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 80019f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a10:	f000 fda0 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001a14:	2340      	movs	r3, #64	@ 0x40
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4878      	ldr	r0, [pc, #480]	@ (8001c0c <MX_GPIO_Init+0x55c>)
 8001a2a:	f000 fd93 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a40:	2304      	movs	r3, #4
 8001a42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4871      	ldr	r0, [pc, #452]	@ (8001c10 <MX_GPIO_Init+0x560>)
 8001a4c:	f000 fd82 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8001a50:	2384      	movs	r3, #132	@ 0x84
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a60:	2306      	movs	r3, #6
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4868      	ldr	r0, [pc, #416]	@ (8001c0c <MX_GPIO_Init+0x55c>)
 8001a6c:	f000 fd72 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001a70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a82:	2307      	movs	r3, #7
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4861      	ldr	r0, [pc, #388]	@ (8001c14 <MX_GPIO_Init+0x564>)
 8001a8e:	f000 fd61 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001a92:	2303      	movs	r3, #3
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4857      	ldr	r0, [pc, #348]	@ (8001c0c <MX_GPIO_Init+0x55c>)
 8001aae:	f000 fd51 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8001ab2:	2318      	movs	r3, #24
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4851      	ldr	r0, [pc, #324]	@ (8001c0c <MX_GPIO_Init+0x55c>)
 8001ac6:	f000 fd45 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8001aca:	2381      	movs	r3, #129	@ 0x81
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ace:	230b      	movs	r3, #11
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae0:	f000 fd38 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af4:	2301      	movs	r3, #1
 8001af6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b02:	f000 fd27 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001b06:	2340      	movs	r3, #64	@ 0x40
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f000 fd18 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001b24:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b36:	2305      	movs	r3, #5
 8001b38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4834      	ldr	r0, [pc, #208]	@ (8001c14 <MX_GPIO_Init+0x564>)
 8001b42:	f000 fd07 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001b46:	2302      	movs	r3, #2
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b56:	2302      	movs	r3, #2
 8001b58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b64:	f000 fcf6 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001b68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001b7a:	230b      	movs	r3, #11
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	4824      	ldr	r0, [pc, #144]	@ (8001c18 <MX_GPIO_Init+0x568>)
 8001b86:	f000 fce5 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba8:	f000 fcd4 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001bac:	2301      	movs	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4815      	ldr	r0, [pc, #84]	@ (8001c14 <MX_GPIO_Init+0x564>)
 8001bc0:	f000 fcc8 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480e      	ldr	r0, [pc, #56]	@ (8001c14 <MX_GPIO_Init+0x564>)
 8001bdc:	f000 fcba 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_GPIO_Init+0x564>)
 8001bfe:	f000 fca9 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c02:	bf00      	nop
 8001c04:	3738      	adds	r7, #56	@ 0x38
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48001800 	.word	0x48001800
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48001400 	.word	0x48001400

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <Error_Handler+0x8>

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_MspInit+0x44>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	4a0e      	ldr	r2, [pc, #56]	@ (8001c6c <HAL_MspInit+0x44>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_MspInit+0x44>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_MspInit+0x44>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_MspInit+0x44>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_MspInit+0x44>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0b0      	sub	sp, #192	@ 0xc0
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	229c      	movs	r2, #156	@ 0x9c
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f006 f978 	bl	8007f86 <memset>
  if(hi2c->Instance==I2C3)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a23      	ldr	r2, [pc, #140]	@ (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d13e      	bne.n	8001d1e <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fbc6 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cba:	f7ff ffaf 	bl	8001c1c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001cd6:	f001 fccf 	bl	8003678 <HAL_PWREx_EnableVddIO2>
    /**I2C3 GPIO Configuration
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8001cda:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cfa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480b      	ldr	r0, [pc, #44]	@ (8001d30 <HAL_I2C_MspInit+0xc0>)
 8001d02:	f000 fc27 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001d0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001d1e:	bf00      	nop
 8001d20:	37c0      	adds	r7, #192	@ 0xc0
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40005c00 	.word	0x40005c00
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48001800 	.word	0x48001800

08001d34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0b0      	sub	sp, #192	@ 0xc0
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	229c      	movs	r2, #156	@ 0x9c
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f006 f916 	bl	8007f86 <memset>
  if(huart->Instance==USART2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a21      	ldr	r2, [pc, #132]	@ (8001de4 <HAL_UART_MspInit+0xb0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d13b      	bne.n	8001ddc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f002 fb65 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d7c:	f7ff ff4e 	bl	8001c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_UART_MspInit+0xb4>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	4a18      	ldr	r2, [pc, #96]	@ (8001de8 <HAL_UART_MspInit+0xb4>)
 8001d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_UART_MspInit+0xb4>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_UART_MspInit+0xb4>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <HAL_UART_MspInit+0xb4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da4:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_UART_MspInit+0xb4>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001db0:	230c      	movs	r3, #12
 8001db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc8:	2307      	movs	r3, #7
 8001dca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd8:	f000 fbbc 	bl	8002554 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ddc:	bf00      	nop
 8001dde:	37c0      	adds	r7, #192	@ 0xc0
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40004400 	.word	0x40004400
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e00:	4b32      	ldr	r3, [pc, #200]	@ (8001ecc <HAL_FMC_MspInit+0xe0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d15d      	bne.n	8001ec4 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_FMC_MspInit+0xe0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <HAL_FMC_MspInit+0xe4>)
 8001e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <HAL_FMC_MspInit+0xe4>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <HAL_FMC_MspInit+0xe4>)
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001e26:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 8001e2a:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e38:	230c      	movs	r3, #12
 8001e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4824      	ldr	r0, [pc, #144]	@ (8001ed4 <HAL_FMC_MspInit+0xe8>)
 8001e42:	f000 fb87 	bl	8002554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001e46:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001e4a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e58:	230c      	movs	r3, #12
 8001e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481d      	ldr	r0, [pc, #116]	@ (8001ed8 <HAL_FMC_MspInit+0xec>)
 8001e62:	f000 fb77 	bl	8002554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e76:	230c      	movs	r3, #12
 8001e78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4817      	ldr	r0, [pc, #92]	@ (8001edc <HAL_FMC_MspInit+0xf0>)
 8001e80:	f000 fb68 	bl	8002554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001e84:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001e88:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e96:	230c      	movs	r3, #12
 8001e98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4810      	ldr	r0, [pc, #64]	@ (8001ee0 <HAL_FMC_MspInit+0xf4>)
 8001ea0:	f000 fb58 	bl	8002554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001ea4:	233f      	movs	r3, #63	@ 0x3f
 8001ea6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4809      	ldr	r0, [pc, #36]	@ (8001ee4 <HAL_FMC_MspInit+0xf8>)
 8001ebe:	f000 fb49 	bl	8002554 <HAL_GPIO_Init>
 8001ec2:	e000      	b.n	8001ec6 <HAL_FMC_MspInit+0xda>
    return;
 8001ec4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200404d4 	.word	0x200404d4
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	48000400 	.word	0x48000400
 8001ee0:	48001400 	.word	0x48001400
 8001ee4:	48001800 	.word	0x48001800

08001ee8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ef0:	f7ff ff7c 	bl	8001dec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0b0      	sub	sp, #192	@ 0xc0
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	229c      	movs	r2, #156	@ 0x9c
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 f83a 	bl	8007f86 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a32      	ldr	r2, [pc, #200]	@ (8001fe0 <HAL_SAI_MspInit+0xe4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d15d      	bne.n	8001fd8 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001f1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f26:	2301      	movs	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f2e:	2310      	movs	r3, #16
 8001f30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001f3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fa79 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001f54:	f7ff fe62 	bl	8001c1c <Error_Handler>
    }

    if (SAI1_client == 0)
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_SAI_MspInit+0xe8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10b      	bne.n	8001f78 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f60:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <HAL_SAI_MspInit+0xec>)
 8001f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f64:	4a20      	ldr	r2, [pc, #128]	@ (8001fe8 <HAL_SAI_MspInit+0xec>)
 8001f66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_SAI_MspInit+0xec>)
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_SAI_MspInit+0xe8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_SAI_MspInit+0xe8>)
 8001f80:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001f82:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f9c:	230d      	movs	r3, #13
 8001f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4810      	ldr	r0, [pc, #64]	@ (8001fec <HAL_SAI_MspInit+0xf0>)
 8001faa:	f000 fad3 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001fae:	2364      	movs	r3, #100	@ 0x64
 8001fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fc6:	230d      	movs	r3, #13
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fcc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4807      	ldr	r0, [pc, #28]	@ (8001ff0 <HAL_SAI_MspInit+0xf4>)
 8001fd4:	f000 fabe 	bl	8002554 <HAL_GPIO_Init>

    }
}
 8001fd8:	bf00      	nop
 8001fda:	37c0      	adds	r7, #192	@ 0xc0
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40015404 	.word	0x40015404
 8001fe4:	200404d8 	.word	0x200404d8
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	48001000 	.word	0x48001000

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204a:	f000 f959 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}

08002052 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  return 1;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_kill>:

int _kill(int pid, int sig)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206c:	f005 ffde 	bl	800802c <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	2216      	movs	r2, #22
 8002074:	601a      	str	r2, [r3, #0]
  return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_exit>:

void _exit (int status)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208a:	f04f 31ff 	mov.w	r1, #4294967295
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffe7 	bl	8002062 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <_exit+0x12>

08002098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
  }

  return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e009      	b.n	80020f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf1      	blt.n	80020e4 <_write+0x12>
  }
  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_close>:

int _close(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002132:	605a      	str	r2, [r3, #4]
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_isatty>:

int _isatty(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f005 ff42 	bl	800802c <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200a0000 	.word	0x200a0000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	200404dc 	.word	0x200404dc
 80021dc:	20040630 	.word	0x20040630

080021e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <SystemInit+0x20>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <SystemInit+0x20>)
 80021ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800223c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002208:	f7ff ffea 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800220c:	480c      	ldr	r0, [pc, #48]	@ (8002240 <LoopForever+0x6>)
  ldr r1, =_edata
 800220e:	490d      	ldr	r1, [pc, #52]	@ (8002244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <LoopForever+0xe>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002224:	4c0a      	ldr	r4, [pc, #40]	@ (8002250 <LoopForever+0x16>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002232:	f005 ff01 	bl	8008038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002236:	f7ff f81f 	bl	8001278 <main>

0800223a <LoopForever>:

LoopForever:
    b LoopForever
 800223a:	e7fe      	b.n	800223a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800223c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002240:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002244:	200401d4 	.word	0x200401d4
  ldr r2, =_sidata
 8002248:	0800a5f4 	.word	0x0800a5f4
  ldr r2, =_sbss
 800224c:	200401d8 	.word	0x200401d8
  ldr r4, =_ebss
 8002250:	20040630 	.word	0x20040630

08002254 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_IRQHandler>

08002256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f943 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f80e 	bl	8002288 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e001      	b.n	800227c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002278:	f7ff fcd6 	bl	8001c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800227c:	79fb      	ldrb	r3, [r7, #7]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800229c:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <HAL_InitTick+0x70>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_InitTick+0x6c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f941 	bl	800253a <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d809      	bhi.n	80022d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f000 f919 	bl	8002502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d0:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_InitTick+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e004      	b.n	80022e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e001      	b.n	80022e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20040008 	.word	0x20040008
 80022f8:	20040000 	.word	0x20040000
 80022fc:	20040004 	.word	0x20040004

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20040008 	.word	0x20040008
 8002324:	200404e0 	.word	0x200404e0

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200404e0 	.word	0x200404e0

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20040008 	.word	0x20040008

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	@ (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	@ (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	@ 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff47 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff5c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffb0 	bl	80024a8 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e166      	b.n	8002832 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8158 	beq.w	800282c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_Init+0x40>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d017      	beq.n	8002632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d123      	bne.n	8002686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80b2 	beq.w	800282c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c8:	4b61      	ldr	r3, [pc, #388]	@ (8002850 <HAL_GPIO_Init+0x2fc>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026cc:	4a60      	ldr	r2, [pc, #384]	@ (8002850 <HAL_GPIO_Init+0x2fc>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80026d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002850 <HAL_GPIO_Init+0x2fc>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002854 <HAL_GPIO_Init+0x300>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800270a:	d02b      	beq.n	8002764 <HAL_GPIO_Init+0x210>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a52      	ldr	r2, [pc, #328]	@ (8002858 <HAL_GPIO_Init+0x304>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d025      	beq.n	8002760 <HAL_GPIO_Init+0x20c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a51      	ldr	r2, [pc, #324]	@ (800285c <HAL_GPIO_Init+0x308>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01f      	beq.n	800275c <HAL_GPIO_Init+0x208>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a50      	ldr	r2, [pc, #320]	@ (8002860 <HAL_GPIO_Init+0x30c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d019      	beq.n	8002758 <HAL_GPIO_Init+0x204>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a4f      	ldr	r2, [pc, #316]	@ (8002864 <HAL_GPIO_Init+0x310>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_GPIO_Init+0x200>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <HAL_GPIO_Init+0x314>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00d      	beq.n	8002750 <HAL_GPIO_Init+0x1fc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a4d      	ldr	r2, [pc, #308]	@ (800286c <HAL_GPIO_Init+0x318>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <HAL_GPIO_Init+0x1f8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a4c      	ldr	r2, [pc, #304]	@ (8002870 <HAL_GPIO_Init+0x31c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_GPIO_Init+0x1f4>
 8002744:	2307      	movs	r3, #7
 8002746:	e00e      	b.n	8002766 <HAL_GPIO_Init+0x212>
 8002748:	2308      	movs	r3, #8
 800274a:	e00c      	b.n	8002766 <HAL_GPIO_Init+0x212>
 800274c:	2306      	movs	r3, #6
 800274e:	e00a      	b.n	8002766 <HAL_GPIO_Init+0x212>
 8002750:	2305      	movs	r3, #5
 8002752:	e008      	b.n	8002766 <HAL_GPIO_Init+0x212>
 8002754:	2304      	movs	r3, #4
 8002756:	e006      	b.n	8002766 <HAL_GPIO_Init+0x212>
 8002758:	2303      	movs	r3, #3
 800275a:	e004      	b.n	8002766 <HAL_GPIO_Init+0x212>
 800275c:	2302      	movs	r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x212>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_GPIO_Init+0x212>
 8002764:	2300      	movs	r3, #0
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	f002 0203 	and.w	r2, r2, #3
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	4093      	lsls	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002776:	4937      	ldr	r1, [pc, #220]	@ (8002854 <HAL_GPIO_Init+0x300>)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002784:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_GPIO_Init+0x320>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a8:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <HAL_GPIO_Init+0x320>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ae:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <HAL_GPIO_Init+0x320>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d2:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_GPIO_Init+0x320>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027d8:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <HAL_GPIO_Init+0x320>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_GPIO_Init+0x320>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_GPIO_Init+0x320>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002826:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_GPIO_Init+0x320>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3301      	adds	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f ae91 	bne.w	8002564 <HAL_GPIO_Init+0x10>
  }
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	48000400 	.word	0x48000400
 800285c:	48000800 	.word	0x48000800
 8002860:	48000c00 	.word	0x48000c00
 8002864:	48001000 	.word	0x48001000
 8002868:	48001400 	.word	0x48001400
 800286c:	48001800 	.word	0x48001800
 8002870:	48001c00 	.word	0x48001c00
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002894:	e002      	b.n	800289c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e08d      	b.n	80029d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff f9ce 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	@ 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e006      	b.n	8002930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800292e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d108      	bne.n	800294a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e007      	b.n	800295a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800297c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f040 80f9 	bne.w	8002bfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x34>
 8002a0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0ed      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Mem_Write+0x4e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0e6      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a36:	f7ff fc77 	bl	8002328 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fac3 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d1      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	@ 0x21
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a80:	88f8      	ldrh	r0, [r7, #6]
 8002a82:	893a      	ldrh	r2, [r7, #8]
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f9d3 	bl	8002e3c <I2C_RequestMemoryWrite>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0a9      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2bff      	cmp	r3, #255	@ 0xff
 8002ab0:	d90e      	bls.n	8002ad0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	22ff      	movs	r2, #255	@ 0xff
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fc47 	bl	800335c <I2C_TransferConfig>
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fc36 	bl	800335c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fac6 	bl	8003086 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e07b      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d034      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x1c8>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d130      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fa3f 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04d      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2bff      	cmp	r3, #255	@ 0xff
 8002b68:	d90e      	bls.n	8002b88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	@ 0xff
 8002b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fbeb 	bl	800335c <I2C_TransferConfig>
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fbda 	bl	800335c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d19e      	bne.n	8002af0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 faac 	bl	8003114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e01a      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <HAL_I2C_Mem_Write+0x224>)
 8002bda:	400b      	ands	r3, r1
 8002bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
  }
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fe00e800 	.word	0xfe00e800

08002c08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	f040 80fd 	bne.w	8002e2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x34>
 8002c36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c42:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0f1      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Mem_Read+0x4e>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0ea      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c5e:	f7ff fb63 	bl	8002328 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2319      	movs	r3, #25
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f9af 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0d5      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2222      	movs	r2, #34	@ 0x22
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	@ 0x40
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca8:	88f8      	ldrh	r0, [r7, #6]
 8002caa:	893a      	ldrh	r2, [r7, #8]
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f913 	bl	8002ee4 <I2C_RequestMemoryRead>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0ad      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2bff      	cmp	r3, #255	@ 0xff
 8002cd8:	d90e      	bls.n	8002cf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	4b52      	ldr	r3, [pc, #328]	@ (8002e34 <HAL_I2C_Mem_Read+0x22c>)
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fb33 	bl	800335c <I2C_TransferConfig>
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e34 <HAL_I2C_Mem_Read+0x22c>)
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb22 	bl	800335c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2104      	movs	r1, #4
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f956 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07c      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d034      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x1d0>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d130      	bne.n	8002dd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2180      	movs	r1, #128	@ 0x80
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f927 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e04d      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2bff      	cmp	r3, #255	@ 0xff
 8002d98:	d90e      	bls.n	8002db8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fad3 	bl	800335c <I2C_TransferConfig>
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fac2 	bl	800335c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d19a      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f994 	bl	8003114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01a      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_I2C_Mem_Read+0x230>)
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	80002400 	.word	0x80002400
 8002e38:	fe00e800 	.word	0xfe00e800

08002e3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	8979      	ldrh	r1, [r7, #10]
 8002e5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <I2C_RequestMemoryWrite+0xa4>)
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa79 	bl	800335c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	69b9      	ldr	r1, [r7, #24]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f909 	bl	8003086 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02c      	b.n	8002ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e8e:	e015      	b.n	8002ebc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	69b9      	ldr	r1, [r7, #24]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8ef 	bl	8003086 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e012      	b.n	8002ed8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2180      	movs	r1, #128	@ 0x80
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f884 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	80002000 	.word	0x80002000

08002ee4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	4608      	mov	r0, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	817b      	strh	r3, [r7, #10]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	813b      	strh	r3, [r7, #8]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <I2C_RequestMemoryRead+0xa4>)
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa26 	bl	800335c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f8b6 	bl	8003086 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e02c      	b.n	8002f7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2a:	893b      	ldrh	r3, [r7, #8]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f34:	e015      	b.n	8002f62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f36:	893b      	ldrh	r3, [r7, #8]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	69b9      	ldr	r1, [r7, #24]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f89c 	bl	8003086 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e012      	b.n	8002f7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f831 	bl	8002fd4 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	80002000 	.word	0x80002000

08002f8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d103      	bne.n	8002faa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d007      	beq.n	8002fc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	619a      	str	r2, [r3, #24]
  }
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	e03b      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	6839      	ldr	r1, [r7, #0]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8d6 	bl	800319c <I2C_IsErrorOccurred>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e041      	b.n	800307e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d02d      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f991 	bl	8002328 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d122      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	429a      	cmp	r2, r3
 8003034:	d113      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	429a      	cmp	r2, r3
 800307a:	d0b4      	beq.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003092:	e033      	b.n	80030fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f87f 	bl	800319c <I2C_IsErrorOccurred>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e031      	b.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d025      	beq.n	80030fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7ff f93a 	bl	8002328 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11a      	bne.n	80030fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d013      	beq.n	80030fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d1c4      	bne.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003120:	e02f      	b.n	8003182 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f838 	bl	800319c <I2C_IsErrorOccurred>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e02d      	b.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7ff f8f7 	bl	8002328 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11a      	bne.n	8003182 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d013      	beq.n	8003182 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b20      	cmp	r3, #32
 800318e:	d1c8      	bne.n	8003122 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d068      	beq.n	800329a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031d0:	e049      	b.n	8003266 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d045      	beq.n	8003266 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7ff f8a5 	bl	8002328 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_IsErrorOccurred+0x54>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d13a      	bne.n	8003266 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003202:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003212:	d121      	bne.n	8003258 <I2C_IsErrorOccurred+0xbc>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800321a:	d01d      	beq.n	8003258 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b20      	cmp	r3, #32
 8003220:	d01a      	beq.n	8003258 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003230:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003232:	f7ff f879 	bl	8002328 <HAL_GetTick>
 8003236:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003238:	e00e      	b.n	8003258 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800323a:	f7ff f875 	bl	8002328 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b19      	cmp	r3, #25
 8003246:	d907      	bls.n	8003258 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003256:	e006      	b.n	8003266 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b20      	cmp	r3, #32
 8003264:	d1e9      	bne.n	800323a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b20      	cmp	r3, #32
 8003272:	d003      	beq.n	800327c <I2C_IsErrorOccurred+0xe0>
 8003274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0aa      	beq.n	80031d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800327c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2220      	movs	r2, #32
 800328a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01c      	beq.n	800334a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fe3b 	bl	8002f8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <I2C_IsErrorOccurred+0x1bc>)
 8003322:	400b      	ands	r3, r1
 8003324:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800334a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800334e:	4618      	mov	r0, r3
 8003350:	3728      	adds	r7, #40	@ 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	fe00e800 	.word	0xfe00e800

0800335c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	4613      	mov	r3, r2
 800336c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003374:	7a7b      	ldrb	r3, [r7, #9]
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800337c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	4313      	orrs	r3, r2
 8003386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	0d5b      	lsrs	r3, r3, #21
 8003396:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800339a:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <I2C_TransferConfig+0x60>)
 800339c:	430b      	orrs	r3, r1
 800339e:	43db      	mvns	r3, r3
 80033a0:	ea02 0103 	and.w	r1, r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	03ff63ff 	.word	0x03ff63ff

080033c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d138      	bne.n	8003448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e032      	b.n	800344a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	@ 0x24
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e000      	b.n	800344a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003448:	2302      	movs	r3, #2
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b20      	cmp	r3, #32
 800346a:	d139      	bne.n	80034e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003476:	2302      	movs	r3, #2
 8003478:	e033      	b.n	80034e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2224      	movs	r2, #36	@ 0x24
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f4:	4b0d      	ldr	r3, [pc, #52]	@ (800352c <HAL_PWREx_GetVoltageRange+0x3c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003500:	d102      	bne.n	8003508 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003506:	e00b      	b.n	8003520 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_PWREx_GetVoltageRange+0x3c>)
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003516:	d102      	bne.n	800351e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800351c:	e000      	b.n	8003520 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800351e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000

08003530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d141      	bne.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800353e:	4b4b      	ldr	r3, [pc, #300]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354a:	d131      	bne.n	80035b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800354c:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003552:	4a46      	ldr	r2, [pc, #280]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800355c:	4b43      	ldr	r3, [pc, #268]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003564:	4a41      	ldr	r2, [pc, #260]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800356a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800356c:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2232      	movs	r2, #50	@ 0x32
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	4a3f      	ldr	r2, [pc, #252]	@ (8003674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	0c9b      	lsrs	r3, r3, #18
 800357e:	3301      	adds	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003582:	e002      	b.n	800358a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3b01      	subs	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800358a:	4b38      	ldr	r3, [pc, #224]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003596:	d102      	bne.n	800359e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f2      	bne.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800359e:	4b33      	ldr	r3, [pc, #204]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035aa:	d158      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e057      	b.n	8003660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b0:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b6:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035c0:	e04d      	b.n	800365e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c8:	d141      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ca:	4b28      	ldr	r3, [pc, #160]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d6:	d131      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035d8:	4b24      	ldr	r3, [pc, #144]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035de:	4a23      	ldr	r2, [pc, #140]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e8:	4b20      	ldr	r3, [pc, #128]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035f0:	4a1e      	ldr	r2, [pc, #120]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2232      	movs	r2, #50	@ 0x32
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a1c      	ldr	r2, [pc, #112]	@ (8003674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9b      	lsrs	r3, r3, #18
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800360e:	e002      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b01      	subs	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003622:	d102      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f2      	bne.n	8003610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003636:	d112      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e011      	b.n	8003660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800364c:	e007      	b.n	800365e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800365c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40007000 	.word	0x40007000
 8003670:	20040000 	.word	0x20040000
 8003674:	431bde83 	.word	0x431bde83

08003678 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800367c:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <HAL_PWREx_EnableVddIO2+0x1c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a04      	ldr	r2, [pc, #16]	@ (8003694 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003686:	6053      	str	r3, [r2, #4]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40007000 	.word	0x40007000

08003698 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f000 bc08 	b.w	8003ebc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ac:	4b96      	ldr	r3, [pc, #600]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b6:	4b94      	ldr	r3, [pc, #592]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80e4 	beq.w	8003896 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4c>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	f040 808b 	bne.w	80037f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	f040 8087 	bne.w	80037f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036e4:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_OscConfig+0x64>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e3df      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	4b81      	ldr	r3, [pc, #516]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <HAL_RCC_OscConfig+0x7e>
 800370c:	4b7e      	ldr	r3, [pc, #504]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003714:	e005      	b.n	8003722 <HAL_RCC_OscConfig+0x8a>
 8003716:	4b7c      	ldr	r3, [pc, #496]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003722:	4293      	cmp	r3, r2
 8003724:	d223      	bcs.n	800376e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fdca 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e3c0      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373a:	4b73      	ldr	r3, [pc, #460]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a72      	ldr	r2, [pc, #456]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b70      	ldr	r3, [pc, #448]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	496d      	ldr	r1, [pc, #436]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003758:	4b6b      	ldr	r3, [pc, #428]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	4968      	ldr	r1, [pc, #416]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
 800376c:	e025      	b.n	80037ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800376e:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a65      	ldr	r2, [pc, #404]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003774:	f043 0308 	orr.w	r3, r3, #8
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b63      	ldr	r3, [pc, #396]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4960      	ldr	r1, [pc, #384]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378c:	4b5e      	ldr	r3, [pc, #376]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	495b      	ldr	r1, [pc, #364]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fd8a 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e380      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ba:	f000 fcc1 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b51      	ldr	r3, [pc, #324]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	4950      	ldr	r1, [pc, #320]	@ (800390c <HAL_RCC_OscConfig+0x274>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003910 <HAL_RCC_OscConfig+0x278>)
 80037d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037da:	4b4e      	ldr	r3, [pc, #312]	@ (8003914 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fd52 	bl	8002288 <HAL_InitTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d052      	beq.n	8003894 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	e364      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d032      	beq.n	8003860 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037fa:	4b43      	ldr	r3, [pc, #268]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a42      	ldr	r2, [pc, #264]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003806:	f7fe fd8f 	bl	8002328 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800380e:	f7fe fd8b 	bl	8002328 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e34d      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003820:	4b39      	ldr	r3, [pc, #228]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382c:	4b36      	ldr	r3, [pc, #216]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a35      	ldr	r2, [pc, #212]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b33      	ldr	r3, [pc, #204]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	4930      	ldr	r1, [pc, #192]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	492b      	ldr	r1, [pc, #172]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
 800385e:	e01a      	b.n	8003896 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003860:	4b29      	ldr	r3, [pc, #164]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a28      	ldr	r2, [pc, #160]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800386c:	f7fe fd5c 	bl	8002328 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003874:	f7fe fd58 	bl	8002328 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e31a      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003886:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x1dc>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d073      	beq.n	800398a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x21c>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d10e      	bne.n	80038cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d10b      	bne.n	80038cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d063      	beq.n	8003988 <HAL_RCC_OscConfig+0x2f0>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d15f      	bne.n	8003988 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e2f7      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x24c>
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0b      	ldr	r2, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e025      	b.n	8003930 <HAL_RCC_OscConfig+0x298>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ec:	d114      	bne.n	8003918 <HAL_RCC_OscConfig+0x280>
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a05      	ldr	r2, [pc, #20]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b03      	ldr	r3, [pc, #12]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a02      	ldr	r2, [pc, #8]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e013      	b.n	8003930 <HAL_RCC_OscConfig+0x298>
 8003908:	40021000 	.word	0x40021000
 800390c:	0800a200 	.word	0x0800a200
 8003910:	20040000 	.word	0x20040000
 8003914:	20040004 	.word	0x20040004
 8003918:	4ba0      	ldr	r3, [pc, #640]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a9f      	ldr	r2, [pc, #636]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800391e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b9d      	ldr	r3, [pc, #628]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a9c      	ldr	r2, [pc, #624]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800392e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fcf6 	bl	8002328 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fe fcf2 	bl	8002328 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	@ 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e2b4      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003952:	4b92      	ldr	r3, [pc, #584]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x2a8>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fce2 	bl	8002328 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fe fcde 	bl	8002328 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	@ 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2a0      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800397a:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x2d0>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d060      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_OscConfig+0x310>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d119      	bne.n	80039d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d116      	bne.n	80039d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	4b7c      	ldr	r3, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_OscConfig+0x328>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e27d      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	4973      	ldr	r1, [pc, #460]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d4:	e040      	b.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d023      	beq.n	8003a26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039de:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe fc9d 	bl	8002328 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fe fc99 	bl	8002328 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e25b      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a04:	4b65      	ldr	r3, [pc, #404]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b62      	ldr	r3, [pc, #392]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	495f      	ldr	r1, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
 8003a24:	e018      	b.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b5d      	ldr	r3, [pc, #372]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fe fc79 	bl	8002328 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fc75 	bl	8002328 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e237      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03c      	beq.n	8003ade <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01c      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a72:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fc54 	bl	8002328 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a84:	f7fe fc50 	bl	8002328 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e212      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ef      	beq.n	8003a84 <HAL_RCC_OscConfig+0x3ec>
 8003aa4:	e01b      	b.n	8003ade <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aac:	4a3b      	ldr	r2, [pc, #236]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fc37 	bl	8002328 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abe:	f7fe fc33 	bl	8002328 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1f5      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad0:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1ef      	bne.n	8003abe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80a6 	beq.w	8003c38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003af0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b08:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b18:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d118      	bne.n	8003b56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b30:	f7fe fbfa 	bl	8002328 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fe fbf6 	bl	8002328 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1b8      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4d8>
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b64:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b6e:	e029      	b.n	8003bc4 <HAL_RCC_OscConfig+0x52c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d115      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x50c>
 8003b78:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b88:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	4a03      	ldr	r2, [pc, #12]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b98:	e014      	b.n	8003bc4 <HAL_RCC_OscConfig+0x52c>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	4b9d      	ldr	r3, [pc, #628]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	4a9c      	ldr	r2, [pc, #624]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bb4:	4b99      	ldr	r3, [pc, #612]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	4a98      	ldr	r2, [pc, #608]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fe fbac 	bl	8002328 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fe fba8 	bl	8002328 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e168      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bea:	4b8c      	ldr	r3, [pc, #560]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ed      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x53c>
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fb95 	bl	8002328 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fe fb91 	bl	8002328 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e151      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c18:	4b80      	ldr	r3, [pc, #512]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ed      	bne.n	8003c02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c26:	7ffb      	ldrb	r3, [r7, #31]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	4a7a      	ldr	r2, [pc, #488]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d03c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01c      	beq.n	8003c86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c4c:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c52:	4a72      	ldr	r2, [pc, #456]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fb64 	bl	8002328 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c64:	f7fe fb60 	bl	8002328 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e122      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c76:	4b69      	ldr	r3, [pc, #420]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ef      	beq.n	8003c64 <HAL_RCC_OscConfig+0x5cc>
 8003c84:	e01b      	b.n	8003cbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c86:	4b65      	ldr	r3, [pc, #404]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8c:	4a63      	ldr	r2, [pc, #396]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c96:	f7fe fb47 	bl	8002328 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c9e:	f7fe fb43 	bl	8002328 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e105      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ef      	bne.n	8003c9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80f9 	beq.w	8003eba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	f040 80cf 	bne.w	8003e70 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cd2:	4b52      	ldr	r3, [pc, #328]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0203 	and.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d12c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d123      	bne.n	8003d40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d11b      	bne.n	8003d40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d113      	bne.n	8003d40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	3b01      	subs	r3, #1
 8003d26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d071      	beq.n	8003e24 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d068      	beq.n	8003e18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d46:	4b35      	ldr	r3, [pc, #212]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d52:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0ac      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d62:	4b2e      	ldr	r3, [pc, #184]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d6e:	f7fe fadb 	bl	8002328 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fe fad7 	bl	8002328 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e099      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d88:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d94:	4b21      	ldr	r3, [pc, #132]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <HAL_RCC_OscConfig+0x788>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003da4:	3a01      	subs	r2, #1
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	4311      	orrs	r1, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dae:	0212      	lsls	r2, r2, #8
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	3a01      	subs	r2, #1
 8003dba:	0552      	lsls	r2, r2, #21
 8003dbc:	4311      	orrs	r1, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dc2:	0852      	lsrs	r2, r2, #1
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	0652      	lsls	r2, r2, #25
 8003dc8:	4311      	orrs	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dce:	06d2      	lsls	r2, r2, #27
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	4912      	ldr	r1, [pc, #72]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dd8:	4b10      	ldr	r3, [pc, #64]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df0:	f7fe fa9a 	bl	8002328 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fe fa96 	bl	8002328 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e058      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	4b04      	ldr	r3, [pc, #16]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e16:	e050      	b.n	8003eba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e04f      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e24:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d144      	bne.n	8003eba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e30:	4b24      	ldr	r3, [pc, #144]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a23      	ldr	r2, [pc, #140]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e3c:	4b21      	ldr	r3, [pc, #132]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e48:	f7fe fa6e 	bl	8002328 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe fa6a 	bl	8002328 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e02c      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e62:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x7b8>
 8003e6e:	e024      	b.n	8003eba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d01f      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe fa51 	bl	8002328 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fe fa4d 	bl	8002328 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e00f      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	4905      	ldr	r1, [pc, #20]	@ (8003ec4 <HAL_RCC_OscConfig+0x82c>)
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_OscConfig+0x830>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
 8003eb4:	e001      	b.n	8003eba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	feeefffc 	.word	0xfeeefffc

08003ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e11d      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b90      	ldr	r3, [pc, #576]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 020f 	bic.w	r2, r3, #15
 8003efa:	498b      	ldr	r1, [pc, #556]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b89      	ldr	r3, [pc, #548]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e105      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b81      	ldr	r3, [pc, #516]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d908      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b7e      	ldr	r3, [pc, #504]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	497b      	ldr	r1, [pc, #492]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d079      	beq.n	8004042 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d11e      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	4b75      	ldr	r3, [pc, #468]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0dc      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003f66:	f000 fa07 	bl	8004378 <RCC_GetSysClockFreqFromPLLSource>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4a70      	ldr	r2, [pc, #448]	@ (8004130 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d946      	bls.n	8004000 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f72:	4b6e      	ldr	r3, [pc, #440]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d140      	bne.n	8004000 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f86:	4a69      	ldr	r2, [pc, #420]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e035      	b.n	8004000 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9c:	4b63      	ldr	r3, [pc, #396]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b9      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0ad      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc4:	4b59      	ldr	r3, [pc, #356]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0a5      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003fd4:	f000 f8b4 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4a55      	ldr	r2, [pc, #340]	@ (8004130 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d90f      	bls.n	8004000 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fe0:	4b52      	ldr	r3, [pc, #328]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fec:	4b4f      	ldr	r3, [pc, #316]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004000:	4b4a      	ldr	r3, [pc, #296]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 0203 	bic.w	r2, r3, #3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4947      	ldr	r1, [pc, #284]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fe f989 	bl	8002328 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004018:	e00a      	b.n	8004030 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401a:	f7fe f985 	bl	8002328 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e077      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004030:	4b3e      	ldr	r3, [pc, #248]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 020c 	and.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	429a      	cmp	r2, r3
 8004040:	d1eb      	bne.n	800401a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b80      	cmp	r3, #128	@ 0x80
 8004046:	d105      	bne.n	8004054 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004048:	4b38      	ldr	r3, [pc, #224]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a37      	ldr	r2, [pc, #220]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 800404e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004052:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	4b31      	ldr	r3, [pc, #196]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800406c:	429a      	cmp	r2, r3
 800406e:	d208      	bcs.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	492b      	ldr	r1, [pc, #172]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004082:	4b29      	ldr	r3, [pc, #164]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d210      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004090:	4b25      	ldr	r3, [pc, #148]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 020f 	bic.w	r2, r3, #15
 8004098:	4923      	ldr	r1, [pc, #140]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a0:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <HAL_RCC_ClockConfig+0x25c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e036      	b.n	8004120 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040be:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4918      	ldr	r1, [pc, #96]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040dc:	4b13      	ldr	r3, [pc, #76]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4910      	ldr	r1, [pc, #64]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f0:	f000 f826 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCC_ClockConfig+0x260>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	490c      	ldr	r1, [pc, #48]	@ (8004134 <HAL_RCC_ClockConfig+0x268>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	4a0a      	ldr	r2, [pc, #40]	@ (8004138 <HAL_RCC_ClockConfig+0x26c>)
 800410e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <HAL_RCC_ClockConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe f8b7 	bl	8002288 <HAL_InitTick>
 800411a:	4603      	mov	r3, r0
 800411c:	73fb      	strb	r3, [r7, #15]

  return status;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40022000 	.word	0x40022000
 800412c:	40021000 	.word	0x40021000
 8004130:	04c4b400 	.word	0x04c4b400
 8004134:	0800a200 	.word	0x0800a200
 8004138:	20040000 	.word	0x20040000
 800413c:	20040004 	.word	0x20040004

08004140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	@ 0x24
 8004144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414e:	4b3e      	ldr	r3, [pc, #248]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004158:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x34>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d121      	bne.n	80041b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d11e      	bne.n	80041b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004174:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004180:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e005      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004190:	4b2d      	ldr	r3, [pc, #180]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800419c:	4a2b      	ldr	r2, [pc, #172]	@ (800424c <HAL_RCC_GetSysClockFreq+0x10c>)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d102      	bne.n	80041be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041b8:	4b25      	ldr	r3, [pc, #148]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	e004      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c4:	4b22      	ldr	r3, [pc, #136]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x110>)
 80041c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d134      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d003      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0xac>
 80041e4:	e005      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x110>)
 80041e8:	617b      	str	r3, [r7, #20]
      break;
 80041ea:	e005      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041ec:	4b18      	ldr	r3, [pc, #96]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ee:	617b      	str	r3, [r7, #20]
      break;
 80041f0:	e002      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	617b      	str	r3, [r7, #20]
      break;
 80041f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041f8:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	3301      	adds	r3, #1
 8004204:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	fb03 f202 	mul.w	r2, r3, r2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	0e5b      	lsrs	r3, r3, #25
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	3301      	adds	r3, #1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004238:	69bb      	ldr	r3, [r7, #24]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3724      	adds	r7, #36	@ 0x24
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	0800a218 	.word	0x0800a218
 8004250:	00f42400 	.word	0x00f42400

08004254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20040000 	.word	0x20040000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4904      	ldr	r1, [pc, #16]	@ (8004294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	0800a210 	.word	0x0800a210

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800429c:	f7ff ffda 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0adb      	lsrs	r3, r3, #11
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4904      	ldr	r1, [pc, #16]	@ (80042c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	0800a210 	.word	0x0800a210

080042c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042d0:	4b27      	ldr	r3, [pc, #156]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042dc:	f7ff f908 	bl	80034f0 <HAL_PWREx_GetVoltageRange>
 80042e0:	6178      	str	r0, [r7, #20]
 80042e2:	e014      	b.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042fc:	f7ff f8f8 	bl	80034f0 <HAL_PWREx_GetVoltageRange>
 8004300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b1b      	ldr	r3, [pc, #108]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	4a1a      	ldr	r2, [pc, #104]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004314:	d10b      	bne.n	800432e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	@ 0x80
 800431a:	d913      	bls.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004320:	d902      	bls.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004322:	2302      	movs	r3, #2
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e00d      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	e00a      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b7f      	cmp	r3, #127	@ 0x7f
 8004332:	d902      	bls.n	800433a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004334:	2302      	movs	r3, #2
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e004      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b70      	cmp	r3, #112	@ 0x70
 800433e:	d101      	bne.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004340:	2301      	movs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 020f 	bic.w	r2, r3, #15
 800434c:	4909      	ldr	r1, [pc, #36]	@ (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004354:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d001      	beq.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	40022000 	.word	0x40022000

08004378 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800437e:	4b2d      	ldr	r3, [pc, #180]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d00b      	beq.n	80043a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d825      	bhi.n	80043e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d008      	beq.n	80043ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11f      	bne.n	80043e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80043a0:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80043a2:	613b      	str	r3, [r7, #16]
    break;
 80043a4:	e01f      	b.n	80043e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80043a6:	4b24      	ldr	r3, [pc, #144]	@ (8004438 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80043a8:	613b      	str	r3, [r7, #16]
    break;
 80043aa:	e01c      	b.n	80043e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043ac:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e005      	b.n	80043d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80043d4:	4a19      	ldr	r2, [pc, #100]	@ (800443c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043dc:	613b      	str	r3, [r7, #16]
    break;
 80043de:	e002      	b.n	80043e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
    break;
 80043e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043e6:	4b13      	ldr	r3, [pc, #76]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	3301      	adds	r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	fb03 f202 	mul.w	r2, r3, r2
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800440c:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	0e5b      	lsrs	r3, r3, #25
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004426:	683b      	ldr	r3, [r7, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40021000 	.word	0x40021000
 8004438:	00f42400 	.word	0x00f42400
 800443c:	0800a218 	.word	0x0800a218

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004448:	2300      	movs	r3, #0
 800444a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800444c:	2300      	movs	r3, #0
 800444e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004458:	2b00      	cmp	r3, #0
 800445a:	d040      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004460:	2b80      	cmp	r3, #128	@ 0x80
 8004462:	d02a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004464:	2b80      	cmp	r3, #128	@ 0x80
 8004466:	d825      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004468:	2b60      	cmp	r3, #96	@ 0x60
 800446a:	d026      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800446c:	2b60      	cmp	r3, #96	@ 0x60
 800446e:	d821      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d006      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d81d      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d010      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004480:	e018      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004482:	4b89      	ldr	r3, [pc, #548]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	4a88      	ldr	r2, [pc, #544]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800448e:	e015      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f001 fa82 	bl	80059a0 <RCCEx_PLLSAI1_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a0:	e00c      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3320      	adds	r3, #32
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fb6d 	bl	8005b88 <RCCEx_PLLSAI2_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b2:	e003      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	74fb      	strb	r3, [r7, #19]
      break;
 80044b8:	e000      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80044ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c2:	4b79      	ldr	r3, [pc, #484]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044c8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d0:	4975      	ldr	r1, [pc, #468]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80044d8:	e001      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d047      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f2:	d030      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80044f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f8:	d82a      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044fe:	d02a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004504:	d824      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800450c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004510:	d81e      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451a:	d010      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800451c:	e018      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800451e:	4b62      	ldr	r3, [pc, #392]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a61      	ldr	r2, [pc, #388]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004528:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800452a:	e015      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f001 fa34 	bl	80059a0 <RCCEx_PLLSAI1_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800453c:	e00c      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3320      	adds	r3, #32
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f001 fb1f 	bl	8005b88 <RCCEx_PLLSAI2_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800454e:	e003      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	74fb      	strb	r3, [r7, #19]
      break;
 8004554:	e000      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800455e:	4b52      	ldr	r3, [pc, #328]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004564:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456c:	494e      	ldr	r1, [pc, #312]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004574:	e001      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 809f 	beq.w	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004588:	2300      	movs	r3, #0
 800458a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800458c:	4b46      	ldr	r3, [pc, #280]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a6:	4a40      	ldr	r2, [pc, #256]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80045ae:	4b3e      	ldr	r3, [pc, #248]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045be:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a3a      	ldr	r2, [pc, #232]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ca:	f7fd fead 	bl	8002328 <HAL_GetTick>
 80045ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d0:	e009      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fd fea9 	bl	8002328 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d902      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	74fb      	strb	r3, [r7, #19]
        break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e6:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ef      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d15b      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045f8:	4b2b      	ldr	r3, [pc, #172]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004602:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01f      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	429a      	cmp	r2, r3
 8004614:	d019      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004620:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004622:	4b21      	ldr	r3, [pc, #132]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004628:	4a1f      	ldr	r2, [pc, #124]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004632:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004638:	4a1b      	ldr	r2, [pc, #108]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800463a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004642:	4a19      	ldr	r2, [pc, #100]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d016      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd fe68 	bl	8002328 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	e00b      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fe64 	bl	8002328 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d902      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	74fb      	strb	r3, [r7, #19]
            break;
 8004672:	e006      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ec      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10c      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004688:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004698:	4903      	ldr	r1, [pc, #12]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	74bb      	strb	r3, [r7, #18]
 80046a6:	e005      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b4:	7c7b      	ldrb	r3, [r7, #17]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4ba0      	ldr	r3, [pc, #640]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046be:	4a9f      	ldr	r2, [pc, #636]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046d2:	4b9a      	ldr	r3, [pc, #616]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d8:	f023 0203 	bic.w	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	4996      	ldr	r1, [pc, #600]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f4:	4b91      	ldr	r3, [pc, #580]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f023 020c 	bic.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	498e      	ldr	r1, [pc, #568]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004716:	4b89      	ldr	r3, [pc, #548]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004724:	4985      	ldr	r1, [pc, #532]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004738:	4b80      	ldr	r3, [pc, #512]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004746:	497d      	ldr	r1, [pc, #500]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800475a:	4b78      	ldr	r3, [pc, #480]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004768:	4974      	ldr	r1, [pc, #464]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800477c:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478a:	496c      	ldr	r1, [pc, #432]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479e:	4b67      	ldr	r3, [pc, #412]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ac:	4963      	ldr	r1, [pc, #396]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c0:	4b5e      	ldr	r3, [pc, #376]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ce:	495b      	ldr	r1, [pc, #364]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e2:	4b56      	ldr	r3, [pc, #344]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	4952      	ldr	r1, [pc, #328]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004804:	4b4d      	ldr	r3, [pc, #308]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004812:	494a      	ldr	r1, [pc, #296]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004826:	4b45      	ldr	r3, [pc, #276]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004834:	4941      	ldr	r1, [pc, #260]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004848:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	4939      	ldr	r1, [pc, #228]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d028      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800486a:	4b34      	ldr	r3, [pc, #208]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004878:	4930      	ldr	r1, [pc, #192]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004888:	d106      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488a:	4b2c      	ldr	r3, [pc, #176]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4a2b      	ldr	r2, [pc, #172]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004894:	60d3      	str	r3, [r2, #12]
 8004896:	e011      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048a0:	d10c      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 f879 	bl	80059a0 <RCCEx_PLLSAI1_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80048b8:	7cfb      	ldrb	r3, [r7, #19]
 80048ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04d      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d0:	d108      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80048d2:	4b1a      	ldr	r3, [pc, #104]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d8:	4a18      	ldr	r2, [pc, #96]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048e2:	e012      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80048e4:	4b15      	ldr	r3, [pc, #84]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ea:	4a14      	ldr	r2, [pc, #80]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004902:	490e      	ldr	r1, [pc, #56]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800490e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004912:	d106      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a08      	ldr	r2, [pc, #32]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800491e:	60d3      	str	r3, [r2, #12]
 8004920:	e020      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492a:	d109      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800492c:	4b03      	ldr	r3, [pc, #12]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a02      	ldr	r2, [pc, #8]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004936:	60d3      	str	r3, [r2, #12]
 8004938:	e014      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004944:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004948:	d10c      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2101      	movs	r1, #1
 8004950:	4618      	mov	r0, r3
 8004952:	f001 f825 	bl	80059a0 <RCCEx_PLLSAI1_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d028      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004970:	4b7a      	ldr	r3, [pc, #488]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800497e:	4977      	ldr	r1, [pc, #476]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800498a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498e:	d106      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004990:	4b72      	ldr	r3, [pc, #456]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a71      	ldr	r2, [pc, #452]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800499a:	60d3      	str	r3, [r2, #12]
 800499c:	e011      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a6:	d10c      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fff6 	bl	80059a0 <RCCEx_PLLSAI1_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01e      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049ce:	4b63      	ldr	r3, [pc, #396]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049de:	495f      	ldr	r1, [pc, #380]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 ffd1 	bl	80059a0 <RCCEx_PLLSAI1_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00b      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a1e:	f023 0204 	bic.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a28:	494c      	ldr	r1, [pc, #304]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a3c:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a42:	f023 0218 	bic.w	r2, r3, #24
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	4943      	ldr	r1, [pc, #268]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d035      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a60:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3d      	ldr	r2, [pc, #244]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fd fc5c 	bl	8002328 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a72:	e009      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a74:	f7fd fc58 	bl	8002328 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d902      	bls.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	74fb      	strb	r3, [r7, #19]
        break;
 8004a86:	e005      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a88:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ef      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d113      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004a9a:	4b30      	ldr	r3, [pc, #192]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004aa0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aaa:	492c      	ldr	r1, [pc, #176]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3320      	adds	r3, #32
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 f865 	bl	8005b88 <RCCEx_PLLSAI2_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01e      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004ad8:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae8:	491c      	ldr	r1, [pc, #112]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3320      	adds	r3, #32
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 f840 	bl	8005b88 <RCCEx_PLLSAI2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d017      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b22:	4b0e      	ldr	r3, [pc, #56]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b32:	490a      	ldr	r1, [pc, #40]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b44:	d105      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b46:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b50:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b52:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b72:	d13e      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004b74:	4bb6      	ldr	r3, [pc, #728]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b86:	d028      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8e:	f200 86f2 	bhi.w	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004ba2:	f000 bee8 	b.w	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ba6:	4baa      	ldr	r3, [pc, #680]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f040 86e2 	bne.w	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bba:	61fb      	str	r3, [r7, #28]
      break;
 8004bbc:	f000 bedd 	b.w	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004bc0:	4ba3      	ldr	r3, [pc, #652]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	f040 86d7 	bne.w	800597e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8004bd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bd4:	61fb      	str	r3, [r7, #28]
      break;
 8004bd6:	f000 bed2 	b.w	800597e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bda:	4b9d      	ldr	r3, [pc, #628]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004be6:	f040 86cc 	bne.w	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8004bea:	4b9a      	ldr	r3, [pc, #616]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bec:	61fb      	str	r3, [r7, #28]
      break;
 8004bee:	f000 bec8 	b.w	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bf2:	4b97      	ldr	r3, [pc, #604]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d036      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d840      	bhi.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d020      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004c14:	e039      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c16:	4b8e      	ldr	r3, [pc, #568]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d116      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c22:	4b8b      	ldr	r3, [pc, #556]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004c2e:	4b88      	ldr	r3, [pc, #544]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004c3a:	4b85      	ldr	r3, [pc, #532]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a84      	ldr	r2, [pc, #528]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004c4e:	e01f      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
      break;
 8004c54:	e01c      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c56:	4b7e      	ldr	r3, [pc, #504]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c62:	d102      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004c64:	4b7d      	ldr	r3, [pc, #500]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004c66:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004c68:	e012      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
      break;
 8004c6e:	e00f      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c70:	4b77      	ldr	r3, [pc, #476]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004c7e:	4b77      	ldr	r3, [pc, #476]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004c80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004c82:	e005      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61bb      	str	r3, [r7, #24]
      break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
      break;
 8004c8e:	bf00      	nop
    }

    switch(PeriphClk)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c96:	f000 8604 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca0:	f200 8671 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004caa:	f000 8467 	beq.w	800557c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb4:	f200 8667 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cbe:	f000 852f 	beq.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc8:	f200 865d 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cd2:	f000 8185 	beq.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cdc:	f200 8653 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce6:	f000 80cb 	beq.w	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf0:	f200 8649 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfa:	f000 842e 	beq.w	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d04:	f200 863f 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d0e:	f000 83e2 	beq.w	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d18:	f200 8635 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d22:	f000 80ad 	beq.w	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2c:	f200 862b 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d36:	f000 809b 	beq.w	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	f200 8621 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4a:	f000 8089 	beq.w	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d54:	f200 8617 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5e:	f000 8552 	beq.w	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d68:	f200 860d 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d72:	f000 84fe 	beq.w	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d7c:	f200 8603 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d86:	f000 849f 	beq.w	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d90:	f200 85f9 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b80      	cmp	r3, #128	@ 0x80
 8004d98:	f000 846a 	beq.w	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b80      	cmp	r3, #128	@ 0x80
 8004da0:	f200 85f1 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d84c      	bhi.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 85ea 	beq.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	2b1f      	cmp	r3, #31
 8004db8:	f200 85e5 	bhi.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	080051d5 	.word	0x080051d5
 8004dc8:	08005243 	.word	0x08005243
 8004dcc:	08005987 	.word	0x08005987
 8004dd0:	080052d7 	.word	0x080052d7
 8004dd4:	08005987 	.word	0x08005987
 8004dd8:	08005987 	.word	0x08005987
 8004ddc:	08005987 	.word	0x08005987
 8004de0:	0800534f 	.word	0x0800534f
 8004de4:	08005987 	.word	0x08005987
 8004de8:	08005987 	.word	0x08005987
 8004dec:	08005987 	.word	0x08005987
 8004df0:	08005987 	.word	0x08005987
 8004df4:	08005987 	.word	0x08005987
 8004df8:	08005987 	.word	0x08005987
 8004dfc:	08005987 	.word	0x08005987
 8004e00:	080053d3 	.word	0x080053d3
 8004e04:	08005987 	.word	0x08005987
 8004e08:	08005987 	.word	0x08005987
 8004e0c:	08005987 	.word	0x08005987
 8004e10:	08005987 	.word	0x08005987
 8004e14:	08005987 	.word	0x08005987
 8004e18:	08005987 	.word	0x08005987
 8004e1c:	08005987 	.word	0x08005987
 8004e20:	08005987 	.word	0x08005987
 8004e24:	08005987 	.word	0x08005987
 8004e28:	08005987 	.word	0x08005987
 8004e2c:	08005987 	.word	0x08005987
 8004e30:	08005987 	.word	0x08005987
 8004e34:	08005987 	.word	0x08005987
 8004e38:	08005987 	.word	0x08005987
 8004e3c:	08005987 	.word	0x08005987
 8004e40:	08005455 	.word	0x08005455
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b40      	cmp	r3, #64	@ 0x40
 8004e48:	f000 83e6 	beq.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004e4c:	f000 bd9b 	b.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004e50:	40021000 	.word	0x40021000
 8004e54:	0007a120 	.word	0x0007a120
 8004e58:	0800a218 	.word	0x0800a218
 8004e5c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004e66:	f000 ff83 	bl	8005d70 <RCCEx_GetSAIxPeriphCLKFreq>
 8004e6a:	61f8      	str	r0, [r7, #28]
      break;
 8004e6c:	f000 bd8e 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e76:	f000 ff7b 	bl	8005d70 <RCCEx_GetSAIxPeriphCLKFreq>
 8004e7a:	61f8      	str	r0, [r7, #28]
      break;
 8004e7c:	f000 bd86 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004e80:	4b9a      	ldr	r3, [pc, #616]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e86:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004e8a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e92:	d015      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e9a:	f200 8092 	bhi.w	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea4:	d029      	beq.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eac:	f200 8089 	bhi.w	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d07b      	beq.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ebc:	d04a      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8004ebe:	e080      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d17d      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ecc:	4b87      	ldr	r3, [pc, #540]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8004ed8:	4b84      	ldr	r3, [pc, #528]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004ee4:	4b81      	ldr	r3, [pc, #516]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	4a7f      	ldr	r2, [pc, #508]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	61fb      	str	r3, [r7, #28]
          break;
 8004ef8:	e066      	b.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004efa:	4b7c      	ldr	r3, [pc, #496]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f06:	d162      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004f08:	4b78      	ldr	r3, [pc, #480]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f14:	d15b      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004f16:	4b75      	ldr	r3, [pc, #468]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f20:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	fb03 f202 	mul.w	r2, r3, r2
 8004f2a:	4b70      	ldr	r3, [pc, #448]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	3301      	adds	r3, #1
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	0d5b      	lsrs	r3, r3, #21
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	3301      	adds	r3, #1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	61fb      	str	r3, [r7, #28]
          break;
 8004f52:	e03c      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004f54:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f60:	d138      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004f62:	4b62      	ldr	r3, [pc, #392]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f6e:	d131      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004f70:	4b5e      	ldr	r3, [pc, #376]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	fb03 f202 	mul.w	r2, r3, r2
 8004f84:	4b59      	ldr	r3, [pc, #356]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	3301      	adds	r3, #1
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004f96:	4b55      	ldr	r3, [pc, #340]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	0d5b      	lsrs	r3, r3, #21
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	61fb      	str	r3, [r7, #28]
          break;
 8004fac:	e012      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004fae:	4b4f      	ldr	r3, [pc, #316]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d10e      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004fbe:	61fb      	str	r3, [r7, #28]
          break;
 8004fc0:	e00b      	b.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8004fc2:	bf00      	nop
 8004fc4:	f000 bce2 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004fc8:	bf00      	nop
 8004fca:	f000 bcdf 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004fce:	bf00      	nop
 8004fd0:	f000 bcdc 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004fd4:	bf00      	nop
 8004fd6:	f000 bcd9 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004fda:	bf00      	nop
        break;
 8004fdc:	f000 bcd6 	b.w	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004fe0:	4b42      	ldr	r3, [pc, #264]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fee:	d13d      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ffc:	f040 84c5 	bne.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005000:	4b3a      	ldr	r3, [pc, #232]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500c:	f040 84bd 	bne.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005010:	4b36      	ldr	r3, [pc, #216]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800501a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	fb03 f202 	mul.w	r2, r3, r2
 8005024:	4b31      	ldr	r3, [pc, #196]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	3301      	adds	r3, #1
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005036:	4b2d      	ldr	r3, [pc, #180]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	0edb      	lsrs	r3, r3, #27
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005054:	2311      	movs	r3, #17
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e001      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800505a:	2307      	movs	r3, #7
 800505c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	61fb      	str	r3, [r7, #28]
      break;
 8005068:	f000 bc8f 	b.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800506c:	4b1f      	ldr	r3, [pc, #124]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005076:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800507e:	d016      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005086:	f200 809b 	bhi.w	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005090:	d032      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005098:	f200 8092 	bhi.w	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8084 	beq.w	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050aa:	d052      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80050ac:	e088      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050ae:	4b0f      	ldr	r3, [pc, #60]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	f040 8084 	bne.w	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80050c8:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	e005      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	4a03      	ldr	r2, [pc, #12]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	61fb      	str	r3, [r7, #28]
          break;
 80050e8:	e06c      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
 80050f0:	0800a218 	.word	0x0800a218
 80050f4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80050f8:	4ba5      	ldr	r3, [pc, #660]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005104:	d160      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005106:	4ba2      	ldr	r3, [pc, #648]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800510e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005112:	d159      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005114:	4b9e      	ldr	r3, [pc, #632]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	fb03 f202 	mul.w	r2, r3, r2
 8005128:	4b99      	ldr	r3, [pc, #612]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	3301      	adds	r3, #1
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800513a:	4b95      	ldr	r3, [pc, #596]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	0d5b      	lsrs	r3, r3, #21
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	3301      	adds	r3, #1
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	61fb      	str	r3, [r7, #28]
          break;
 8005150:	e03a      	b.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005152:	4b8f      	ldr	r3, [pc, #572]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800515e:	d135      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005160:	4b8b      	ldr	r3, [pc, #556]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516c:	d12e      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800516e:	4b88      	ldr	r3, [pc, #544]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005178:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	fb03 f202 	mul.w	r2, r3, r2
 8005182:	4b83      	ldr	r3, [pc, #524]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	3301      	adds	r3, #1
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005194:	4b7e      	ldr	r3, [pc, #504]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	0d5b      	lsrs	r3, r3, #21
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	3301      	adds	r3, #1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	61fb      	str	r3, [r7, #28]
          break;
 80051aa:	e00f      	b.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80051ac:	4b78      	ldr	r3, [pc, #480]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d10a      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80051ba:	4b76      	ldr	r3, [pc, #472]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051bc:	61fb      	str	r3, [r7, #28]
          break;
 80051be:	e007      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80051c0:	bf00      	nop
 80051c2:	e3e2      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80051c4:	bf00      	nop
 80051c6:	e3e0      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80051c8:	bf00      	nop
 80051ca:	e3de      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80051cc:	bf00      	nop
 80051ce:	e3dc      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80051d0:	bf00      	nop
      break;
 80051d2:	e3da      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80051d4:	4b6e      	ldr	r3, [pc, #440]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d827      	bhi.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80051e6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	08005205 	.word	0x08005205
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005221 	.word	0x08005221
          frequency = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7ff f84c 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8005200:	61f8      	str	r0, [r7, #28]
          break;
 8005202:	e01d      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005204:	f7fe ff9c 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005208:	61f8      	str	r0, [r7, #28]
          break;
 800520a:	e019      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800520c:	4b60      	ldr	r3, [pc, #384]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005218:	d10f      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800521a:	4b5f      	ldr	r3, [pc, #380]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800521c:	61fb      	str	r3, [r7, #28]
          break;
 800521e:	e00c      	b.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005220:	4b5b      	ldr	r3, [pc, #364]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d107      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800522e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005232:	61fb      	str	r3, [r7, #28]
          break;
 8005234:	e003      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8005236:	bf00      	nop
 8005238:	e3a8      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800523a:	bf00      	nop
 800523c:	e3a6      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800523e:	bf00      	nop
        break;
 8005240:	e3a4      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005242:	4b53      	ldr	r3, [pc, #332]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	d83a      	bhi.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005254:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005291 	.word	0x08005291
 8005260:	080052cb 	.word	0x080052cb
 8005264:	080052cb 	.word	0x080052cb
 8005268:	080052cb 	.word	0x080052cb
 800526c:	08005299 	.word	0x08005299
 8005270:	080052cb 	.word	0x080052cb
 8005274:	080052cb 	.word	0x080052cb
 8005278:	080052cb 	.word	0x080052cb
 800527c:	080052a1 	.word	0x080052a1
 8005280:	080052cb 	.word	0x080052cb
 8005284:	080052cb 	.word	0x080052cb
 8005288:	080052cb 	.word	0x080052cb
 800528c:	080052b5 	.word	0x080052b5
          frequency = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe ffec 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005294:	61f8      	str	r0, [r7, #28]
          break;
 8005296:	e01d      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8005298:	f7fe ff52 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 800529c:	61f8      	str	r0, [r7, #28]
          break;
 800529e:	e019      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ac:	d10f      	bne.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80052ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80052b0:	61fb      	str	r3, [r7, #28]
          break;
 80052b2:	e00c      	b.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052b4:	4b36      	ldr	r3, [pc, #216]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d107      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052c6:	61fb      	str	r3, [r7, #28]
          break;
 80052c8:	e003      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80052ca:	bf00      	nop
 80052cc:	e35e      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80052ce:	bf00      	nop
 80052d0:	e35c      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80052d2:	bf00      	nop
        break;
 80052d4:	e35a      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80052d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052e0:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b30      	cmp	r3, #48	@ 0x30
 80052e6:	d021      	beq.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b30      	cmp	r3, #48	@ 0x30
 80052ec:	d829      	bhi.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d011      	beq.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d823      	bhi.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b10      	cmp	r3, #16
 8005304:	d004      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8005306:	e01c      	b.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fe ffb0 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 800530c:	61f8      	str	r0, [r7, #28]
          break;
 800530e:	e01d      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005310:	f7fe ff16 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005314:	61f8      	str	r0, [r7, #28]
          break;
 8005316:	e019      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005318:	4b1d      	ldr	r3, [pc, #116]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005324:	d10f      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8005326:	4b1c      	ldr	r3, [pc, #112]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005328:	61fb      	str	r3, [r7, #28]
          break;
 800532a:	e00c      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800532c:	4b18      	ldr	r3, [pc, #96]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d107      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533e:	61fb      	str	r3, [r7, #28]
          break;
 8005340:	e003      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8005342:	bf00      	nop
 8005344:	e322      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005346:	bf00      	nop
 8005348:	e320      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800534a:	bf00      	nop
        break;
 800534c:	e31e      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005354:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005358:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2bc0      	cmp	r3, #192	@ 0xc0
 800535e:	d027      	beq.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2bc0      	cmp	r3, #192	@ 0xc0
 8005364:	d82f      	bhi.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b80      	cmp	r3, #128	@ 0x80
 800536a:	d017      	beq.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b80      	cmp	r3, #128	@ 0x80
 8005370:	d829      	bhi.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b40      	cmp	r3, #64	@ 0x40
 800537c:	d004      	beq.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800537e:	e022      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005380:	f7fe ff74 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005384:	61f8      	str	r0, [r7, #28]
          break;
 8005386:	e023      	b.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8005388:	f7fe feda 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 800538c:	61f8      	str	r0, [r7, #28]
          break;
 800538e:	e01f      	b.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005390:	40021000 	.word	0x40021000
 8005394:	02dc6c00 	.word	0x02dc6c00
 8005398:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800539c:	4b9b      	ldr	r3, [pc, #620]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a8:	d10f      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80053aa:	4b99      	ldr	r3, [pc, #612]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80053ac:	61fb      	str	r3, [r7, #28]
          break;
 80053ae:	e00c      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053b0:	4b96      	ldr	r3, [pc, #600]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d107      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80053be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053c2:	61fb      	str	r3, [r7, #28]
          break;
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80053c6:	bf00      	nop
 80053c8:	e2e0      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80053ca:	bf00      	nop
 80053cc:	e2de      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80053ce:	bf00      	nop
        break;
 80053d0:	e2dc      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80053d2:	4b8e      	ldr	r3, [pc, #568]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053dc:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e4:	d025      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ec:	d82c      	bhi.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f4:	d013      	beq.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fc:	d824      	bhi.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540a:	d004      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800540c:	e01c      	b.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800540e:	f7fe ff2d 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005412:	61f8      	str	r0, [r7, #28]
          break;
 8005414:	e01d      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005416:	f7fe fe93 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 800541a:	61f8      	str	r0, [r7, #28]
          break;
 800541c:	e019      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800541e:	4b7b      	ldr	r3, [pc, #492]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542a:	d10f      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 800542c:	4b78      	ldr	r3, [pc, #480]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800542e:	61fb      	str	r3, [r7, #28]
          break;
 8005430:	e00c      	b.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005432:	4b76      	ldr	r3, [pc, #472]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b02      	cmp	r3, #2
 800543e:	d107      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005444:	61fb      	str	r3, [r7, #28]
          break;
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005448:	bf00      	nop
 800544a:	e29f      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800544c:	bf00      	nop
 800544e:	e29d      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005450:	bf00      	nop
        break;
 8005452:	e29b      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005454:	4b6d      	ldr	r3, [pc, #436]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800545e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005466:	d025      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800546e:	d82c      	bhi.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005476:	d013      	beq.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547e:	d824      	bhi.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548c:	d004      	beq.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800548e:	e01c      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005490:	f7fe feec 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005494:	61f8      	str	r0, [r7, #28]
          break;
 8005496:	e01d      	b.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8005498:	f7fe fe52 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 800549c:	61f8      	str	r0, [r7, #28]
          break;
 800549e:	e019      	b.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054a0:	4b5a      	ldr	r3, [pc, #360]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ac:	d10f      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80054ae:	4b58      	ldr	r3, [pc, #352]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054b0:	61fb      	str	r3, [r7, #28]
          break;
 80054b2:	e00c      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054b4:	4b55      	ldr	r3, [pc, #340]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d107      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c6:	61fb      	str	r3, [r7, #28]
          break;
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80054ca:	bf00      	nop
 80054cc:	e25e      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80054ce:	bf00      	nop
 80054d0:	e25c      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80054d2:	bf00      	nop
        break;
 80054d4:	e25a      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80054d6:	4b4d      	ldr	r3, [pc, #308]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054e0:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054e8:	d007      	beq.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80054f0:	d12f      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fe fe25 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80054f6:	61f8      	str	r0, [r7, #28]
          break;
 80054f8:	e02e      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80054fa:	4b44      	ldr	r3, [pc, #272]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005506:	d126      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005508:	4b40      	ldr	r3, [pc, #256]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005514:	4b3d      	ldr	r3, [pc, #244]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	fb03 f202 	mul.w	r2, r3, r2
 8005528:	4b38      	ldr	r3, [pc, #224]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	3301      	adds	r3, #1
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800553a:	4b34      	ldr	r3, [pc, #208]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	0e5b      	lsrs	r3, r3, #25
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	3301      	adds	r3, #1
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	61fb      	str	r3, [r7, #28]
          break;
 8005550:	e001      	b.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005552:	bf00      	nop
 8005554:	e21a      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005556:	bf00      	nop
        break;
 8005558:	e218      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800555a:	4b2c      	ldr	r3, [pc, #176]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800555c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 800556c:	f7fe fe94 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8005570:	61f8      	str	r0, [r7, #28]
        break;
 8005572:	e20b      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005574:	f7fe fde4 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005578:	61f8      	str	r0, [r7, #28]
        break;
 800557a:	e207      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800557c:	4b23      	ldr	r3, [pc, #140]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800557e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005582:	f003 0318 	and.w	r3, r3, #24
 8005586:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b10      	cmp	r3, #16
 800558c:	d010      	beq.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b10      	cmp	r3, #16
 8005592:	d834      	bhi.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d024      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80055a0:	e02d      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80055a2:	69b9      	ldr	r1, [r7, #24]
 80055a4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80055a8:	f000 fbe2 	bl	8005d70 <RCCEx_GetSAIxPeriphCLKFreq>
 80055ac:	61f8      	str	r0, [r7, #28]
          break;
 80055ae:	e02b      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055b0:	4b16      	ldr	r3, [pc, #88]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d122      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055bc:	4b13      	ldr	r3, [pc, #76]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80055c8:	4b10      	ldr	r3, [pc, #64]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	e005      	b.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80055d4:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80055e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e6:	61fb      	str	r3, [r7, #28]
          break;
 80055e8:	e00b      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055ea:	4b08      	ldr	r3, [pc, #32]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f6:	d106      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80055f8:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055fa:	61fb      	str	r3, [r7, #28]
          break;
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80055fe:	bf00      	nop
 8005600:	e1c4      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005602:	bf00      	nop
 8005604:	e1c2      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005606:	bf00      	nop
        break;
 8005608:	e1c0      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	00f42400 	.word	0x00f42400
 8005614:	0800a218 	.word	0x0800a218
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005618:	4b96      	ldr	r3, [pc, #600]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005622:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562a:	d013      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005632:	d819      	bhi.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005640:	d004      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005642:	e011      	b.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fe fe12 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005648:	61f8      	str	r0, [r7, #28]
          break;
 800564a:	e010      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800564c:	f7fe fd78 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005650:	61f8      	str	r0, [r7, #28]
          break;
 8005652:	e00c      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005654:	4b87      	ldr	r3, [pc, #540]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005660:	d104      	bne.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005662:	4b85      	ldr	r3, [pc, #532]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005664:	61fb      	str	r3, [r7, #28]
          break;
 8005666:	e001      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005668:	bf00      	nop
 800566a:	e18f      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800566c:	bf00      	nop
        break;
 800566e:	e18d      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005670:	4b80      	ldr	r3, [pc, #512]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800567a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005682:	d013      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568a:	d819      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005698:	d004      	beq.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800569a:	e011      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe fde6 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80056a0:	61f8      	str	r0, [r7, #28]
          break;
 80056a2:	e010      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80056a4:	f7fe fd4c 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80056a8:	61f8      	str	r0, [r7, #28]
          break;
 80056aa:	e00c      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056ac:	4b71      	ldr	r3, [pc, #452]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b8:	d104      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80056ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056bc:	61fb      	str	r3, [r7, #28]
          break;
 80056be:	e001      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80056c0:	bf00      	nop
 80056c2:	e163      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80056c4:	bf00      	nop
        break;
 80056c6:	e161      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80056c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d2:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056da:	d013      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056e2:	d819      	bhi.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f0:	d004      	beq.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80056f2:	e011      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056f4:	f7fe fdba 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80056f8:	61f8      	str	r0, [r7, #28]
          break;
 80056fa:	e010      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80056fc:	f7fe fd20 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005700:	61f8      	str	r0, [r7, #28]
          break;
 8005702:	e00c      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005704:	4b5b      	ldr	r3, [pc, #364]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005710:	d104      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005712:	4b59      	ldr	r3, [pc, #356]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005714:	61fb      	str	r3, [r7, #28]
          break;
 8005716:	e001      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005718:	bf00      	nop
 800571a:	e137      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800571c:	bf00      	nop
        break;
 800571e:	e135      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005720:	4b54      	ldr	r3, [pc, #336]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d011      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d818      	bhi.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d004      	beq.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005744:	e011      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005746:	f7fe fd91 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 800574a:	61f8      	str	r0, [r7, #28]
          break;
 800574c:	e010      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800574e:	f7fe fcf7 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005752:	61f8      	str	r0, [r7, #28]
          break;
 8005754:	e00c      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005756:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005762:	d104      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005764:	4b44      	ldr	r3, [pc, #272]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005766:	61fb      	str	r3, [r7, #28]
          break;
 8005768:	e001      	b.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800576a:	bf00      	nop
 800576c:	e10e      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800576e:	bf00      	nop
        break;
 8005770:	e10c      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005772:	4b40      	ldr	r3, [pc, #256]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005778:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800577c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005784:	d02c      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800578c:	d833      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005794:	d01a      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800579c:	d82b      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057aa:	d004      	beq.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80057ac:	e023      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057ae:	f7fe fd5d 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80057b2:	61f8      	str	r0, [r7, #28]
          break;
 80057b4:	e026      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80057b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80057b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d11a      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80057c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057c8:	61fb      	str	r3, [r7, #28]
          break;
 80057ca:	e016      	b.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057cc:	4b29      	ldr	r3, [pc, #164]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d8:	d111      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80057da:	4b27      	ldr	r3, [pc, #156]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057dc:	61fb      	str	r3, [r7, #28]
          break;
 80057de:	e00e      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057e0:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d109      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80057ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057f2:	61fb      	str	r3, [r7, #28]
          break;
 80057f4:	e005      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80057f6:	bf00      	nop
 80057f8:	e0c8      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057fa:	bf00      	nop
 80057fc:	e0c6      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057fe:	bf00      	nop
 8005800:	e0c4      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005802:	bf00      	nop
        break;
 8005804:	e0c2      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005806:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005810:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005818:	d030      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005820:	d837      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005828:	d01a      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005830:	d82f      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583e:	d004      	beq.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005840:	e027      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fe fd13 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005846:	61f8      	str	r0, [r7, #28]
          break;
 8005848:	e02a      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800584a:	4b0a      	ldr	r3, [pc, #40]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b02      	cmp	r3, #2
 8005856:	d11e      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005858:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800585c:	61fb      	str	r3, [r7, #28]
          break;
 800585e:	e01a      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586c:	d115      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800586e:	4b02      	ldr	r3, [pc, #8]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005870:	61fb      	str	r3, [r7, #28]
          break;
 8005872:	e012      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005874:	40021000 	.word	0x40021000
 8005878:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587c:	4b46      	ldr	r3, [pc, #280]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d109      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588e:	61fb      	str	r3, [r7, #28]
          break;
 8005890:	e005      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005892:	bf00      	nop
 8005894:	e07a      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005896:	bf00      	nop
 8005898:	e078      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800589a:	bf00      	nop
 800589c:	e076      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800589e:	bf00      	nop
        break;
 80058a0:	e074      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80058a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80058a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80058ac:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b4:	d02c      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058bc:	d855      	bhi.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ca:	d004      	beq.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80058cc:	e04d      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80058ce:	f7fe fc37 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80058d2:	61f8      	str	r0, [r7, #28]
          break;
 80058d4:	e04e      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80058d6:	4b30      	ldr	r3, [pc, #192]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d145      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80058e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80058ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	e005      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80058fa:	4b27      	ldr	r3, [pc, #156]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80058fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	4a25      	ldr	r2, [pc, #148]	@ (800599c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	61fb      	str	r3, [r7, #28]
          break;
 800590e:	e02e      	b.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005910:	4b21      	ldr	r3, [pc, #132]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005918:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800591c:	d129      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800591e:	4b1e      	ldr	r3, [pc, #120]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592a:	d122      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800592c:	4b1a      	ldr	r3, [pc, #104]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005936:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	fb03 f202 	mul.w	r2, r3, r2
 8005940:	4b15      	ldr	r3, [pc, #84]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	3301      	adds	r3, #1
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005952:	4b11      	ldr	r3, [pc, #68]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	0d5b      	lsrs	r3, r3, #21
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	3301      	adds	r3, #1
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	61fb      	str	r3, [r7, #28]
          break;
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800596a:	bf00      	nop
 800596c:	e00e      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800596e:	bf00      	nop
 8005970:	e00c      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005972:	bf00      	nop
        break;
 8005974:	e00a      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005976:	bf00      	nop
 8005978:	e008      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800597a:	bf00      	nop
 800597c:	e006      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800597e:	bf00      	nop
 8005980:	e004      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800598a:	bf00      	nop
    }
  }

  return(frequency);
 800598c:	69fb      	ldr	r3, [r7, #28]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40021000 	.word	0x40021000
 800599c:	0800a218 	.word	0x0800a218

080059a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059ae:	4b72      	ldr	r3, [pc, #456]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0203 	and.w	r2, r3, #3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d103      	bne.n	80059d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
       ||
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d142      	bne.n	8005a58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e03f      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d018      	beq.n	8005a12 <RCCEx_PLLSAI1_Config+0x72>
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d825      	bhi.n	8005a30 <RCCEx_PLLSAI1_Config+0x90>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d002      	beq.n	80059ee <RCCEx_PLLSAI1_Config+0x4e>
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d009      	beq.n	8005a00 <RCCEx_PLLSAI1_Config+0x60>
 80059ec:	e020      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ee:	4b62      	ldr	r3, [pc, #392]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11d      	bne.n	8005a36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fe:	e01a      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a00:	4b5d      	ldr	r3, [pc, #372]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a10:	e013      	b.n	8005a3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a12:	4b59      	ldr	r3, [pc, #356]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10f      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a1e:	4b56      	ldr	r3, [pc, #344]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a2e:	e006      	b.n	8005a3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
      break;
 8005a34:	e004      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005a46:	4b4c      	ldr	r3, [pc, #304]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 0203 	bic.w	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4949      	ldr	r1, [pc, #292]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 8086 	bne.w	8005b6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a60:	4b45      	ldr	r3, [pc, #276]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a44      	ldr	r2, [pc, #272]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6c:	f7fc fc5c 	bl	8002328 <HAL_GetTick>
 8005a70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a72:	e009      	b.n	8005a88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a74:	f7fc fc58 	bl	8002328 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d902      	bls.n	8005a88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	73fb      	strb	r3, [r7, #15]
        break;
 8005a86:	e005      	b.n	8005a94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a88:	4b3b      	ldr	r3, [pc, #236]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ef      	bne.n	8005a74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d168      	bne.n	8005b6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d113      	bne.n	8005ac8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aa0:	4b35      	ldr	r3, [pc, #212]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	4b35      	ldr	r3, [pc, #212]	@ (8005b7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6892      	ldr	r2, [r2, #8]
 8005aac:	0211      	lsls	r1, r2, #8
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68d2      	ldr	r2, [r2, #12]
 8005ab2:	06d2      	lsls	r2, r2, #27
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6852      	ldr	r2, [r2, #4]
 8005aba:	3a01      	subs	r2, #1
 8005abc:	0112      	lsls	r2, r2, #4
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	492d      	ldr	r1, [pc, #180]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	610b      	str	r3, [r1, #16]
 8005ac6:	e02d      	b.n	8005b24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d115      	bne.n	8005afa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ace:	4b2a      	ldr	r3, [pc, #168]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8005b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	0211      	lsls	r1, r2, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6912      	ldr	r2, [r2, #16]
 8005ae0:	0852      	lsrs	r2, r2, #1
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	0552      	lsls	r2, r2, #21
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6852      	ldr	r2, [r2, #4]
 8005aec:	3a01      	subs	r2, #1
 8005aee:	0112      	lsls	r2, r2, #4
 8005af0:	430a      	orrs	r2, r1
 8005af2:	4921      	ldr	r1, [pc, #132]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]
 8005af8:	e014      	b.n	8005b24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005afa:	4b1f      	ldr	r3, [pc, #124]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	4b21      	ldr	r3, [pc, #132]	@ (8005b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6892      	ldr	r2, [r2, #8]
 8005b06:	0211      	lsls	r1, r2, #8
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6952      	ldr	r2, [r2, #20]
 8005b0c:	0852      	lsrs	r2, r2, #1
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	0652      	lsls	r2, r2, #25
 8005b12:	4311      	orrs	r1, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6852      	ldr	r2, [r2, #4]
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	0112      	lsls	r2, r2, #4
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	4916      	ldr	r1, [pc, #88]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b24:	4b14      	ldr	r3, [pc, #80]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a13      	ldr	r2, [pc, #76]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fc fbfa 	bl	8002328 <HAL_GetTick>
 8005b34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b36:	e009      	b.n	8005b4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b38:	f7fc fbf6 	bl	8002328 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d902      	bls.n	8005b4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	73fb      	strb	r3, [r7, #15]
          break;
 8005b4a:	e005      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0ef      	beq.n	8005b38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b5e:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	4904      	ldr	r1, [pc, #16]	@ (8005b78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	07ff800f 	.word	0x07ff800f
 8005b80:	ff9f800f 	.word	0xff9f800f
 8005b84:	f9ff800f 	.word	0xf9ff800f

08005b88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b96:	4b72      	ldr	r3, [pc, #456]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00e      	beq.n	8005bc0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0203 	and.w	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d103      	bne.n	8005bba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d142      	bne.n	8005c40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
 8005bbe:	e03f      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d018      	beq.n	8005bfa <RCCEx_PLLSAI2_Config+0x72>
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d825      	bhi.n	8005c18 <RCCEx_PLLSAI2_Config+0x90>
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d002      	beq.n	8005bd6 <RCCEx_PLLSAI2_Config+0x4e>
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d009      	beq.n	8005be8 <RCCEx_PLLSAI2_Config+0x60>
 8005bd4:	e020      	b.n	8005c18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bd6:	4b62      	ldr	r3, [pc, #392]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d11d      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be6:	e01a      	b.n	8005c1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005be8:	4b5d      	ldr	r3, [pc, #372]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d116      	bne.n	8005c22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf8:	e013      	b.n	8005c22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bfa:	4b59      	ldr	r3, [pc, #356]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c06:	4b56      	ldr	r3, [pc, #344]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c16:	e006      	b.n	8005c26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1c:	e004      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e002      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c22:	bf00      	nop
 8005c24:	e000      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f023 0203 	bic.w	r2, r3, #3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4949      	ldr	r1, [pc, #292]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 8086 	bne.w	8005d54 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c48:	4b45      	ldr	r3, [pc, #276]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a44      	ldr	r2, [pc, #272]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c54:	f7fc fb68 	bl	8002328 <HAL_GetTick>
 8005c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c5a:	e009      	b.n	8005c70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c5c:	f7fc fb64 	bl	8002328 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d902      	bls.n	8005c70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c6e:	e005      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c70:	4b3b      	ldr	r3, [pc, #236]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1ef      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d168      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d113      	bne.n	8005cb0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c88:	4b35      	ldr	r3, [pc, #212]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	4b35      	ldr	r3, [pc, #212]	@ (8005d64 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6892      	ldr	r2, [r2, #8]
 8005c94:	0211      	lsls	r1, r2, #8
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	68d2      	ldr	r2, [r2, #12]
 8005c9a:	06d2      	lsls	r2, r2, #27
 8005c9c:	4311      	orrs	r1, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6852      	ldr	r2, [r2, #4]
 8005ca2:	3a01      	subs	r2, #1
 8005ca4:	0112      	lsls	r2, r2, #4
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	492d      	ldr	r1, [pc, #180]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	614b      	str	r3, [r1, #20]
 8005cae:	e02d      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d115      	bne.n	8005ce2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	4b2b      	ldr	r3, [pc, #172]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6892      	ldr	r2, [r2, #8]
 8005cc2:	0211      	lsls	r1, r2, #8
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6912      	ldr	r2, [r2, #16]
 8005cc8:	0852      	lsrs	r2, r2, #1
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	0552      	lsls	r2, r2, #21
 8005cce:	4311      	orrs	r1, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6852      	ldr	r2, [r2, #4]
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	0112      	lsls	r2, r2, #4
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	4921      	ldr	r1, [pc, #132]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	614b      	str	r3, [r1, #20]
 8005ce0:	e014      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	4b21      	ldr	r3, [pc, #132]	@ (8005d6c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6892      	ldr	r2, [r2, #8]
 8005cee:	0211      	lsls	r1, r2, #8
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6952      	ldr	r2, [r2, #20]
 8005cf4:	0852      	lsrs	r2, r2, #1
 8005cf6:	3a01      	subs	r2, #1
 8005cf8:	0652      	lsls	r2, r2, #25
 8005cfa:	4311      	orrs	r1, r2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6852      	ldr	r2, [r2, #4]
 8005d00:	3a01      	subs	r2, #1
 8005d02:	0112      	lsls	r2, r2, #4
 8005d04:	430a      	orrs	r2, r1
 8005d06:	4916      	ldr	r1, [pc, #88]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d0c:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a13      	ldr	r2, [pc, #76]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fc fb06 	bl	8002328 <HAL_GetTick>
 8005d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d1e:	e009      	b.n	8005d34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d20:	f7fc fb02 	bl	8002328 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d902      	bls.n	8005d34 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	73fb      	strb	r3, [r7, #15]
          break;
 8005d32:	e005      	b.n	8005d40 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d34:	4b0a      	ldr	r3, [pc, #40]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ef      	beq.n	8005d20 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d48:	695a      	ldr	r2, [r3, #20]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	4904      	ldr	r1, [pc, #16]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000
 8005d64:	07ff800f 	.word	0x07ff800f
 8005d68:	ff9f800f 	.word	0xff9f800f
 8005d6c:	f9ff800f 	.word	0xf9ff800f

08005d70 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	@ 0x24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d8c:	d10b      	bne.n	8005da6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d94:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005d98:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b60      	cmp	r3, #96	@ 0x60
 8005d9e:	d112      	bne.n	8005dc6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005da0:	4b7a      	ldr	r3, [pc, #488]	@ (8005f8c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e00f      	b.n	8005dc6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dac:	d10b      	bne.n	8005dc6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005dae:	4b76      	ldr	r3, [pc, #472]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005db4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005db8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dc0:	d101      	bne.n	8005dc6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005dc2:	4b72      	ldr	r3, [pc, #456]	@ (8005f8c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005dc4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 80d6 	bne.w	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b40      	cmp	r3, #64	@ 0x40
 8005dd6:	d003      	beq.n	8005de0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dde:	d13b      	bne.n	8005e58 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005de0:	4b69      	ldr	r3, [pc, #420]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dec:	f040 80c4 	bne.w	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005df0:	4b65      	ldr	r3, [pc, #404]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80bd 	beq.w	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005dfe:	4b62      	ldr	r3, [pc, #392]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	3301      	adds	r3, #1
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e12:	4b5d      	ldr	r3, [pc, #372]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	0edb      	lsrs	r3, r3, #27
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005e30:	4b55      	ldr	r3, [pc, #340]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005e3c:	2311      	movs	r3, #17
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e001      	b.n	8005e46 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005e42:	2307      	movs	r3, #7
 8005e44:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	fb03 f202 	mul.w	r2, r3, r2
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e56:	e08f      	b.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d13a      	bne.n	8005ed4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e6a:	f040 8086 	bne.w	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005e6e:	4b46      	ldr	r3, [pc, #280]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d07f      	beq.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005e7a:	4b43      	ldr	r3, [pc, #268]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	3301      	adds	r3, #1
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e98:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	0edb      	lsrs	r3, r3, #27
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005eac:	4b36      	ldr	r3, [pc, #216]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005eb8:	2311      	movs	r3, #17
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e001      	b.n	8005ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005ebe:	2307      	movs	r3, #7
 8005ec0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	fb03 f202 	mul.w	r2, r3, r2
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	e052      	b.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2b80      	cmp	r3, #128	@ 0x80
 8005ed8:	d003      	beq.n	8005ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ee0:	d109      	bne.n	8005ef6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee2:	4b29      	ldr	r3, [pc, #164]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eee:	d144      	bne.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005ef0:	4b27      	ldr	r3, [pc, #156]	@ (8005f90 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005ef2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ef4:	e041      	b.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d003      	beq.n	8005f04 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f02:	d13a      	bne.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005f04:	4b20      	ldr	r3, [pc, #128]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f10:	d133      	bne.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005f12:	4b1d      	ldr	r3, [pc, #116]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d02d      	beq.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	3301      	adds	r3, #1
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005f32:	4b15      	ldr	r3, [pc, #84]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f3c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005f3e:	4b12      	ldr	r3, [pc, #72]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	0edb      	lsrs	r3, r3, #27
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005f50:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005f5c:	2311      	movs	r3, #17
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e001      	b.n	8005f66 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005f62:	2307      	movs	r3, #7
 8005f64:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	fb03 f202 	mul.w	r2, r3, r2
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e000      	b.n	8005f7a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005f78:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3724      	adds	r7, #36	@ 0x24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	001fff68 	.word	0x001fff68
 8005f90:	00f42400 	.word	0x00f42400

08005f94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	@ 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e1c7      	b.n	8006336 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10e      	bne.n	8005fce <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a81      	ldr	r2, [pc, #516]	@ (80061bc <HAL_SAI_Init+0x228>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d107      	bne.n	8005fca <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d103      	bne.n	8005fca <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e1b3      	b.n	8006336 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb ff8a 	bl	8001efc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9b1 	bl	8006350 <SAI_Disable>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e19e      	b.n	8006336 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d00c      	beq.n	8006022 <HAL_SAI_Init+0x8e>
 8006008:	2b02      	cmp	r3, #2
 800600a:	d80d      	bhi.n	8006028 <HAL_SAI_Init+0x94>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_SAI_Init+0x82>
 8006010:	2b01      	cmp	r3, #1
 8006012:	d003      	beq.n	800601c <HAL_SAI_Init+0x88>
 8006014:	e008      	b.n	8006028 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800601a:	e008      	b.n	800602e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800601c:	2310      	movs	r3, #16
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006020:	e005      	b.n	800602e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006022:	2320      	movs	r3, #32
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006026:	e002      	b.n	800602e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800602c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b03      	cmp	r3, #3
 8006034:	d81d      	bhi.n	8006072 <HAL_SAI_Init+0xde>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <HAL_SAI_Init+0xa8>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	0800604d 	.word	0x0800604d
 8006040:	08006053 	.word	0x08006053
 8006044:	0800605b 	.word	0x0800605b
 8006048:	08006063 	.word	0x08006063
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
      break;
 8006050:	e012      	b.n	8006078 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006056:	61fb      	str	r3, [r7, #28]
      break;
 8006058:	e00e      	b.n	8006078 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800605a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800605e:	61fb      	str	r3, [r7, #28]
      break;
 8006060:	e00a      	b.n	8006078 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006066:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006070:	e002      	b.n	8006078 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
      break;
 8006076:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a4f      	ldr	r2, [pc, #316]	@ (80061bc <HAL_SAI_Init+0x228>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_SAI_Init+0xf8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4e      	ldr	r2, [pc, #312]	@ (80061c0 <HAL_SAI_Init+0x22c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d103      	bne.n	8006094 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800608c:	4a4d      	ldr	r2, [pc, #308]	@ (80061c4 <HAL_SAI_Init+0x230>)
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e002      	b.n	800609a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006094:	4a4c      	ldr	r2, [pc, #304]	@ (80061c8 <HAL_SAI_Init+0x234>)
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d073      	beq.n	800618a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a45      	ldr	r2, [pc, #276]	@ (80061bc <HAL_SAI_Init+0x228>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_SAI_Init+0x122>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a43      	ldr	r2, [pc, #268]	@ (80061c0 <HAL_SAI_Init+0x22c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d105      	bne.n	80060c2 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80060b6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80060ba:	f7fe fd51 	bl	8004b60 <HAL_RCCEx_GetPeriphCLKFreq>
 80060be:	61b8      	str	r0, [r7, #24]
 80060c0:	e004      	b.n	80060cc <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80060c2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80060c6:	f7fe fd4b 	bl	8004b60 <HAL_RCCEx_GetPeriphCLKFreq>
 80060ca:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060d4:	d120      	bne.n	8006118 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d102      	bne.n	80060e4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80060de:	2340      	movs	r3, #64	@ 0x40
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	e00a      	b.n	80060fa <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d103      	bne.n	80060f4 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80060ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e002      	b.n	80060fa <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4619      	mov	r1, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	fb02 f303 	mul.w	r3, r2, r3
 8006110:	fbb1 f3f3 	udiv	r3, r1, r3
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e017      	b.n	8006148 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006120:	d101      	bne.n	8006126 <HAL_SAI_Init+0x192>
 8006122:	2302      	movs	r3, #2
 8006124:	e000      	b.n	8006128 <HAL_SAI_Init+0x194>
 8006126:	2301      	movs	r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	4619      	mov	r1, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	fbb1 f3f3 	udiv	r3, r1, r3
 8006146:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4a20      	ldr	r2, [pc, #128]	@ (80061cc <HAL_SAI_Init+0x238>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	08da      	lsrs	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	4b1c      	ldr	r3, [pc, #112]	@ (80061cc <HAL_SAI_Init+0x238>)
 800615a:	fba3 2301 	umull	r2, r3, r3, r1
 800615e:	08da      	lsrs	r2, r3, #3
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	1aca      	subs	r2, r1, r3
 800616a:	2a08      	cmp	r2, #8
 800616c:	d904      	bls.n	8006178 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	2b04      	cmp	r3, #4
 800617e:	d104      	bne.n	800618a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	085a      	lsrs	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_SAI_Init+0x206>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d109      	bne.n	80061ae <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_SAI_Init+0x212>
 80061a2:	2300      	movs	r3, #0
 80061a4:	e001      	b.n	80061aa <HAL_SAI_Init+0x216>
 80061a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	e012      	b.n	80061d4 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10c      	bne.n	80061d0 <HAL_SAI_Init+0x23c>
 80061b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061ba:	e00a      	b.n	80061d2 <HAL_SAI_Init+0x23e>
 80061bc:	40015404 	.word	0x40015404
 80061c0:	40015424 	.word	0x40015424
 80061c4:	40015400 	.word	0x40015400
 80061c8:	40015800 	.word	0x40015800
 80061cc:	cccccccd 	.word	0xcccccccd
 80061d0:	2300      	movs	r3, #0
 80061d2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b58      	ldr	r3, [pc, #352]	@ (8006340 <HAL_SAI_Init+0x3ac>)
 80061e0:	400b      	ands	r3, r1
 80061e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fe:	431a      	orrs	r2, r3
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800620c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006218:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	051b      	lsls	r3, r3, #20
 8006220:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006226:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800623e:	f023 030f 	bic.w	r3, r3, #15
 8006242:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6899      	ldr	r1, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b35      	ldr	r3, [pc, #212]	@ (8006344 <HAL_SAI_Init+0x3b0>)
 800626e:	400b      	ands	r3, r1
 8006270:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6899      	ldr	r1, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006282:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8006288:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800628e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006294:	3b01      	subs	r3, #1
 8006296:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006298:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68d9      	ldr	r1, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80062b0:	400b      	ands	r3, r1
 80062b2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80062ca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d0:	3b01      	subs	r3, #1
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <HAL_SAI_Init+0x3b4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d119      	bne.n	800631c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80062e8:	4b18      	ldr	r3, [pc, #96]	@ (800634c <HAL_SAI_Init+0x3b8>)
 80062ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ec:	4a17      	ldr	r2, [pc, #92]	@ (800634c <HAL_SAI_Init+0x3b8>)
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10e      	bne.n	800631c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006306:	3b01      	subs	r3, #1
 8006308:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800630a:	4910      	ldr	r1, [pc, #64]	@ (800634c <HAL_SAI_Init+0x3b8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006310:	4b0e      	ldr	r3, [pc, #56]	@ (800634c <HAL_SAI_Init+0x3b8>)
 8006312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006314:	4a0d      	ldr	r2, [pc, #52]	@ (800634c <HAL_SAI_Init+0x3b8>)
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3728      	adds	r7, #40	@ 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	f805c010 	.word	0xf805c010
 8006344:	fff88000 	.word	0xfff88000
 8006348:	40015404 	.word	0x40015404
 800634c:	40015400 	.word	0x40015400

08006350 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006358:	4b18      	ldr	r3, [pc, #96]	@ (80063bc <SAI_Disable+0x6c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a18      	ldr	r2, [pc, #96]	@ (80063c0 <SAI_Disable+0x70>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0b1b      	lsrs	r3, r3, #12
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800637a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006388:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	72fb      	strb	r3, [r7, #11]
      break;
 8006396:	e009      	b.n	80063ac <SAI_Disable+0x5c>
    }
    count--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e7      	bne.n	800637c <SAI_Disable+0x2c>

  return status;
 80063ac:	7afb      	ldrb	r3, [r7, #11]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20040000 	.word	0x20040000
 80063c0:	95cbec1b 	.word	0x95cbec1b

080063c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e038      	b.n	800644c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7fb fd7a 	bl	8001ee8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3308      	adds	r3, #8
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f000 ff24 	bl	800724c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	461a      	mov	r2, r3
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	f000 ffb6 	bl	8007380 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6858      	ldr	r0, [r3, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	f000 fffa 	bl	800741a <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	6892      	ldr	r2, [r2, #8]
 800642e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	6892      	ldr	r2, [r2, #8]
 800643a:	f041 0101 	orr.w	r1, r1, #1
 800643e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e042      	b.n	80064ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fb fc5b 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2224      	movs	r2, #36	@ 0x24
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fbb2 	bl	8006c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f8b3 	bl	8006610 <UART_SetConfig>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e01b      	b.n	80064ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fc31 	bl	8006d4c <UART_CheckIdleState>
 80064ea:	4603      	mov	r3, r0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	@ 0x28
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	2b20      	cmp	r3, #32
 800650c:	d17b      	bne.n	8006606 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_UART_Transmit+0x26>
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e074      	b.n	8006608 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2221      	movs	r2, #33	@ 0x21
 800652a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800652e:	f7fb fefb 	bl	8002328 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	88fa      	ldrh	r2, [r7, #6]
 8006538:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654c:	d108      	bne.n	8006560 <HAL_UART_Transmit+0x6c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e003      	b.n	8006568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006568:	e030      	b.n	80065cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	@ 0x80
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fc93 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e03d      	b.n	8006608 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659e:	b292      	uxth	r2, r2
 80065a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	3302      	adds	r3, #2
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	e007      	b.n	80065ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	3301      	adds	r3, #1
 80065b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1c8      	bne.n	800656a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2200      	movs	r2, #0
 80065e0:	2140      	movs	r1, #64	@ 0x40
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fc5c 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e006      	b.n	8006608 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006614:	b08c      	sub	sp, #48	@ 0x30
 8006616:	af00      	add	r7, sp, #0
 8006618:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	431a      	orrs	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	431a      	orrs	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	4313      	orrs	r3, r2
 8006636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4baa      	ldr	r3, [pc, #680]	@ (80068e8 <UART_SetConfig+0x2d8>)
 8006640:	4013      	ands	r3, r2
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006648:	430b      	orrs	r3, r1
 800664a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a9f      	ldr	r2, [pc, #636]	@ (80068ec <UART_SetConfig+0x2dc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006678:	4313      	orrs	r3, r2
 800667a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006686:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006690:	430b      	orrs	r3, r1
 8006692:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	f023 010f 	bic.w	r1, r3, #15
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a90      	ldr	r2, [pc, #576]	@ (80068f0 <UART_SetConfig+0x2e0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d125      	bne.n	8006700 <UART_SetConfig+0xf0>
 80066b4:	4b8f      	ldr	r3, [pc, #572]	@ (80068f4 <UART_SetConfig+0x2e4>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d81a      	bhi.n	80066f8 <UART_SetConfig+0xe8>
 80066c2:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <UART_SetConfig+0xb8>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	080066e9 	.word	0x080066e9
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066de:	e116      	b.n	800690e <UART_SetConfig+0x2fe>
 80066e0:	2302      	movs	r3, #2
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e6:	e112      	b.n	800690e <UART_SetConfig+0x2fe>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ee:	e10e      	b.n	800690e <UART_SetConfig+0x2fe>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e10a      	b.n	800690e <UART_SetConfig+0x2fe>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e106      	b.n	800690e <UART_SetConfig+0x2fe>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7c      	ldr	r2, [pc, #496]	@ (80068f8 <UART_SetConfig+0x2e8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d138      	bne.n	800677c <UART_SetConfig+0x16c>
 800670a:	4b7a      	ldr	r3, [pc, #488]	@ (80068f4 <UART_SetConfig+0x2e4>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006710:	f003 030c 	and.w	r3, r3, #12
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d82d      	bhi.n	8006774 <UART_SetConfig+0x164>
 8006718:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <UART_SetConfig+0x110>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006755 	.word	0x08006755
 8006724:	08006775 	.word	0x08006775
 8006728:	08006775 	.word	0x08006775
 800672c:	08006775 	.word	0x08006775
 8006730:	08006765 	.word	0x08006765
 8006734:	08006775 	.word	0x08006775
 8006738:	08006775 	.word	0x08006775
 800673c:	08006775 	.word	0x08006775
 8006740:	0800675d 	.word	0x0800675d
 8006744:	08006775 	.word	0x08006775
 8006748:	08006775 	.word	0x08006775
 800674c:	08006775 	.word	0x08006775
 8006750:	0800676d 	.word	0x0800676d
 8006754:	2300      	movs	r3, #0
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675a:	e0d8      	b.n	800690e <UART_SetConfig+0x2fe>
 800675c:	2302      	movs	r3, #2
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006762:	e0d4      	b.n	800690e <UART_SetConfig+0x2fe>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676a:	e0d0      	b.n	800690e <UART_SetConfig+0x2fe>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006772:	e0cc      	b.n	800690e <UART_SetConfig+0x2fe>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677a:	e0c8      	b.n	800690e <UART_SetConfig+0x2fe>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5e      	ldr	r2, [pc, #376]	@ (80068fc <UART_SetConfig+0x2ec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d125      	bne.n	80067d2 <UART_SetConfig+0x1c2>
 8006786:	4b5b      	ldr	r3, [pc, #364]	@ (80068f4 <UART_SetConfig+0x2e4>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006790:	2b30      	cmp	r3, #48	@ 0x30
 8006792:	d016      	beq.n	80067c2 <UART_SetConfig+0x1b2>
 8006794:	2b30      	cmp	r3, #48	@ 0x30
 8006796:	d818      	bhi.n	80067ca <UART_SetConfig+0x1ba>
 8006798:	2b20      	cmp	r3, #32
 800679a:	d00a      	beq.n	80067b2 <UART_SetConfig+0x1a2>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d814      	bhi.n	80067ca <UART_SetConfig+0x1ba>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <UART_SetConfig+0x19a>
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d008      	beq.n	80067ba <UART_SetConfig+0x1aa>
 80067a8:	e00f      	b.n	80067ca <UART_SetConfig+0x1ba>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b0:	e0ad      	b.n	800690e <UART_SetConfig+0x2fe>
 80067b2:	2302      	movs	r3, #2
 80067b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b8:	e0a9      	b.n	800690e <UART_SetConfig+0x2fe>
 80067ba:	2304      	movs	r3, #4
 80067bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c0:	e0a5      	b.n	800690e <UART_SetConfig+0x2fe>
 80067c2:	2308      	movs	r3, #8
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c8:	e0a1      	b.n	800690e <UART_SetConfig+0x2fe>
 80067ca:	2310      	movs	r3, #16
 80067cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d0:	e09d      	b.n	800690e <UART_SetConfig+0x2fe>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006900 <UART_SetConfig+0x2f0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d125      	bne.n	8006828 <UART_SetConfig+0x218>
 80067dc:	4b45      	ldr	r3, [pc, #276]	@ (80068f4 <UART_SetConfig+0x2e4>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80067e8:	d016      	beq.n	8006818 <UART_SetConfig+0x208>
 80067ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80067ec:	d818      	bhi.n	8006820 <UART_SetConfig+0x210>
 80067ee:	2b80      	cmp	r3, #128	@ 0x80
 80067f0:	d00a      	beq.n	8006808 <UART_SetConfig+0x1f8>
 80067f2:	2b80      	cmp	r3, #128	@ 0x80
 80067f4:	d814      	bhi.n	8006820 <UART_SetConfig+0x210>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <UART_SetConfig+0x1f0>
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d008      	beq.n	8006810 <UART_SetConfig+0x200>
 80067fe:	e00f      	b.n	8006820 <UART_SetConfig+0x210>
 8006800:	2300      	movs	r3, #0
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006806:	e082      	b.n	800690e <UART_SetConfig+0x2fe>
 8006808:	2302      	movs	r3, #2
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680e:	e07e      	b.n	800690e <UART_SetConfig+0x2fe>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006816:	e07a      	b.n	800690e <UART_SetConfig+0x2fe>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681e:	e076      	b.n	800690e <UART_SetConfig+0x2fe>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006826:	e072      	b.n	800690e <UART_SetConfig+0x2fe>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a35      	ldr	r2, [pc, #212]	@ (8006904 <UART_SetConfig+0x2f4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d12a      	bne.n	8006888 <UART_SetConfig+0x278>
 8006832:	4b30      	ldr	r3, [pc, #192]	@ (80068f4 <UART_SetConfig+0x2e4>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800683c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006840:	d01a      	beq.n	8006878 <UART_SetConfig+0x268>
 8006842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006846:	d81b      	bhi.n	8006880 <UART_SetConfig+0x270>
 8006848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800684c:	d00c      	beq.n	8006868 <UART_SetConfig+0x258>
 800684e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006852:	d815      	bhi.n	8006880 <UART_SetConfig+0x270>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <UART_SetConfig+0x250>
 8006858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685c:	d008      	beq.n	8006870 <UART_SetConfig+0x260>
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x270>
 8006860:	2300      	movs	r3, #0
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006866:	e052      	b.n	800690e <UART_SetConfig+0x2fe>
 8006868:	2302      	movs	r3, #2
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686e:	e04e      	b.n	800690e <UART_SetConfig+0x2fe>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006876:	e04a      	b.n	800690e <UART_SetConfig+0x2fe>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687e:	e046      	b.n	800690e <UART_SetConfig+0x2fe>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006886:	e042      	b.n	800690e <UART_SetConfig+0x2fe>
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a17      	ldr	r2, [pc, #92]	@ (80068ec <UART_SetConfig+0x2dc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d13a      	bne.n	8006908 <UART_SetConfig+0x2f8>
 8006892:	4b18      	ldr	r3, [pc, #96]	@ (80068f4 <UART_SetConfig+0x2e4>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800689c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a0:	d01a      	beq.n	80068d8 <UART_SetConfig+0x2c8>
 80068a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a6:	d81b      	bhi.n	80068e0 <UART_SetConfig+0x2d0>
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ac:	d00c      	beq.n	80068c8 <UART_SetConfig+0x2b8>
 80068ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b2:	d815      	bhi.n	80068e0 <UART_SetConfig+0x2d0>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <UART_SetConfig+0x2b0>
 80068b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068bc:	d008      	beq.n	80068d0 <UART_SetConfig+0x2c0>
 80068be:	e00f      	b.n	80068e0 <UART_SetConfig+0x2d0>
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c6:	e022      	b.n	800690e <UART_SetConfig+0x2fe>
 80068c8:	2302      	movs	r3, #2
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ce:	e01e      	b.n	800690e <UART_SetConfig+0x2fe>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d6:	e01a      	b.n	800690e <UART_SetConfig+0x2fe>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e016      	b.n	800690e <UART_SetConfig+0x2fe>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e6:	e012      	b.n	800690e <UART_SetConfig+0x2fe>
 80068e8:	cfff69f3 	.word	0xcfff69f3
 80068ec:	40008000 	.word	0x40008000
 80068f0:	40013800 	.word	0x40013800
 80068f4:	40021000 	.word	0x40021000
 80068f8:	40004400 	.word	0x40004400
 80068fc:	40004800 	.word	0x40004800
 8006900:	40004c00 	.word	0x40004c00
 8006904:	40005000 	.word	0x40005000
 8006908:	2310      	movs	r3, #16
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4aae      	ldr	r2, [pc, #696]	@ (8006bcc <UART_SetConfig+0x5bc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	f040 8097 	bne.w	8006a48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800691a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800691e:	2b08      	cmp	r3, #8
 8006920:	d823      	bhi.n	800696a <UART_SetConfig+0x35a>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <UART_SetConfig+0x318>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	0800694d 	.word	0x0800694d
 800692c:	0800696b 	.word	0x0800696b
 8006930:	08006955 	.word	0x08006955
 8006934:	0800696b 	.word	0x0800696b
 8006938:	0800695b 	.word	0x0800695b
 800693c:	0800696b 	.word	0x0800696b
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800696b 	.word	0x0800696b
 8006948:	08006963 	.word	0x08006963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fd fc8e 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8006950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006952:	e010      	b.n	8006976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006954:	4b9e      	ldr	r3, [pc, #632]	@ (8006bd0 <UART_SetConfig+0x5c0>)
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006958:	e00d      	b.n	8006976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695a:	f7fd fbf1 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 800695e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006960:	e009      	b.n	8006976 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006968:	e005      	b.n	8006976 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8130 	beq.w	8006bde <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	4a94      	ldr	r2, [pc, #592]	@ (8006bd4 <UART_SetConfig+0x5c4>)
 8006984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006988:	461a      	mov	r2, r3
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006990:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	4413      	add	r3, r2
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d305      	bcc.n	80069ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d903      	bls.n	80069b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069b4:	e113      	b.n	8006bde <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	2200      	movs	r2, #0
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	60fa      	str	r2, [r7, #12]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	4a84      	ldr	r2, [pc, #528]	@ (8006bd4 <UART_SetConfig+0x5c4>)
 80069c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2200      	movs	r2, #0
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069d8:	f7fa f94e 	bl	8000c78 <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4610      	mov	r0, r2
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	020b      	lsls	r3, r1, #8
 80069ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069f2:	0202      	lsls	r2, r0, #8
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	6849      	ldr	r1, [r1, #4]
 80069f8:	0849      	lsrs	r1, r1, #1
 80069fa:	2000      	movs	r0, #0
 80069fc:	460c      	mov	r4, r1
 80069fe:	4605      	mov	r5, r0
 8006a00:	eb12 0804 	adds.w	r8, r2, r4
 8006a04:	eb43 0905 	adc.w	r9, r3, r5
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	469a      	mov	sl, r3
 8006a10:	4693      	mov	fp, r2
 8006a12:	4652      	mov	r2, sl
 8006a14:	465b      	mov	r3, fp
 8006a16:	4640      	mov	r0, r8
 8006a18:	4649      	mov	r1, r9
 8006a1a:	f7fa f92d 	bl	8000c78 <__aeabi_uldivmod>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4613      	mov	r3, r2
 8006a24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a2c:	d308      	bcc.n	8006a40 <UART_SetConfig+0x430>
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a34:	d204      	bcs.n	8006a40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	e0ce      	b.n	8006bde <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a46:	e0ca      	b.n	8006bde <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a50:	d166      	bne.n	8006b20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d827      	bhi.n	8006aaa <UART_SetConfig+0x49a>
 8006a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0x450>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	08006aab 	.word	0x08006aab
 8006a70:	08006a9b 	.word	0x08006a9b
 8006a74:	08006aab 	.word	0x08006aab
 8006a78:	08006aab 	.word	0x08006aab
 8006a7c:	08006aab 	.word	0x08006aab
 8006a80:	08006aa3 	.word	0x08006aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a84:	f7fd fbf2 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a8a:	e014      	b.n	8006ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a8c:	f7fd fc04 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a92:	e010      	b.n	8006ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a94:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd0 <UART_SetConfig+0x5c0>)
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a98:	e00d      	b.n	8006ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9a:	f7fd fb51 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8006a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aa0:	e009      	b.n	8006ab6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006aa8:	e005      	b.n	8006ab6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8090 	beq.w	8006bde <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac2:	4a44      	ldr	r2, [pc, #272]	@ (8006bd4 <UART_SetConfig+0x5c4>)
 8006ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ad0:	005a      	lsls	r2, r3, #1
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	441a      	add	r2, r3
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	2b0f      	cmp	r3, #15
 8006ae8:	d916      	bls.n	8006b18 <UART_SetConfig+0x508>
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af0:	d212      	bcs.n	8006b18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f023 030f 	bic.w	r3, r3, #15
 8006afa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	8bfb      	ldrh	r3, [r7, #30]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	8bfa      	ldrh	r2, [r7, #30]
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	e062      	b.n	8006bde <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b1e:	e05e      	b.n	8006bde <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d828      	bhi.n	8006b7a <UART_SetConfig+0x56a>
 8006b28:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <UART_SetConfig+0x520>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	08006b7b 	.word	0x08006b7b
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b7b 	.word	0x08006b7b
 8006b48:	08006b7b 	.word	0x08006b7b
 8006b4c:	08006b7b 	.word	0x08006b7b
 8006b50:	08006b73 	.word	0x08006b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fd fb8a 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8006b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b5a:	e014      	b.n	8006b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fd fb9c 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b62:	e010      	b.n	8006b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b64:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd0 <UART_SetConfig+0x5c0>)
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b68:	e00d      	b.n	8006b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6a:	f7fd fae9 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8006b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b70:	e009      	b.n	8006b86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b78:	e005      	b.n	8006b86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b84:	bf00      	nop
    }

    if (pclk != 0U)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d028      	beq.n	8006bde <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	4a10      	ldr	r2, [pc, #64]	@ (8006bd4 <UART_SetConfig+0x5c4>)
 8006b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b96:	461a      	mov	r2, r3
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	441a      	add	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d910      	bls.n	8006bd8 <UART_SetConfig+0x5c8>
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bbc:	d20c      	bcs.n	8006bd8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60da      	str	r2, [r3, #12]
 8006bc8:	e009      	b.n	8006bde <UART_SetConfig+0x5ce>
 8006bca:	bf00      	nop
 8006bcc:	40008000 	.word	0x40008000
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	0800a248 	.word	0x0800a248
      }
      else
      {
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bfa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3730      	adds	r7, #48	@ 0x30
 8006c02:	46bd      	mov	sp, r7
 8006c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d06:	d10a      	bne.n	8006d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b098      	sub	sp, #96	@ 0x60
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d5c:	f7fb fae4 	bl	8002328 <HAL_GetTick>
 8006d60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d12f      	bne.n	8006dd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f88e 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d022      	beq.n	8006dd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006daa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e6      	bne.n	8006d8a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e063      	b.n	8006e98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d149      	bne.n	8006e72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de6:	2200      	movs	r2, #0
 8006de8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f857 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d03c      	beq.n	8006e72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	623b      	str	r3, [r7, #32]
   return(result);
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e6      	bne.n	8006df8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e4a:	61fa      	str	r2, [r7, #28]
 8006e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	69b9      	ldr	r1, [r7, #24]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	617b      	str	r3, [r7, #20]
   return(result);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e5      	bne.n	8006e2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e012      	b.n	8006e98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3758      	adds	r7, #88	@ 0x58
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb0:	e04f      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d04b      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fb fa35 	bl	8002328 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e04e      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d037      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b80      	cmp	r3, #128	@ 0x80
 8006ee6:	d034      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d031      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d110      	bne.n	8006f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2208      	movs	r2, #8
 8006f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f838 	bl	8006f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e029      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2c:	d111      	bne.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 f81e 	bl	8006f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e00f      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d0a0      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b095      	sub	sp, #84	@ 0x54
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e3      	bne.n	8006fb4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d118      	bne.n	8007026 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	60bb      	str	r3, [r7, #8]
   return(result);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f023 0310 	bic.w	r3, r3, #16
 8007008:	647b      	str	r3, [r7, #68]	@ 0x44
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6979      	ldr	r1, [r7, #20]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	613b      	str	r3, [r7, #16]
   return(result);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e6      	bne.n	8006ff4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800703a:	bf00      	nop
 800703c:	3754      	adds	r7, #84	@ 0x54
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_UARTEx_DisableFifoMode+0x16>
 8007058:	2302      	movs	r3, #2
 800705a:	e027      	b.n	80070ac <HAL_UARTEx_DisableFifoMode+0x66>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2224      	movs	r2, #36	@ 0x24
 8007068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0201 	bic.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800708a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e02d      	b.n	800712c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	@ 0x24
 80070dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f84f 	bl	80071b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007148:	2302      	movs	r3, #2
 800714a:	e02d      	b.n	80071a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	@ 0x24
 8007158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f811 	bl	80071b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d108      	bne.n	80071d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071d0:	e031      	b.n	8007236 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071d2:	2308      	movs	r3, #8
 80071d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071d6:	2308      	movs	r3, #8
 80071d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	0e5b      	lsrs	r3, r3, #25
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	0f5b      	lsrs	r3, r3, #29
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	7b3a      	ldrb	r2, [r7, #12]
 80071fe:	4911      	ldr	r1, [pc, #68]	@ (8007244 <UARTEx_SetNbDataToProcess+0x94>)
 8007200:	5c8a      	ldrb	r2, [r1, r2]
 8007202:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007206:	7b3a      	ldrb	r2, [r7, #12]
 8007208:	490f      	ldr	r1, [pc, #60]	@ (8007248 <UARTEx_SetNbDataToProcess+0x98>)
 800720a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800720c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	7b7a      	ldrb	r2, [r7, #13]
 800721c:	4909      	ldr	r1, [pc, #36]	@ (8007244 <UARTEx_SetNbDataToProcess+0x94>)
 800721e:	5c8a      	ldrb	r2, [r1, r2]
 8007220:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007224:	7b7a      	ldrb	r2, [r7, #13]
 8007226:	4908      	ldr	r1, [pc, #32]	@ (8007248 <UARTEx_SetNbDataToProcess+0x98>)
 8007228:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800722a:	fb93 f3f2 	sdiv	r3, r3, r2
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	0800a260 	.word	0x0800a260
 8007248:	0800a268 	.word	0x0800a268

0800724c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	f023 0101 	bic.w	r1, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b08      	cmp	r3, #8
 8007274:	d102      	bne.n	800727c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007276:	2340      	movs	r3, #64	@ 0x40
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e001      	b.n	8007280 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800728c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007292:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007298:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800729e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80072a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80072aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80072b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 80072b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 80072bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80072ee:	4b23      	ldr	r3, [pc, #140]	@ (800737c <FMC_NORSRAM_Init+0x130>)
 80072f0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072f8:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007300:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8007308:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007310:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	43db      	mvns	r3, r3
 8007320:	ea02 0103 	and.w	r1, r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	4319      	orrs	r1, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800733a:	d10c      	bne.n	8007356 <FMC_NORSRAM_Init+0x10a>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d006      	beq.n	800736c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	0008fb7f 	.word	0x0008fb7f

08007380 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8007396:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800739e:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80073a6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80073ae:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80073b8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	3b02      	subs	r3, #2
 80073c0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80073c2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80073ce:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073e2:	d113      	bne.n	800740c <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073ec:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	051b      	lsls	r3, r3, #20
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	431a      	orrs	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800742e:	d121      	bne.n	8007474 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	4319      	orrs	r1, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	4319      	orrs	r1, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	079b      	lsls	r3, r3, #30
 8007456:	4319      	orrs	r1, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	4319      	orrs	r1, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	430b      	orrs	r3, r1
 8007466:	ea42 0103 	orr.w	r1, r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007472:	e005      	b.n	8007480 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800747c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <__cvt>:
 800748e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007492:	ec57 6b10 	vmov	r6, r7, d0
 8007496:	2f00      	cmp	r7, #0
 8007498:	460c      	mov	r4, r1
 800749a:	4619      	mov	r1, r3
 800749c:	463b      	mov	r3, r7
 800749e:	bfbb      	ittet	lt
 80074a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074a4:	461f      	movlt	r7, r3
 80074a6:	2300      	movge	r3, #0
 80074a8:	232d      	movlt	r3, #45	@ 0x2d
 80074aa:	700b      	strb	r3, [r1, #0]
 80074ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074b2:	4691      	mov	r9, r2
 80074b4:	f023 0820 	bic.w	r8, r3, #32
 80074b8:	bfbc      	itt	lt
 80074ba:	4632      	movlt	r2, r6
 80074bc:	4616      	movlt	r6, r2
 80074be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074c2:	d005      	beq.n	80074d0 <__cvt+0x42>
 80074c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074c8:	d100      	bne.n	80074cc <__cvt+0x3e>
 80074ca:	3401      	adds	r4, #1
 80074cc:	2102      	movs	r1, #2
 80074ce:	e000      	b.n	80074d2 <__cvt+0x44>
 80074d0:	2103      	movs	r1, #3
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	ab02      	add	r3, sp, #8
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	ec47 6b10 	vmov	d0, r6, r7
 80074de:	4653      	mov	r3, sl
 80074e0:	4622      	mov	r2, r4
 80074e2:	f000 fe59 	bl	8008198 <_dtoa_r>
 80074e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074ea:	4605      	mov	r5, r0
 80074ec:	d119      	bne.n	8007522 <__cvt+0x94>
 80074ee:	f019 0f01 	tst.w	r9, #1
 80074f2:	d00e      	beq.n	8007512 <__cvt+0x84>
 80074f4:	eb00 0904 	add.w	r9, r0, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	2300      	movs	r3, #0
 80074fc:	4630      	mov	r0, r6
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f9 fafa 	bl	8000af8 <__aeabi_dcmpeq>
 8007504:	b108      	cbz	r0, 800750a <__cvt+0x7c>
 8007506:	f8cd 900c 	str.w	r9, [sp, #12]
 800750a:	2230      	movs	r2, #48	@ 0x30
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	454b      	cmp	r3, r9
 8007510:	d31e      	bcc.n	8007550 <__cvt+0xc2>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007516:	1b5b      	subs	r3, r3, r5
 8007518:	4628      	mov	r0, r5
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	b004      	add	sp, #16
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007526:	eb00 0904 	add.w	r9, r0, r4
 800752a:	d1e5      	bne.n	80074f8 <__cvt+0x6a>
 800752c:	7803      	ldrb	r3, [r0, #0]
 800752e:	2b30      	cmp	r3, #48	@ 0x30
 8007530:	d10a      	bne.n	8007548 <__cvt+0xba>
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 fadd 	bl	8000af8 <__aeabi_dcmpeq>
 800753e:	b918      	cbnz	r0, 8007548 <__cvt+0xba>
 8007540:	f1c4 0401 	rsb	r4, r4, #1
 8007544:	f8ca 4000 	str.w	r4, [sl]
 8007548:	f8da 3000 	ldr.w	r3, [sl]
 800754c:	4499      	add	r9, r3
 800754e:	e7d3      	b.n	80074f8 <__cvt+0x6a>
 8007550:	1c59      	adds	r1, r3, #1
 8007552:	9103      	str	r1, [sp, #12]
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	e7d9      	b.n	800750c <__cvt+0x7e>

08007558 <__exponent>:
 8007558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800755a:	2900      	cmp	r1, #0
 800755c:	bfba      	itte	lt
 800755e:	4249      	neglt	r1, r1
 8007560:	232d      	movlt	r3, #45	@ 0x2d
 8007562:	232b      	movge	r3, #43	@ 0x2b
 8007564:	2909      	cmp	r1, #9
 8007566:	7002      	strb	r2, [r0, #0]
 8007568:	7043      	strb	r3, [r0, #1]
 800756a:	dd29      	ble.n	80075c0 <__exponent+0x68>
 800756c:	f10d 0307 	add.w	r3, sp, #7
 8007570:	461d      	mov	r5, r3
 8007572:	270a      	movs	r7, #10
 8007574:	461a      	mov	r2, r3
 8007576:	fbb1 f6f7 	udiv	r6, r1, r7
 800757a:	fb07 1416 	mls	r4, r7, r6, r1
 800757e:	3430      	adds	r4, #48	@ 0x30
 8007580:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007584:	460c      	mov	r4, r1
 8007586:	2c63      	cmp	r4, #99	@ 0x63
 8007588:	f103 33ff 	add.w	r3, r3, #4294967295
 800758c:	4631      	mov	r1, r6
 800758e:	dcf1      	bgt.n	8007574 <__exponent+0x1c>
 8007590:	3130      	adds	r1, #48	@ 0x30
 8007592:	1e94      	subs	r4, r2, #2
 8007594:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007598:	1c41      	adds	r1, r0, #1
 800759a:	4623      	mov	r3, r4
 800759c:	42ab      	cmp	r3, r5
 800759e:	d30a      	bcc.n	80075b6 <__exponent+0x5e>
 80075a0:	f10d 0309 	add.w	r3, sp, #9
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	42ac      	cmp	r4, r5
 80075a8:	bf88      	it	hi
 80075aa:	2300      	movhi	r3, #0
 80075ac:	3302      	adds	r3, #2
 80075ae:	4403      	add	r3, r0
 80075b0:	1a18      	subs	r0, r3, r0
 80075b2:	b003      	add	sp, #12
 80075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075be:	e7ed      	b.n	800759c <__exponent+0x44>
 80075c0:	2330      	movs	r3, #48	@ 0x30
 80075c2:	3130      	adds	r1, #48	@ 0x30
 80075c4:	7083      	strb	r3, [r0, #2]
 80075c6:	70c1      	strb	r1, [r0, #3]
 80075c8:	1d03      	adds	r3, r0, #4
 80075ca:	e7f1      	b.n	80075b0 <__exponent+0x58>

080075cc <_printf_float>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	b08d      	sub	sp, #52	@ 0x34
 80075d2:	460c      	mov	r4, r1
 80075d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075d8:	4616      	mov	r6, r2
 80075da:	461f      	mov	r7, r3
 80075dc:	4605      	mov	r5, r0
 80075de:	f000 fcdb 	bl	8007f98 <_localeconv_r>
 80075e2:	6803      	ldr	r3, [r0, #0]
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f8 fe5a 	bl	80002a0 <strlen>
 80075ec:	2300      	movs	r3, #0
 80075ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80075f0:	f8d8 3000 	ldr.w	r3, [r8]
 80075f4:	9005      	str	r0, [sp, #20]
 80075f6:	3307      	adds	r3, #7
 80075f8:	f023 0307 	bic.w	r3, r3, #7
 80075fc:	f103 0208 	add.w	r2, r3, #8
 8007600:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007604:	f8d4 b000 	ldr.w	fp, [r4]
 8007608:	f8c8 2000 	str.w	r2, [r8]
 800760c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007610:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007614:	9307      	str	r3, [sp, #28]
 8007616:	f8cd 8018 	str.w	r8, [sp, #24]
 800761a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800761e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007622:	4b9c      	ldr	r3, [pc, #624]	@ (8007894 <_printf_float+0x2c8>)
 8007624:	f04f 32ff 	mov.w	r2, #4294967295
 8007628:	f7f9 fa98 	bl	8000b5c <__aeabi_dcmpun>
 800762c:	bb70      	cbnz	r0, 800768c <_printf_float+0xc0>
 800762e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007632:	4b98      	ldr	r3, [pc, #608]	@ (8007894 <_printf_float+0x2c8>)
 8007634:	f04f 32ff 	mov.w	r2, #4294967295
 8007638:	f7f9 fa72 	bl	8000b20 <__aeabi_dcmple>
 800763c:	bb30      	cbnz	r0, 800768c <_printf_float+0xc0>
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f9 fa61 	bl	8000b0c <__aeabi_dcmplt>
 800764a:	b110      	cbz	r0, 8007652 <_printf_float+0x86>
 800764c:	232d      	movs	r3, #45	@ 0x2d
 800764e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007652:	4a91      	ldr	r2, [pc, #580]	@ (8007898 <_printf_float+0x2cc>)
 8007654:	4b91      	ldr	r3, [pc, #580]	@ (800789c <_printf_float+0x2d0>)
 8007656:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800765a:	bf8c      	ite	hi
 800765c:	4690      	movhi	r8, r2
 800765e:	4698      	movls	r8, r3
 8007660:	2303      	movs	r3, #3
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	f02b 0304 	bic.w	r3, fp, #4
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	f04f 0900 	mov.w	r9, #0
 800766e:	9700      	str	r7, [sp, #0]
 8007670:	4633      	mov	r3, r6
 8007672:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007674:	4621      	mov	r1, r4
 8007676:	4628      	mov	r0, r5
 8007678:	f000 f9d2 	bl	8007a20 <_printf_common>
 800767c:	3001      	adds	r0, #1
 800767e:	f040 808d 	bne.w	800779c <_printf_float+0x1d0>
 8007682:	f04f 30ff 	mov.w	r0, #4294967295
 8007686:	b00d      	add	sp, #52	@ 0x34
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	f7f9 fa62 	bl	8000b5c <__aeabi_dcmpun>
 8007698:	b140      	cbz	r0, 80076ac <_printf_float+0xe0>
 800769a:	464b      	mov	r3, r9
 800769c:	2b00      	cmp	r3, #0
 800769e:	bfbc      	itt	lt
 80076a0:	232d      	movlt	r3, #45	@ 0x2d
 80076a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076a6:	4a7e      	ldr	r2, [pc, #504]	@ (80078a0 <_printf_float+0x2d4>)
 80076a8:	4b7e      	ldr	r3, [pc, #504]	@ (80078a4 <_printf_float+0x2d8>)
 80076aa:	e7d4      	b.n	8007656 <_printf_float+0x8a>
 80076ac:	6863      	ldr	r3, [r4, #4]
 80076ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076b2:	9206      	str	r2, [sp, #24]
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	d13b      	bne.n	8007730 <_printf_float+0x164>
 80076b8:	2306      	movs	r3, #6
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076c0:	2300      	movs	r3, #0
 80076c2:	6022      	str	r2, [r4, #0]
 80076c4:	9303      	str	r3, [sp, #12]
 80076c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80076c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076cc:	ab09      	add	r3, sp, #36	@ 0x24
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	6861      	ldr	r1, [r4, #4]
 80076d2:	ec49 8b10 	vmov	d0, r8, r9
 80076d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076da:	4628      	mov	r0, r5
 80076dc:	f7ff fed7 	bl	800748e <__cvt>
 80076e0:	9b06      	ldr	r3, [sp, #24]
 80076e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076e4:	2b47      	cmp	r3, #71	@ 0x47
 80076e6:	4680      	mov	r8, r0
 80076e8:	d129      	bne.n	800773e <_printf_float+0x172>
 80076ea:	1cc8      	adds	r0, r1, #3
 80076ec:	db02      	blt.n	80076f4 <_printf_float+0x128>
 80076ee:	6863      	ldr	r3, [r4, #4]
 80076f0:	4299      	cmp	r1, r3
 80076f2:	dd41      	ble.n	8007778 <_printf_float+0x1ac>
 80076f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80076f8:	fa5f fa8a 	uxtb.w	sl, sl
 80076fc:	3901      	subs	r1, #1
 80076fe:	4652      	mov	r2, sl
 8007700:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007704:	9109      	str	r1, [sp, #36]	@ 0x24
 8007706:	f7ff ff27 	bl	8007558 <__exponent>
 800770a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800770c:	1813      	adds	r3, r2, r0
 800770e:	2a01      	cmp	r2, #1
 8007710:	4681      	mov	r9, r0
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	dc02      	bgt.n	800771c <_printf_float+0x150>
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	07d2      	lsls	r2, r2, #31
 800771a:	d501      	bpl.n	8007720 <_printf_float+0x154>
 800771c:	3301      	adds	r3, #1
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0a2      	beq.n	800766e <_printf_float+0xa2>
 8007728:	232d      	movs	r3, #45	@ 0x2d
 800772a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800772e:	e79e      	b.n	800766e <_printf_float+0xa2>
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2a47      	cmp	r2, #71	@ 0x47
 8007734:	d1c2      	bne.n	80076bc <_printf_float+0xf0>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1c0      	bne.n	80076bc <_printf_float+0xf0>
 800773a:	2301      	movs	r3, #1
 800773c:	e7bd      	b.n	80076ba <_printf_float+0xee>
 800773e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007742:	d9db      	bls.n	80076fc <_printf_float+0x130>
 8007744:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007748:	d118      	bne.n	800777c <_printf_float+0x1b0>
 800774a:	2900      	cmp	r1, #0
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	dd0b      	ble.n	8007768 <_printf_float+0x19c>
 8007750:	6121      	str	r1, [r4, #16]
 8007752:	b913      	cbnz	r3, 800775a <_printf_float+0x18e>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	07d0      	lsls	r0, r2, #31
 8007758:	d502      	bpl.n	8007760 <_printf_float+0x194>
 800775a:	3301      	adds	r3, #1
 800775c:	440b      	add	r3, r1
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007762:	f04f 0900 	mov.w	r9, #0
 8007766:	e7db      	b.n	8007720 <_printf_float+0x154>
 8007768:	b913      	cbnz	r3, 8007770 <_printf_float+0x1a4>
 800776a:	6822      	ldr	r2, [r4, #0]
 800776c:	07d2      	lsls	r2, r2, #31
 800776e:	d501      	bpl.n	8007774 <_printf_float+0x1a8>
 8007770:	3302      	adds	r3, #2
 8007772:	e7f4      	b.n	800775e <_printf_float+0x192>
 8007774:	2301      	movs	r3, #1
 8007776:	e7f2      	b.n	800775e <_printf_float+0x192>
 8007778:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800777c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800777e:	4299      	cmp	r1, r3
 8007780:	db05      	blt.n	800778e <_printf_float+0x1c2>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	6121      	str	r1, [r4, #16]
 8007786:	07d8      	lsls	r0, r3, #31
 8007788:	d5ea      	bpl.n	8007760 <_printf_float+0x194>
 800778a:	1c4b      	adds	r3, r1, #1
 800778c:	e7e7      	b.n	800775e <_printf_float+0x192>
 800778e:	2900      	cmp	r1, #0
 8007790:	bfd4      	ite	le
 8007792:	f1c1 0202 	rsble	r2, r1, #2
 8007796:	2201      	movgt	r2, #1
 8007798:	4413      	add	r3, r2
 800779a:	e7e0      	b.n	800775e <_printf_float+0x192>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	055a      	lsls	r2, r3, #21
 80077a0:	d407      	bmi.n	80077b2 <_printf_float+0x1e6>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	4642      	mov	r2, r8
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	d12b      	bne.n	8007808 <_printf_float+0x23c>
 80077b0:	e767      	b.n	8007682 <_printf_float+0xb6>
 80077b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077b6:	f240 80dd 	bls.w	8007974 <_printf_float+0x3a8>
 80077ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077be:	2200      	movs	r2, #0
 80077c0:	2300      	movs	r3, #0
 80077c2:	f7f9 f999 	bl	8000af8 <__aeabi_dcmpeq>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d033      	beq.n	8007832 <_printf_float+0x266>
 80077ca:	4a37      	ldr	r2, [pc, #220]	@ (80078a8 <_printf_float+0x2dc>)
 80077cc:	2301      	movs	r3, #1
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f af54 	beq.w	8007682 <_printf_float+0xb6>
 80077da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077de:	4543      	cmp	r3, r8
 80077e0:	db02      	blt.n	80077e8 <_printf_float+0x21c>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	07d8      	lsls	r0, r3, #31
 80077e6:	d50f      	bpl.n	8007808 <_printf_float+0x23c>
 80077e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	47b8      	blx	r7
 80077f2:	3001      	adds	r0, #1
 80077f4:	f43f af45 	beq.w	8007682 <_printf_float+0xb6>
 80077f8:	f04f 0900 	mov.w	r9, #0
 80077fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007800:	f104 0a1a 	add.w	sl, r4, #26
 8007804:	45c8      	cmp	r8, r9
 8007806:	dc09      	bgt.n	800781c <_printf_float+0x250>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	f100 8103 	bmi.w	8007a16 <_printf_float+0x44a>
 8007810:	68e0      	ldr	r0, [r4, #12]
 8007812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007814:	4298      	cmp	r0, r3
 8007816:	bfb8      	it	lt
 8007818:	4618      	movlt	r0, r3
 800781a:	e734      	b.n	8007686 <_printf_float+0xba>
 800781c:	2301      	movs	r3, #1
 800781e:	4652      	mov	r2, sl
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f af2b 	beq.w	8007682 <_printf_float+0xb6>
 800782c:	f109 0901 	add.w	r9, r9, #1
 8007830:	e7e8      	b.n	8007804 <_printf_float+0x238>
 8007832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	dc39      	bgt.n	80078ac <_printf_float+0x2e0>
 8007838:	4a1b      	ldr	r2, [pc, #108]	@ (80078a8 <_printf_float+0x2dc>)
 800783a:	2301      	movs	r3, #1
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	f43f af1d 	beq.w	8007682 <_printf_float+0xb6>
 8007848:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800784c:	ea59 0303 	orrs.w	r3, r9, r3
 8007850:	d102      	bne.n	8007858 <_printf_float+0x28c>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	07d9      	lsls	r1, r3, #31
 8007856:	d5d7      	bpl.n	8007808 <_printf_float+0x23c>
 8007858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af0d 	beq.w	8007682 <_printf_float+0xb6>
 8007868:	f04f 0a00 	mov.w	sl, #0
 800786c:	f104 0b1a 	add.w	fp, r4, #26
 8007870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007872:	425b      	negs	r3, r3
 8007874:	4553      	cmp	r3, sl
 8007876:	dc01      	bgt.n	800787c <_printf_float+0x2b0>
 8007878:	464b      	mov	r3, r9
 800787a:	e793      	b.n	80077a4 <_printf_float+0x1d8>
 800787c:	2301      	movs	r3, #1
 800787e:	465a      	mov	r2, fp
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f aefb 	beq.w	8007682 <_printf_float+0xb6>
 800788c:	f10a 0a01 	add.w	sl, sl, #1
 8007890:	e7ee      	b.n	8007870 <_printf_float+0x2a4>
 8007892:	bf00      	nop
 8007894:	7fefffff 	.word	0x7fefffff
 8007898:	0800a274 	.word	0x0800a274
 800789c:	0800a270 	.word	0x0800a270
 80078a0:	0800a27c 	.word	0x0800a27c
 80078a4:	0800a278 	.word	0x0800a278
 80078a8:	0800a280 	.word	0x0800a280
 80078ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078b2:	4553      	cmp	r3, sl
 80078b4:	bfa8      	it	ge
 80078b6:	4653      	movge	r3, sl
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	4699      	mov	r9, r3
 80078bc:	dc36      	bgt.n	800792c <_printf_float+0x360>
 80078be:	f04f 0b00 	mov.w	fp, #0
 80078c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078c6:	f104 021a 	add.w	r2, r4, #26
 80078ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078cc:	9306      	str	r3, [sp, #24]
 80078ce:	eba3 0309 	sub.w	r3, r3, r9
 80078d2:	455b      	cmp	r3, fp
 80078d4:	dc31      	bgt.n	800793a <_printf_float+0x36e>
 80078d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d8:	459a      	cmp	sl, r3
 80078da:	dc3a      	bgt.n	8007952 <_printf_float+0x386>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	07da      	lsls	r2, r3, #31
 80078e0:	d437      	bmi.n	8007952 <_printf_float+0x386>
 80078e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e4:	ebaa 0903 	sub.w	r9, sl, r3
 80078e8:	9b06      	ldr	r3, [sp, #24]
 80078ea:	ebaa 0303 	sub.w	r3, sl, r3
 80078ee:	4599      	cmp	r9, r3
 80078f0:	bfa8      	it	ge
 80078f2:	4699      	movge	r9, r3
 80078f4:	f1b9 0f00 	cmp.w	r9, #0
 80078f8:	dc33      	bgt.n	8007962 <_printf_float+0x396>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007902:	f104 0b1a 	add.w	fp, r4, #26
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	ebaa 0303 	sub.w	r3, sl, r3
 800790c:	eba3 0309 	sub.w	r3, r3, r9
 8007910:	4543      	cmp	r3, r8
 8007912:	f77f af79 	ble.w	8007808 <_printf_float+0x23c>
 8007916:	2301      	movs	r3, #1
 8007918:	465a      	mov	r2, fp
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	f43f aeae 	beq.w	8007682 <_printf_float+0xb6>
 8007926:	f108 0801 	add.w	r8, r8, #1
 800792a:	e7ec      	b.n	8007906 <_printf_float+0x33a>
 800792c:	4642      	mov	r2, r8
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d1c2      	bne.n	80078be <_printf_float+0x2f2>
 8007938:	e6a3      	b.n	8007682 <_printf_float+0xb6>
 800793a:	2301      	movs	r3, #1
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	9206      	str	r2, [sp, #24]
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae9c 	beq.w	8007682 <_printf_float+0xb6>
 800794a:	9a06      	ldr	r2, [sp, #24]
 800794c:	f10b 0b01 	add.w	fp, fp, #1
 8007950:	e7bb      	b.n	80078ca <_printf_float+0x2fe>
 8007952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	d1c0      	bne.n	80078e2 <_printf_float+0x316>
 8007960:	e68f      	b.n	8007682 <_printf_float+0xb6>
 8007962:	9a06      	ldr	r2, [sp, #24]
 8007964:	464b      	mov	r3, r9
 8007966:	4442      	add	r2, r8
 8007968:	4631      	mov	r1, r6
 800796a:	4628      	mov	r0, r5
 800796c:	47b8      	blx	r7
 800796e:	3001      	adds	r0, #1
 8007970:	d1c3      	bne.n	80078fa <_printf_float+0x32e>
 8007972:	e686      	b.n	8007682 <_printf_float+0xb6>
 8007974:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007978:	f1ba 0f01 	cmp.w	sl, #1
 800797c:	dc01      	bgt.n	8007982 <_printf_float+0x3b6>
 800797e:	07db      	lsls	r3, r3, #31
 8007980:	d536      	bpl.n	80079f0 <_printf_float+0x424>
 8007982:	2301      	movs	r3, #1
 8007984:	4642      	mov	r2, r8
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	f43f ae78 	beq.w	8007682 <_printf_float+0xb6>
 8007992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	f43f ae70 	beq.w	8007682 <_printf_float+0xb6>
 80079a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ae:	f7f9 f8a3 	bl	8000af8 <__aeabi_dcmpeq>
 80079b2:	b9c0      	cbnz	r0, 80079e6 <_printf_float+0x41a>
 80079b4:	4653      	mov	r3, sl
 80079b6:	f108 0201 	add.w	r2, r8, #1
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	d10c      	bne.n	80079de <_printf_float+0x412>
 80079c4:	e65d      	b.n	8007682 <_printf_float+0xb6>
 80079c6:	2301      	movs	r3, #1
 80079c8:	465a      	mov	r2, fp
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	f43f ae56 	beq.w	8007682 <_printf_float+0xb6>
 80079d6:	f108 0801 	add.w	r8, r8, #1
 80079da:	45d0      	cmp	r8, sl
 80079dc:	dbf3      	blt.n	80079c6 <_printf_float+0x3fa>
 80079de:	464b      	mov	r3, r9
 80079e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079e4:	e6df      	b.n	80077a6 <_printf_float+0x1da>
 80079e6:	f04f 0800 	mov.w	r8, #0
 80079ea:	f104 0b1a 	add.w	fp, r4, #26
 80079ee:	e7f4      	b.n	80079da <_printf_float+0x40e>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4642      	mov	r2, r8
 80079f4:	e7e1      	b.n	80079ba <_printf_float+0x3ee>
 80079f6:	2301      	movs	r3, #1
 80079f8:	464a      	mov	r2, r9
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae3e 	beq.w	8007682 <_printf_float+0xb6>
 8007a06:	f108 0801 	add.w	r8, r8, #1
 8007a0a:	68e3      	ldr	r3, [r4, #12]
 8007a0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a0e:	1a5b      	subs	r3, r3, r1
 8007a10:	4543      	cmp	r3, r8
 8007a12:	dcf0      	bgt.n	80079f6 <_printf_float+0x42a>
 8007a14:	e6fc      	b.n	8007810 <_printf_float+0x244>
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	f104 0919 	add.w	r9, r4, #25
 8007a1e:	e7f4      	b.n	8007a0a <_printf_float+0x43e>

08007a20 <_printf_common>:
 8007a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	4616      	mov	r6, r2
 8007a26:	4698      	mov	r8, r3
 8007a28:	688a      	ldr	r2, [r1, #8]
 8007a2a:	690b      	ldr	r3, [r1, #16]
 8007a2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a30:	4293      	cmp	r3, r2
 8007a32:	bfb8      	it	lt
 8007a34:	4613      	movlt	r3, r2
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	b10a      	cbz	r2, 8007a46 <_printf_common+0x26>
 8007a42:	3301      	adds	r3, #1
 8007a44:	6033      	str	r3, [r6, #0]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	0699      	lsls	r1, r3, #26
 8007a4a:	bf42      	ittt	mi
 8007a4c:	6833      	ldrmi	r3, [r6, #0]
 8007a4e:	3302      	addmi	r3, #2
 8007a50:	6033      	strmi	r3, [r6, #0]
 8007a52:	6825      	ldr	r5, [r4, #0]
 8007a54:	f015 0506 	ands.w	r5, r5, #6
 8007a58:	d106      	bne.n	8007a68 <_printf_common+0x48>
 8007a5a:	f104 0a19 	add.w	sl, r4, #25
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	6832      	ldr	r2, [r6, #0]
 8007a62:	1a9b      	subs	r3, r3, r2
 8007a64:	42ab      	cmp	r3, r5
 8007a66:	dc26      	bgt.n	8007ab6 <_printf_common+0x96>
 8007a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	3b00      	subs	r3, #0
 8007a70:	bf18      	it	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	0692      	lsls	r2, r2, #26
 8007a76:	d42b      	bmi.n	8007ad0 <_printf_common+0xb0>
 8007a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	4638      	mov	r0, r7
 8007a80:	47c8      	blx	r9
 8007a82:	3001      	adds	r0, #1
 8007a84:	d01e      	beq.n	8007ac4 <_printf_common+0xa4>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	6922      	ldr	r2, [r4, #16]
 8007a8a:	f003 0306 	and.w	r3, r3, #6
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	bf02      	ittt	eq
 8007a92:	68e5      	ldreq	r5, [r4, #12]
 8007a94:	6833      	ldreq	r3, [r6, #0]
 8007a96:	1aed      	subeq	r5, r5, r3
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	bf0c      	ite	eq
 8007a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa0:	2500      	movne	r5, #0
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	bfc4      	itt	gt
 8007aa6:	1a9b      	subgt	r3, r3, r2
 8007aa8:	18ed      	addgt	r5, r5, r3
 8007aaa:	2600      	movs	r6, #0
 8007aac:	341a      	adds	r4, #26
 8007aae:	42b5      	cmp	r5, r6
 8007ab0:	d11a      	bne.n	8007ae8 <_printf_common+0xc8>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e008      	b.n	8007ac8 <_printf_common+0xa8>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4652      	mov	r2, sl
 8007aba:	4641      	mov	r1, r8
 8007abc:	4638      	mov	r0, r7
 8007abe:	47c8      	blx	r9
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d103      	bne.n	8007acc <_printf_common+0xac>
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007acc:	3501      	adds	r5, #1
 8007ace:	e7c6      	b.n	8007a5e <_printf_common+0x3e>
 8007ad0:	18e1      	adds	r1, r4, r3
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	2030      	movs	r0, #48	@ 0x30
 8007ad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ada:	4422      	add	r2, r4
 8007adc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	e7c7      	b.n	8007a78 <_printf_common+0x58>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	4622      	mov	r2, r4
 8007aec:	4641      	mov	r1, r8
 8007aee:	4638      	mov	r0, r7
 8007af0:	47c8      	blx	r9
 8007af2:	3001      	adds	r0, #1
 8007af4:	d0e6      	beq.n	8007ac4 <_printf_common+0xa4>
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7d9      	b.n	8007aae <_printf_common+0x8e>
	...

08007afc <_printf_i>:
 8007afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	7e0f      	ldrb	r7, [r1, #24]
 8007b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b04:	2f78      	cmp	r7, #120	@ 0x78
 8007b06:	4691      	mov	r9, r2
 8007b08:	4680      	mov	r8, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	469a      	mov	sl, r3
 8007b0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b12:	d807      	bhi.n	8007b24 <_printf_i+0x28>
 8007b14:	2f62      	cmp	r7, #98	@ 0x62
 8007b16:	d80a      	bhi.n	8007b2e <_printf_i+0x32>
 8007b18:	2f00      	cmp	r7, #0
 8007b1a:	f000 80d1 	beq.w	8007cc0 <_printf_i+0x1c4>
 8007b1e:	2f58      	cmp	r7, #88	@ 0x58
 8007b20:	f000 80b8 	beq.w	8007c94 <_printf_i+0x198>
 8007b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b2c:	e03a      	b.n	8007ba4 <_printf_i+0xa8>
 8007b2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b32:	2b15      	cmp	r3, #21
 8007b34:	d8f6      	bhi.n	8007b24 <_printf_i+0x28>
 8007b36:	a101      	add	r1, pc, #4	@ (adr r1, 8007b3c <_printf_i+0x40>)
 8007b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b3c:	08007b95 	.word	0x08007b95
 8007b40:	08007ba9 	.word	0x08007ba9
 8007b44:	08007b25 	.word	0x08007b25
 8007b48:	08007b25 	.word	0x08007b25
 8007b4c:	08007b25 	.word	0x08007b25
 8007b50:	08007b25 	.word	0x08007b25
 8007b54:	08007ba9 	.word	0x08007ba9
 8007b58:	08007b25 	.word	0x08007b25
 8007b5c:	08007b25 	.word	0x08007b25
 8007b60:	08007b25 	.word	0x08007b25
 8007b64:	08007b25 	.word	0x08007b25
 8007b68:	08007ca7 	.word	0x08007ca7
 8007b6c:	08007bd3 	.word	0x08007bd3
 8007b70:	08007c61 	.word	0x08007c61
 8007b74:	08007b25 	.word	0x08007b25
 8007b78:	08007b25 	.word	0x08007b25
 8007b7c:	08007cc9 	.word	0x08007cc9
 8007b80:	08007b25 	.word	0x08007b25
 8007b84:	08007bd3 	.word	0x08007bd3
 8007b88:	08007b25 	.word	0x08007b25
 8007b8c:	08007b25 	.word	0x08007b25
 8007b90:	08007c69 	.word	0x08007c69
 8007b94:	6833      	ldr	r3, [r6, #0]
 8007b96:	1d1a      	adds	r2, r3, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6032      	str	r2, [r6, #0]
 8007b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e09c      	b.n	8007ce2 <_printf_i+0x1e6>
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	6820      	ldr	r0, [r4, #0]
 8007bac:	1d19      	adds	r1, r3, #4
 8007bae:	6031      	str	r1, [r6, #0]
 8007bb0:	0606      	lsls	r6, r0, #24
 8007bb2:	d501      	bpl.n	8007bb8 <_printf_i+0xbc>
 8007bb4:	681d      	ldr	r5, [r3, #0]
 8007bb6:	e003      	b.n	8007bc0 <_printf_i+0xc4>
 8007bb8:	0645      	lsls	r5, r0, #25
 8007bba:	d5fb      	bpl.n	8007bb4 <_printf_i+0xb8>
 8007bbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	da03      	bge.n	8007bcc <_printf_i+0xd0>
 8007bc4:	232d      	movs	r3, #45	@ 0x2d
 8007bc6:	426d      	negs	r5, r5
 8007bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bcc:	4858      	ldr	r0, [pc, #352]	@ (8007d30 <_printf_i+0x234>)
 8007bce:	230a      	movs	r3, #10
 8007bd0:	e011      	b.n	8007bf6 <_printf_i+0xfa>
 8007bd2:	6821      	ldr	r1, [r4, #0]
 8007bd4:	6833      	ldr	r3, [r6, #0]
 8007bd6:	0608      	lsls	r0, r1, #24
 8007bd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bdc:	d402      	bmi.n	8007be4 <_printf_i+0xe8>
 8007bde:	0649      	lsls	r1, r1, #25
 8007be0:	bf48      	it	mi
 8007be2:	b2ad      	uxthmi	r5, r5
 8007be4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007be6:	4852      	ldr	r0, [pc, #328]	@ (8007d30 <_printf_i+0x234>)
 8007be8:	6033      	str	r3, [r6, #0]
 8007bea:	bf14      	ite	ne
 8007bec:	230a      	movne	r3, #10
 8007bee:	2308      	moveq	r3, #8
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bf6:	6866      	ldr	r6, [r4, #4]
 8007bf8:	60a6      	str	r6, [r4, #8]
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	db05      	blt.n	8007c0a <_printf_i+0x10e>
 8007bfe:	6821      	ldr	r1, [r4, #0]
 8007c00:	432e      	orrs	r6, r5
 8007c02:	f021 0104 	bic.w	r1, r1, #4
 8007c06:	6021      	str	r1, [r4, #0]
 8007c08:	d04b      	beq.n	8007ca2 <_printf_i+0x1a6>
 8007c0a:	4616      	mov	r6, r2
 8007c0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c10:	fb03 5711 	mls	r7, r3, r1, r5
 8007c14:	5dc7      	ldrb	r7, [r0, r7]
 8007c16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c1a:	462f      	mov	r7, r5
 8007c1c:	42bb      	cmp	r3, r7
 8007c1e:	460d      	mov	r5, r1
 8007c20:	d9f4      	bls.n	8007c0c <_printf_i+0x110>
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d10b      	bne.n	8007c3e <_printf_i+0x142>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	07df      	lsls	r7, r3, #31
 8007c2a:	d508      	bpl.n	8007c3e <_printf_i+0x142>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	6861      	ldr	r1, [r4, #4]
 8007c30:	4299      	cmp	r1, r3
 8007c32:	bfde      	ittt	le
 8007c34:	2330      	movle	r3, #48	@ 0x30
 8007c36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c3e:	1b92      	subs	r2, r2, r6
 8007c40:	6122      	str	r2, [r4, #16]
 8007c42:	f8cd a000 	str.w	sl, [sp]
 8007c46:	464b      	mov	r3, r9
 8007c48:	aa03      	add	r2, sp, #12
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	f7ff fee7 	bl	8007a20 <_printf_common>
 8007c52:	3001      	adds	r0, #1
 8007c54:	d14a      	bne.n	8007cec <_printf_i+0x1f0>
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5a:	b004      	add	sp, #16
 8007c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	f043 0320 	orr.w	r3, r3, #32
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	4832      	ldr	r0, [pc, #200]	@ (8007d34 <_printf_i+0x238>)
 8007c6a:	2778      	movs	r7, #120	@ 0x78
 8007c6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	6831      	ldr	r1, [r6, #0]
 8007c74:	061f      	lsls	r7, r3, #24
 8007c76:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c7a:	d402      	bmi.n	8007c82 <_printf_i+0x186>
 8007c7c:	065f      	lsls	r7, r3, #25
 8007c7e:	bf48      	it	mi
 8007c80:	b2ad      	uxthmi	r5, r5
 8007c82:	6031      	str	r1, [r6, #0]
 8007c84:	07d9      	lsls	r1, r3, #31
 8007c86:	bf44      	itt	mi
 8007c88:	f043 0320 	orrmi.w	r3, r3, #32
 8007c8c:	6023      	strmi	r3, [r4, #0]
 8007c8e:	b11d      	cbz	r5, 8007c98 <_printf_i+0x19c>
 8007c90:	2310      	movs	r3, #16
 8007c92:	e7ad      	b.n	8007bf0 <_printf_i+0xf4>
 8007c94:	4826      	ldr	r0, [pc, #152]	@ (8007d30 <_printf_i+0x234>)
 8007c96:	e7e9      	b.n	8007c6c <_printf_i+0x170>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	f023 0320 	bic.w	r3, r3, #32
 8007c9e:	6023      	str	r3, [r4, #0]
 8007ca0:	e7f6      	b.n	8007c90 <_printf_i+0x194>
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	e7bd      	b.n	8007c22 <_printf_i+0x126>
 8007ca6:	6833      	ldr	r3, [r6, #0]
 8007ca8:	6825      	ldr	r5, [r4, #0]
 8007caa:	6961      	ldr	r1, [r4, #20]
 8007cac:	1d18      	adds	r0, r3, #4
 8007cae:	6030      	str	r0, [r6, #0]
 8007cb0:	062e      	lsls	r6, r5, #24
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	d501      	bpl.n	8007cba <_printf_i+0x1be>
 8007cb6:	6019      	str	r1, [r3, #0]
 8007cb8:	e002      	b.n	8007cc0 <_printf_i+0x1c4>
 8007cba:	0668      	lsls	r0, r5, #25
 8007cbc:	d5fb      	bpl.n	8007cb6 <_printf_i+0x1ba>
 8007cbe:	8019      	strh	r1, [r3, #0]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6123      	str	r3, [r4, #16]
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	e7bc      	b.n	8007c42 <_printf_i+0x146>
 8007cc8:	6833      	ldr	r3, [r6, #0]
 8007cca:	1d1a      	adds	r2, r3, #4
 8007ccc:	6032      	str	r2, [r6, #0]
 8007cce:	681e      	ldr	r6, [r3, #0]
 8007cd0:	6862      	ldr	r2, [r4, #4]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7f8 fa93 	bl	8000200 <memchr>
 8007cda:	b108      	cbz	r0, 8007ce0 <_printf_i+0x1e4>
 8007cdc:	1b80      	subs	r0, r0, r6
 8007cde:	6060      	str	r0, [r4, #4]
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cea:	e7aa      	b.n	8007c42 <_printf_i+0x146>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	4632      	mov	r2, r6
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	47d0      	blx	sl
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d0ad      	beq.n	8007c56 <_printf_i+0x15a>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	079b      	lsls	r3, r3, #30
 8007cfe:	d413      	bmi.n	8007d28 <_printf_i+0x22c>
 8007d00:	68e0      	ldr	r0, [r4, #12]
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	4298      	cmp	r0, r3
 8007d06:	bfb8      	it	lt
 8007d08:	4618      	movlt	r0, r3
 8007d0a:	e7a6      	b.n	8007c5a <_printf_i+0x15e>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4632      	mov	r2, r6
 8007d10:	4649      	mov	r1, r9
 8007d12:	4640      	mov	r0, r8
 8007d14:	47d0      	blx	sl
 8007d16:	3001      	adds	r0, #1
 8007d18:	d09d      	beq.n	8007c56 <_printf_i+0x15a>
 8007d1a:	3501      	adds	r5, #1
 8007d1c:	68e3      	ldr	r3, [r4, #12]
 8007d1e:	9903      	ldr	r1, [sp, #12]
 8007d20:	1a5b      	subs	r3, r3, r1
 8007d22:	42ab      	cmp	r3, r5
 8007d24:	dcf2      	bgt.n	8007d0c <_printf_i+0x210>
 8007d26:	e7eb      	b.n	8007d00 <_printf_i+0x204>
 8007d28:	2500      	movs	r5, #0
 8007d2a:	f104 0619 	add.w	r6, r4, #25
 8007d2e:	e7f5      	b.n	8007d1c <_printf_i+0x220>
 8007d30:	0800a282 	.word	0x0800a282
 8007d34:	0800a293 	.word	0x0800a293

08007d38 <std>:
 8007d38:	2300      	movs	r3, #0
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d46:	6083      	str	r3, [r0, #8]
 8007d48:	8181      	strh	r1, [r0, #12]
 8007d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d4c:	81c2      	strh	r2, [r0, #14]
 8007d4e:	6183      	str	r3, [r0, #24]
 8007d50:	4619      	mov	r1, r3
 8007d52:	2208      	movs	r2, #8
 8007d54:	305c      	adds	r0, #92	@ 0x5c
 8007d56:	f000 f916 	bl	8007f86 <memset>
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d90 <std+0x58>)
 8007d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <std+0x5c>)
 8007d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d62:	4b0d      	ldr	r3, [pc, #52]	@ (8007d98 <std+0x60>)
 8007d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d66:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <std+0x64>)
 8007d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <std+0x68>)
 8007d6c:	6224      	str	r4, [r4, #32]
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d006      	beq.n	8007d80 <std+0x48>
 8007d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d76:	4294      	cmp	r4, r2
 8007d78:	d002      	beq.n	8007d80 <std+0x48>
 8007d7a:	33d0      	adds	r3, #208	@ 0xd0
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	d105      	bne.n	8007d8c <std+0x54>
 8007d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d88:	f000 b97a 	b.w	8008080 <__retarget_lock_init_recursive>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	bf00      	nop
 8007d90:	08007f01 	.word	0x08007f01
 8007d94:	08007f23 	.word	0x08007f23
 8007d98:	08007f5b 	.word	0x08007f5b
 8007d9c:	08007f7f 	.word	0x08007f7f
 8007da0:	200404e4 	.word	0x200404e4

08007da4 <stdio_exit_handler>:
 8007da4:	4a02      	ldr	r2, [pc, #8]	@ (8007db0 <stdio_exit_handler+0xc>)
 8007da6:	4903      	ldr	r1, [pc, #12]	@ (8007db4 <stdio_exit_handler+0x10>)
 8007da8:	4803      	ldr	r0, [pc, #12]	@ (8007db8 <stdio_exit_handler+0x14>)
 8007daa:	f000 b869 	b.w	8007e80 <_fwalk_sglue>
 8007dae:	bf00      	nop
 8007db0:	2004000c 	.word	0x2004000c
 8007db4:	080099e5 	.word	0x080099e5
 8007db8:	2004001c 	.word	0x2004001c

08007dbc <cleanup_stdio>:
 8007dbc:	6841      	ldr	r1, [r0, #4]
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007df0 <cleanup_stdio+0x34>)
 8007dc0:	4299      	cmp	r1, r3
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	d001      	beq.n	8007dcc <cleanup_stdio+0x10>
 8007dc8:	f001 fe0c 	bl	80099e4 <_fflush_r>
 8007dcc:	68a1      	ldr	r1, [r4, #8]
 8007dce:	4b09      	ldr	r3, [pc, #36]	@ (8007df4 <cleanup_stdio+0x38>)
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d002      	beq.n	8007dda <cleanup_stdio+0x1e>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 fe05 	bl	80099e4 <_fflush_r>
 8007dda:	68e1      	ldr	r1, [r4, #12]
 8007ddc:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <cleanup_stdio+0x3c>)
 8007dde:	4299      	cmp	r1, r3
 8007de0:	d004      	beq.n	8007dec <cleanup_stdio+0x30>
 8007de2:	4620      	mov	r0, r4
 8007de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de8:	f001 bdfc 	b.w	80099e4 <_fflush_r>
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	bf00      	nop
 8007df0:	200404e4 	.word	0x200404e4
 8007df4:	2004054c 	.word	0x2004054c
 8007df8:	200405b4 	.word	0x200405b4

08007dfc <global_stdio_init.part.0>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <global_stdio_init.part.0+0x30>)
 8007e00:	4c0b      	ldr	r4, [pc, #44]	@ (8007e30 <global_stdio_init.part.0+0x34>)
 8007e02:	4a0c      	ldr	r2, [pc, #48]	@ (8007e34 <global_stdio_init.part.0+0x38>)
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	4620      	mov	r0, r4
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	f7ff ff94 	bl	8007d38 <std>
 8007e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e14:	2201      	movs	r2, #1
 8007e16:	2109      	movs	r1, #9
 8007e18:	f7ff ff8e 	bl	8007d38 <std>
 8007e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e20:	2202      	movs	r2, #2
 8007e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e26:	2112      	movs	r1, #18
 8007e28:	f7ff bf86 	b.w	8007d38 <std>
 8007e2c:	2004061c 	.word	0x2004061c
 8007e30:	200404e4 	.word	0x200404e4
 8007e34:	08007da5 	.word	0x08007da5

08007e38 <__sfp_lock_acquire>:
 8007e38:	4801      	ldr	r0, [pc, #4]	@ (8007e40 <__sfp_lock_acquire+0x8>)
 8007e3a:	f000 b922 	b.w	8008082 <__retarget_lock_acquire_recursive>
 8007e3e:	bf00      	nop
 8007e40:	20040625 	.word	0x20040625

08007e44 <__sfp_lock_release>:
 8007e44:	4801      	ldr	r0, [pc, #4]	@ (8007e4c <__sfp_lock_release+0x8>)
 8007e46:	f000 b91d 	b.w	8008084 <__retarget_lock_release_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20040625 	.word	0x20040625

08007e50 <__sinit>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4604      	mov	r4, r0
 8007e54:	f7ff fff0 	bl	8007e38 <__sfp_lock_acquire>
 8007e58:	6a23      	ldr	r3, [r4, #32]
 8007e5a:	b11b      	cbz	r3, 8007e64 <__sinit+0x14>
 8007e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e60:	f7ff bff0 	b.w	8007e44 <__sfp_lock_release>
 8007e64:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <__sinit+0x28>)
 8007e66:	6223      	str	r3, [r4, #32]
 8007e68:	4b04      	ldr	r3, [pc, #16]	@ (8007e7c <__sinit+0x2c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f5      	bne.n	8007e5c <__sinit+0xc>
 8007e70:	f7ff ffc4 	bl	8007dfc <global_stdio_init.part.0>
 8007e74:	e7f2      	b.n	8007e5c <__sinit+0xc>
 8007e76:	bf00      	nop
 8007e78:	08007dbd 	.word	0x08007dbd
 8007e7c:	2004061c 	.word	0x2004061c

08007e80 <_fwalk_sglue>:
 8007e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e84:	4607      	mov	r7, r0
 8007e86:	4688      	mov	r8, r1
 8007e88:	4614      	mov	r4, r2
 8007e8a:	2600      	movs	r6, #0
 8007e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e90:	f1b9 0901 	subs.w	r9, r9, #1
 8007e94:	d505      	bpl.n	8007ea2 <_fwalk_sglue+0x22>
 8007e96:	6824      	ldr	r4, [r4, #0]
 8007e98:	2c00      	cmp	r4, #0
 8007e9a:	d1f7      	bne.n	8007e8c <_fwalk_sglue+0xc>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea2:	89ab      	ldrh	r3, [r5, #12]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d907      	bls.n	8007eb8 <_fwalk_sglue+0x38>
 8007ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eac:	3301      	adds	r3, #1
 8007eae:	d003      	beq.n	8007eb8 <_fwalk_sglue+0x38>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c0      	blx	r8
 8007eb6:	4306      	orrs	r6, r0
 8007eb8:	3568      	adds	r5, #104	@ 0x68
 8007eba:	e7e9      	b.n	8007e90 <_fwalk_sglue+0x10>

08007ebc <siprintf>:
 8007ebc:	b40e      	push	{r1, r2, r3}
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	b09d      	sub	sp, #116	@ 0x74
 8007ec2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007ec4:	9002      	str	r0, [sp, #8]
 8007ec6:	9006      	str	r0, [sp, #24]
 8007ec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ecc:	480a      	ldr	r0, [pc, #40]	@ (8007ef8 <siprintf+0x3c>)
 8007ece:	9107      	str	r1, [sp, #28]
 8007ed0:	9104      	str	r1, [sp, #16]
 8007ed2:	490a      	ldr	r1, [pc, #40]	@ (8007efc <siprintf+0x40>)
 8007ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed8:	9105      	str	r1, [sp, #20]
 8007eda:	2400      	movs	r4, #0
 8007edc:	a902      	add	r1, sp, #8
 8007ede:	6800      	ldr	r0, [r0, #0]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007ee4:	f001 fbfe 	bl	80096e4 <_svfiprintf_r>
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	701c      	strb	r4, [r3, #0]
 8007eec:	b01d      	add	sp, #116	@ 0x74
 8007eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef2:	b003      	add	sp, #12
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	20040018 	.word	0x20040018
 8007efc:	ffff0208 	.word	0xffff0208

08007f00 <__sread>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	460c      	mov	r4, r1
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	f000 f86c 	bl	8007fe4 <_read_r>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	bfab      	itete	ge
 8007f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f12:	89a3      	ldrhlt	r3, [r4, #12]
 8007f14:	181b      	addge	r3, r3, r0
 8007f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f1a:	bfac      	ite	ge
 8007f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f1e:	81a3      	strhlt	r3, [r4, #12]
 8007f20:	bd10      	pop	{r4, pc}

08007f22 <__swrite>:
 8007f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	461f      	mov	r7, r3
 8007f28:	898b      	ldrh	r3, [r1, #12]
 8007f2a:	05db      	lsls	r3, r3, #23
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4616      	mov	r6, r2
 8007f32:	d505      	bpl.n	8007f40 <__swrite+0x1e>
 8007f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f38:	2302      	movs	r3, #2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f000 f840 	bl	8007fc0 <_lseek_r>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	463b      	mov	r3, r7
 8007f50:	4628      	mov	r0, r5
 8007f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	f000 b857 	b.w	8008008 <_write_r>

08007f5a <__sseek>:
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f62:	f000 f82d 	bl	8007fc0 <_lseek_r>
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	bf15      	itete	ne
 8007f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f76:	81a3      	strheq	r3, [r4, #12]
 8007f78:	bf18      	it	ne
 8007f7a:	81a3      	strhne	r3, [r4, #12]
 8007f7c:	bd10      	pop	{r4, pc}

08007f7e <__sclose>:
 8007f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f82:	f000 b80d 	b.w	8007fa0 <_close_r>

08007f86 <memset>:
 8007f86:	4402      	add	r2, r0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d100      	bne.n	8007f90 <memset+0xa>
 8007f8e:	4770      	bx	lr
 8007f90:	f803 1b01 	strb.w	r1, [r3], #1
 8007f94:	e7f9      	b.n	8007f8a <memset+0x4>
	...

08007f98 <_localeconv_r>:
 8007f98:	4800      	ldr	r0, [pc, #0]	@ (8007f9c <_localeconv_r+0x4>)
 8007f9a:	4770      	bx	lr
 8007f9c:	20040158 	.word	0x20040158

08007fa0 <_close_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d06      	ldr	r5, [pc, #24]	@ (8007fbc <_close_r+0x1c>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7fa f8ad 	bl	800210a <_close>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_close_r+0x1a>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_close_r+0x1a>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20040620 	.word	0x20040620

08007fc0 <_lseek_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d07      	ldr	r5, [pc, #28]	@ (8007fe0 <_lseek_r+0x20>)
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7fa f8c2 	bl	8002158 <_lseek>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_lseek_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_lseek_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	20040620 	.word	0x20040620

08007fe4 <_read_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d07      	ldr	r5, [pc, #28]	@ (8008004 <_read_r+0x20>)
 8007fe8:	4604      	mov	r4, r0
 8007fea:	4608      	mov	r0, r1
 8007fec:	4611      	mov	r1, r2
 8007fee:	2200      	movs	r2, #0
 8007ff0:	602a      	str	r2, [r5, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f7fa f850 	bl	8002098 <_read>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_read_r+0x1e>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_read_r+0x1e>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20040620 	.word	0x20040620

08008008 <_write_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d07      	ldr	r5, [pc, #28]	@ (8008028 <_write_r+0x20>)
 800800c:	4604      	mov	r4, r0
 800800e:	4608      	mov	r0, r1
 8008010:	4611      	mov	r1, r2
 8008012:	2200      	movs	r2, #0
 8008014:	602a      	str	r2, [r5, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f7fa f85b 	bl	80020d2 <_write>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_write_r+0x1e>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_write_r+0x1e>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	20040620 	.word	0x20040620

0800802c <__errno>:
 800802c:	4b01      	ldr	r3, [pc, #4]	@ (8008034 <__errno+0x8>)
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20040018 	.word	0x20040018

08008038 <__libc_init_array>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4d0d      	ldr	r5, [pc, #52]	@ (8008070 <__libc_init_array+0x38>)
 800803c:	4c0d      	ldr	r4, [pc, #52]	@ (8008074 <__libc_init_array+0x3c>)
 800803e:	1b64      	subs	r4, r4, r5
 8008040:	10a4      	asrs	r4, r4, #2
 8008042:	2600      	movs	r6, #0
 8008044:	42a6      	cmp	r6, r4
 8008046:	d109      	bne.n	800805c <__libc_init_array+0x24>
 8008048:	4d0b      	ldr	r5, [pc, #44]	@ (8008078 <__libc_init_array+0x40>)
 800804a:	4c0c      	ldr	r4, [pc, #48]	@ (800807c <__libc_init_array+0x44>)
 800804c:	f002 f868 	bl	800a120 <_init>
 8008050:	1b64      	subs	r4, r4, r5
 8008052:	10a4      	asrs	r4, r4, #2
 8008054:	2600      	movs	r6, #0
 8008056:	42a6      	cmp	r6, r4
 8008058:	d105      	bne.n	8008066 <__libc_init_array+0x2e>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008060:	4798      	blx	r3
 8008062:	3601      	adds	r6, #1
 8008064:	e7ee      	b.n	8008044 <__libc_init_array+0xc>
 8008066:	f855 3b04 	ldr.w	r3, [r5], #4
 800806a:	4798      	blx	r3
 800806c:	3601      	adds	r6, #1
 800806e:	e7f2      	b.n	8008056 <__libc_init_array+0x1e>
 8008070:	0800a5ec 	.word	0x0800a5ec
 8008074:	0800a5ec 	.word	0x0800a5ec
 8008078:	0800a5ec 	.word	0x0800a5ec
 800807c:	0800a5f0 	.word	0x0800a5f0

08008080 <__retarget_lock_init_recursive>:
 8008080:	4770      	bx	lr

08008082 <__retarget_lock_acquire_recursive>:
 8008082:	4770      	bx	lr

08008084 <__retarget_lock_release_recursive>:
 8008084:	4770      	bx	lr

08008086 <quorem>:
 8008086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6903      	ldr	r3, [r0, #16]
 800808c:	690c      	ldr	r4, [r1, #16]
 800808e:	42a3      	cmp	r3, r4
 8008090:	4607      	mov	r7, r0
 8008092:	db7e      	blt.n	8008192 <quorem+0x10c>
 8008094:	3c01      	subs	r4, #1
 8008096:	f101 0814 	add.w	r8, r1, #20
 800809a:	00a3      	lsls	r3, r4, #2
 800809c:	f100 0514 	add.w	r5, r0, #20
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b0:	3301      	adds	r3, #1
 80080b2:	429a      	cmp	r2, r3
 80080b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80080bc:	d32e      	bcc.n	800811c <quorem+0x96>
 80080be:	f04f 0a00 	mov.w	sl, #0
 80080c2:	46c4      	mov	ip, r8
 80080c4:	46ae      	mov	lr, r5
 80080c6:	46d3      	mov	fp, sl
 80080c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080cc:	b298      	uxth	r0, r3
 80080ce:	fb06 a000 	mla	r0, r6, r0, sl
 80080d2:	0c02      	lsrs	r2, r0, #16
 80080d4:	0c1b      	lsrs	r3, r3, #16
 80080d6:	fb06 2303 	mla	r3, r6, r3, r2
 80080da:	f8de 2000 	ldr.w	r2, [lr]
 80080de:	b280      	uxth	r0, r0
 80080e0:	b292      	uxth	r2, r2
 80080e2:	1a12      	subs	r2, r2, r0
 80080e4:	445a      	add	r2, fp
 80080e6:	f8de 0000 	ldr.w	r0, [lr]
 80080ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080f8:	b292      	uxth	r2, r2
 80080fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080fe:	45e1      	cmp	r9, ip
 8008100:	f84e 2b04 	str.w	r2, [lr], #4
 8008104:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008108:	d2de      	bcs.n	80080c8 <quorem+0x42>
 800810a:	9b00      	ldr	r3, [sp, #0]
 800810c:	58eb      	ldr	r3, [r5, r3]
 800810e:	b92b      	cbnz	r3, 800811c <quorem+0x96>
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	3b04      	subs	r3, #4
 8008114:	429d      	cmp	r5, r3
 8008116:	461a      	mov	r2, r3
 8008118:	d32f      	bcc.n	800817a <quorem+0xf4>
 800811a:	613c      	str	r4, [r7, #16]
 800811c:	4638      	mov	r0, r7
 800811e:	f001 f97d 	bl	800941c <__mcmp>
 8008122:	2800      	cmp	r0, #0
 8008124:	db25      	blt.n	8008172 <quorem+0xec>
 8008126:	4629      	mov	r1, r5
 8008128:	2000      	movs	r0, #0
 800812a:	f858 2b04 	ldr.w	r2, [r8], #4
 800812e:	f8d1 c000 	ldr.w	ip, [r1]
 8008132:	fa1f fe82 	uxth.w	lr, r2
 8008136:	fa1f f38c 	uxth.w	r3, ip
 800813a:	eba3 030e 	sub.w	r3, r3, lr
 800813e:	4403      	add	r3, r0
 8008140:	0c12      	lsrs	r2, r2, #16
 8008142:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008146:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800814a:	b29b      	uxth	r3, r3
 800814c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008150:	45c1      	cmp	r9, r8
 8008152:	f841 3b04 	str.w	r3, [r1], #4
 8008156:	ea4f 4022 	mov.w	r0, r2, asr #16
 800815a:	d2e6      	bcs.n	800812a <quorem+0xa4>
 800815c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008164:	b922      	cbnz	r2, 8008170 <quorem+0xea>
 8008166:	3b04      	subs	r3, #4
 8008168:	429d      	cmp	r5, r3
 800816a:	461a      	mov	r2, r3
 800816c:	d30b      	bcc.n	8008186 <quorem+0x100>
 800816e:	613c      	str	r4, [r7, #16]
 8008170:	3601      	adds	r6, #1
 8008172:	4630      	mov	r0, r6
 8008174:	b003      	add	sp, #12
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	3b04      	subs	r3, #4
 800817e:	2a00      	cmp	r2, #0
 8008180:	d1cb      	bne.n	800811a <quorem+0x94>
 8008182:	3c01      	subs	r4, #1
 8008184:	e7c6      	b.n	8008114 <quorem+0x8e>
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	3b04      	subs	r3, #4
 800818a:	2a00      	cmp	r2, #0
 800818c:	d1ef      	bne.n	800816e <quorem+0xe8>
 800818e:	3c01      	subs	r4, #1
 8008190:	e7ea      	b.n	8008168 <quorem+0xe2>
 8008192:	2000      	movs	r0, #0
 8008194:	e7ee      	b.n	8008174 <quorem+0xee>
	...

08008198 <_dtoa_r>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	69c7      	ldr	r7, [r0, #28]
 800819e:	b097      	sub	sp, #92	@ 0x5c
 80081a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80081a4:	ec55 4b10 	vmov	r4, r5, d0
 80081a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80081aa:	9107      	str	r1, [sp, #28]
 80081ac:	4681      	mov	r9, r0
 80081ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80081b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80081b2:	b97f      	cbnz	r7, 80081d4 <_dtoa_r+0x3c>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f000 fe09 	bl	8008dcc <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80081c0:	b920      	cbnz	r0, 80081cc <_dtoa_r+0x34>
 80081c2:	4ba9      	ldr	r3, [pc, #676]	@ (8008468 <_dtoa_r+0x2d0>)
 80081c4:	21ef      	movs	r1, #239	@ 0xef
 80081c6:	48a9      	ldr	r0, [pc, #676]	@ (800846c <_dtoa_r+0x2d4>)
 80081c8:	f001 fc6c 	bl	8009aa4 <__assert_func>
 80081cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081d0:	6007      	str	r7, [r0, #0]
 80081d2:	60c7      	str	r7, [r0, #12]
 80081d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	b159      	cbz	r1, 80081f4 <_dtoa_r+0x5c>
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	604a      	str	r2, [r1, #4]
 80081e0:	2301      	movs	r3, #1
 80081e2:	4093      	lsls	r3, r2
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	4648      	mov	r0, r9
 80081e8:	f000 fee6 	bl	8008fb8 <_Bfree>
 80081ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	1e2b      	subs	r3, r5, #0
 80081f6:	bfb9      	ittee	lt
 80081f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081fc:	9305      	strlt	r3, [sp, #20]
 80081fe:	2300      	movge	r3, #0
 8008200:	6033      	strge	r3, [r6, #0]
 8008202:	9f05      	ldr	r7, [sp, #20]
 8008204:	4b9a      	ldr	r3, [pc, #616]	@ (8008470 <_dtoa_r+0x2d8>)
 8008206:	bfbc      	itt	lt
 8008208:	2201      	movlt	r2, #1
 800820a:	6032      	strlt	r2, [r6, #0]
 800820c:	43bb      	bics	r3, r7
 800820e:	d112      	bne.n	8008236 <_dtoa_r+0x9e>
 8008210:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008212:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800821c:	4323      	orrs	r3, r4
 800821e:	f000 855a 	beq.w	8008cd6 <_dtoa_r+0xb3e>
 8008222:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008224:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008484 <_dtoa_r+0x2ec>
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 855c 	beq.w	8008ce6 <_dtoa_r+0xb4e>
 800822e:	f10a 0303 	add.w	r3, sl, #3
 8008232:	f000 bd56 	b.w	8008ce2 <_dtoa_r+0xb4a>
 8008236:	ed9d 7b04 	vldr	d7, [sp, #16]
 800823a:	2200      	movs	r2, #0
 800823c:	ec51 0b17 	vmov	r0, r1, d7
 8008240:	2300      	movs	r3, #0
 8008242:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008246:	f7f8 fc57 	bl	8000af8 <__aeabi_dcmpeq>
 800824a:	4680      	mov	r8, r0
 800824c:	b158      	cbz	r0, 8008266 <_dtoa_r+0xce>
 800824e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008250:	2301      	movs	r3, #1
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008256:	b113      	cbz	r3, 800825e <_dtoa_r+0xc6>
 8008258:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800825a:	4b86      	ldr	r3, [pc, #536]	@ (8008474 <_dtoa_r+0x2dc>)
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008488 <_dtoa_r+0x2f0>
 8008262:	f000 bd40 	b.w	8008ce6 <_dtoa_r+0xb4e>
 8008266:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800826a:	aa14      	add	r2, sp, #80	@ 0x50
 800826c:	a915      	add	r1, sp, #84	@ 0x54
 800826e:	4648      	mov	r0, r9
 8008270:	f001 f984 	bl	800957c <__d2b>
 8008274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008278:	9002      	str	r0, [sp, #8]
 800827a:	2e00      	cmp	r6, #0
 800827c:	d078      	beq.n	8008370 <_dtoa_r+0x1d8>
 800827e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008280:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800828c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008298:	4619      	mov	r1, r3
 800829a:	2200      	movs	r2, #0
 800829c:	4b76      	ldr	r3, [pc, #472]	@ (8008478 <_dtoa_r+0x2e0>)
 800829e:	f7f8 f80b 	bl	80002b8 <__aeabi_dsub>
 80082a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008450 <_dtoa_r+0x2b8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f9be 	bl	8000628 <__aeabi_dmul>
 80082ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8008458 <_dtoa_r+0x2c0>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f8 f803 	bl	80002bc <__adddf3>
 80082b6:	4604      	mov	r4, r0
 80082b8:	4630      	mov	r0, r6
 80082ba:	460d      	mov	r5, r1
 80082bc:	f7f8 f94a 	bl	8000554 <__aeabi_i2d>
 80082c0:	a367      	add	r3, pc, #412	@ (adr r3, 8008460 <_dtoa_r+0x2c8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f9af 	bl	8000628 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f7 fff3 	bl	80002bc <__adddf3>
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	f7f8 fc55 	bl	8000b88 <__aeabi_d2iz>
 80082de:	2200      	movs	r2, #0
 80082e0:	4607      	mov	r7, r0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 fc10 	bl	8000b0c <__aeabi_dcmplt>
 80082ec:	b140      	cbz	r0, 8008300 <_dtoa_r+0x168>
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7f8 f930 	bl	8000554 <__aeabi_i2d>
 80082f4:	4622      	mov	r2, r4
 80082f6:	462b      	mov	r3, r5
 80082f8:	f7f8 fbfe 	bl	8000af8 <__aeabi_dcmpeq>
 80082fc:	b900      	cbnz	r0, 8008300 <_dtoa_r+0x168>
 80082fe:	3f01      	subs	r7, #1
 8008300:	2f16      	cmp	r7, #22
 8008302:	d852      	bhi.n	80083aa <_dtoa_r+0x212>
 8008304:	4b5d      	ldr	r3, [pc, #372]	@ (800847c <_dtoa_r+0x2e4>)
 8008306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008312:	f7f8 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d049      	beq.n	80083ae <_dtoa_r+0x216>
 800831a:	3f01      	subs	r7, #1
 800831c:	2300      	movs	r3, #0
 800831e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008320:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008322:	1b9b      	subs	r3, r3, r6
 8008324:	1e5a      	subs	r2, r3, #1
 8008326:	bf45      	ittet	mi
 8008328:	f1c3 0301 	rsbmi	r3, r3, #1
 800832c:	9300      	strmi	r3, [sp, #0]
 800832e:	2300      	movpl	r3, #0
 8008330:	2300      	movmi	r3, #0
 8008332:	9206      	str	r2, [sp, #24]
 8008334:	bf54      	ite	pl
 8008336:	9300      	strpl	r3, [sp, #0]
 8008338:	9306      	strmi	r3, [sp, #24]
 800833a:	2f00      	cmp	r7, #0
 800833c:	db39      	blt.n	80083b2 <_dtoa_r+0x21a>
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	970d      	str	r7, [sp, #52]	@ 0x34
 8008342:	443b      	add	r3, r7
 8008344:	9306      	str	r3, [sp, #24]
 8008346:	2300      	movs	r3, #0
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2b09      	cmp	r3, #9
 800834e:	d863      	bhi.n	8008418 <_dtoa_r+0x280>
 8008350:	2b05      	cmp	r3, #5
 8008352:	bfc4      	itt	gt
 8008354:	3b04      	subgt	r3, #4
 8008356:	9307      	strgt	r3, [sp, #28]
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	f1a3 0302 	sub.w	r3, r3, #2
 800835e:	bfcc      	ite	gt
 8008360:	2400      	movgt	r4, #0
 8008362:	2401      	movle	r4, #1
 8008364:	2b03      	cmp	r3, #3
 8008366:	d863      	bhi.n	8008430 <_dtoa_r+0x298>
 8008368:	e8df f003 	tbb	[pc, r3]
 800836c:	2b375452 	.word	0x2b375452
 8008370:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008374:	441e      	add	r6, r3
 8008376:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800837a:	2b20      	cmp	r3, #32
 800837c:	bfc1      	itttt	gt
 800837e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008382:	409f      	lslgt	r7, r3
 8008384:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008388:	fa24 f303 	lsrgt.w	r3, r4, r3
 800838c:	bfd6      	itet	le
 800838e:	f1c3 0320 	rsble	r3, r3, #32
 8008392:	ea47 0003 	orrgt.w	r0, r7, r3
 8008396:	fa04 f003 	lslle.w	r0, r4, r3
 800839a:	f7f8 f8cb 	bl	8000534 <__aeabi_ui2d>
 800839e:	2201      	movs	r2, #1
 80083a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083a4:	3e01      	subs	r6, #1
 80083a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80083a8:	e776      	b.n	8008298 <_dtoa_r+0x100>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7b7      	b.n	800831e <_dtoa_r+0x186>
 80083ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80083b0:	e7b6      	b.n	8008320 <_dtoa_r+0x188>
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	1bdb      	subs	r3, r3, r7
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	427b      	negs	r3, r7
 80083ba:	9308      	str	r3, [sp, #32]
 80083bc:	2300      	movs	r3, #0
 80083be:	930d      	str	r3, [sp, #52]	@ 0x34
 80083c0:	e7c3      	b.n	800834a <_dtoa_r+0x1b2>
 80083c2:	2301      	movs	r3, #1
 80083c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083c8:	eb07 0b03 	add.w	fp, r7, r3
 80083cc:	f10b 0301 	add.w	r3, fp, #1
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	bfb8      	it	lt
 80083d6:	2301      	movlt	r3, #1
 80083d8:	e006      	b.n	80083e8 <_dtoa_r+0x250>
 80083da:	2301      	movs	r3, #1
 80083dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd28      	ble.n	8008436 <_dtoa_r+0x29e>
 80083e4:	469b      	mov	fp, r3
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80083ec:	2100      	movs	r1, #0
 80083ee:	2204      	movs	r2, #4
 80083f0:	f102 0514 	add.w	r5, r2, #20
 80083f4:	429d      	cmp	r5, r3
 80083f6:	d926      	bls.n	8008446 <_dtoa_r+0x2ae>
 80083f8:	6041      	str	r1, [r0, #4]
 80083fa:	4648      	mov	r0, r9
 80083fc:	f000 fd9c 	bl	8008f38 <_Balloc>
 8008400:	4682      	mov	sl, r0
 8008402:	2800      	cmp	r0, #0
 8008404:	d142      	bne.n	800848c <_dtoa_r+0x2f4>
 8008406:	4b1e      	ldr	r3, [pc, #120]	@ (8008480 <_dtoa_r+0x2e8>)
 8008408:	4602      	mov	r2, r0
 800840a:	f240 11af 	movw	r1, #431	@ 0x1af
 800840e:	e6da      	b.n	80081c6 <_dtoa_r+0x2e>
 8008410:	2300      	movs	r3, #0
 8008412:	e7e3      	b.n	80083dc <_dtoa_r+0x244>
 8008414:	2300      	movs	r3, #0
 8008416:	e7d5      	b.n	80083c4 <_dtoa_r+0x22c>
 8008418:	2401      	movs	r4, #1
 800841a:	2300      	movs	r3, #0
 800841c:	9307      	str	r3, [sp, #28]
 800841e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008420:	f04f 3bff 	mov.w	fp, #4294967295
 8008424:	2200      	movs	r2, #0
 8008426:	f8cd b00c 	str.w	fp, [sp, #12]
 800842a:	2312      	movs	r3, #18
 800842c:	920c      	str	r2, [sp, #48]	@ 0x30
 800842e:	e7db      	b.n	80083e8 <_dtoa_r+0x250>
 8008430:	2301      	movs	r3, #1
 8008432:	9309      	str	r3, [sp, #36]	@ 0x24
 8008434:	e7f4      	b.n	8008420 <_dtoa_r+0x288>
 8008436:	f04f 0b01 	mov.w	fp, #1
 800843a:	f8cd b00c 	str.w	fp, [sp, #12]
 800843e:	465b      	mov	r3, fp
 8008440:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008444:	e7d0      	b.n	80083e8 <_dtoa_r+0x250>
 8008446:	3101      	adds	r1, #1
 8008448:	0052      	lsls	r2, r2, #1
 800844a:	e7d1      	b.n	80083f0 <_dtoa_r+0x258>
 800844c:	f3af 8000 	nop.w
 8008450:	636f4361 	.word	0x636f4361
 8008454:	3fd287a7 	.word	0x3fd287a7
 8008458:	8b60c8b3 	.word	0x8b60c8b3
 800845c:	3fc68a28 	.word	0x3fc68a28
 8008460:	509f79fb 	.word	0x509f79fb
 8008464:	3fd34413 	.word	0x3fd34413
 8008468:	0800a2b1 	.word	0x0800a2b1
 800846c:	0800a2c8 	.word	0x0800a2c8
 8008470:	7ff00000 	.word	0x7ff00000
 8008474:	0800a281 	.word	0x0800a281
 8008478:	3ff80000 	.word	0x3ff80000
 800847c:	0800a418 	.word	0x0800a418
 8008480:	0800a320 	.word	0x0800a320
 8008484:	0800a2ad 	.word	0x0800a2ad
 8008488:	0800a280 	.word	0x0800a280
 800848c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008490:	6018      	str	r0, [r3, #0]
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	2b0e      	cmp	r3, #14
 8008496:	f200 80a1 	bhi.w	80085dc <_dtoa_r+0x444>
 800849a:	2c00      	cmp	r4, #0
 800849c:	f000 809e 	beq.w	80085dc <_dtoa_r+0x444>
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	dd33      	ble.n	800850c <_dtoa_r+0x374>
 80084a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008718 <_dtoa_r+0x580>)
 80084a6:	f007 020f 	and.w	r2, r7, #15
 80084aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ae:	ed93 7b00 	vldr	d7, [r3]
 80084b2:	05f8      	lsls	r0, r7, #23
 80084b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80084b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084bc:	d516      	bpl.n	80084ec <_dtoa_r+0x354>
 80084be:	4b97      	ldr	r3, [pc, #604]	@ (800871c <_dtoa_r+0x584>)
 80084c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084c8:	f7f8 f9d8 	bl	800087c <__aeabi_ddiv>
 80084cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084d0:	f004 040f 	and.w	r4, r4, #15
 80084d4:	2603      	movs	r6, #3
 80084d6:	4d91      	ldr	r5, [pc, #580]	@ (800871c <_dtoa_r+0x584>)
 80084d8:	b954      	cbnz	r4, 80084f0 <_dtoa_r+0x358>
 80084da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084e2:	f7f8 f9cb 	bl	800087c <__aeabi_ddiv>
 80084e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084ea:	e028      	b.n	800853e <_dtoa_r+0x3a6>
 80084ec:	2602      	movs	r6, #2
 80084ee:	e7f2      	b.n	80084d6 <_dtoa_r+0x33e>
 80084f0:	07e1      	lsls	r1, r4, #31
 80084f2:	d508      	bpl.n	8008506 <_dtoa_r+0x36e>
 80084f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084fc:	f7f8 f894 	bl	8000628 <__aeabi_dmul>
 8008500:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008504:	3601      	adds	r6, #1
 8008506:	1064      	asrs	r4, r4, #1
 8008508:	3508      	adds	r5, #8
 800850a:	e7e5      	b.n	80084d8 <_dtoa_r+0x340>
 800850c:	f000 80af 	beq.w	800866e <_dtoa_r+0x4d6>
 8008510:	427c      	negs	r4, r7
 8008512:	4b81      	ldr	r3, [pc, #516]	@ (8008718 <_dtoa_r+0x580>)
 8008514:	4d81      	ldr	r5, [pc, #516]	@ (800871c <_dtoa_r+0x584>)
 8008516:	f004 020f 	and.w	r2, r4, #15
 800851a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008526:	f7f8 f87f 	bl	8000628 <__aeabi_dmul>
 800852a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800852e:	1124      	asrs	r4, r4, #4
 8008530:	2300      	movs	r3, #0
 8008532:	2602      	movs	r6, #2
 8008534:	2c00      	cmp	r4, #0
 8008536:	f040 808f 	bne.w	8008658 <_dtoa_r+0x4c0>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1d3      	bne.n	80084e6 <_dtoa_r+0x34e>
 800853e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008540:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8094 	beq.w	8008672 <_dtoa_r+0x4da>
 800854a:	4b75      	ldr	r3, [pc, #468]	@ (8008720 <_dtoa_r+0x588>)
 800854c:	2200      	movs	r2, #0
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f7f8 fadb 	bl	8000b0c <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f000 808b 	beq.w	8008672 <_dtoa_r+0x4da>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8087 	beq.w	8008672 <_dtoa_r+0x4da>
 8008564:	f1bb 0f00 	cmp.w	fp, #0
 8008568:	dd34      	ble.n	80085d4 <_dtoa_r+0x43c>
 800856a:	4620      	mov	r0, r4
 800856c:	4b6d      	ldr	r3, [pc, #436]	@ (8008724 <_dtoa_r+0x58c>)
 800856e:	2200      	movs	r2, #0
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 f859 	bl	8000628 <__aeabi_dmul>
 8008576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857a:	f107 38ff 	add.w	r8, r7, #4294967295
 800857e:	3601      	adds	r6, #1
 8008580:	465c      	mov	r4, fp
 8008582:	4630      	mov	r0, r6
 8008584:	f7f7 ffe6 	bl	8000554 <__aeabi_i2d>
 8008588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858c:	f7f8 f84c 	bl	8000628 <__aeabi_dmul>
 8008590:	4b65      	ldr	r3, [pc, #404]	@ (8008728 <_dtoa_r+0x590>)
 8008592:	2200      	movs	r2, #0
 8008594:	f7f7 fe92 	bl	80002bc <__adddf3>
 8008598:	4605      	mov	r5, r0
 800859a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800859e:	2c00      	cmp	r4, #0
 80085a0:	d16a      	bne.n	8008678 <_dtoa_r+0x4e0>
 80085a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a6:	4b61      	ldr	r3, [pc, #388]	@ (800872c <_dtoa_r+0x594>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	f7f7 fe85 	bl	80002b8 <__aeabi_dsub>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085b6:	462a      	mov	r2, r5
 80085b8:	4633      	mov	r3, r6
 80085ba:	f7f8 fac5 	bl	8000b48 <__aeabi_dcmpgt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f040 8298 	bne.w	8008af4 <_dtoa_r+0x95c>
 80085c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c8:	462a      	mov	r2, r5
 80085ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085ce:	f7f8 fa9d 	bl	8000b0c <__aeabi_dcmplt>
 80085d2:	bb38      	cbnz	r0, 8008624 <_dtoa_r+0x48c>
 80085d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80085d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f2c0 8157 	blt.w	8008892 <_dtoa_r+0x6fa>
 80085e4:	2f0e      	cmp	r7, #14
 80085e6:	f300 8154 	bgt.w	8008892 <_dtoa_r+0x6fa>
 80085ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008718 <_dtoa_r+0x580>)
 80085ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085f0:	ed93 7b00 	vldr	d7, [r3]
 80085f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	ed8d 7b00 	vstr	d7, [sp]
 80085fc:	f280 80e5 	bge.w	80087ca <_dtoa_r+0x632>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f300 80e1 	bgt.w	80087ca <_dtoa_r+0x632>
 8008608:	d10c      	bne.n	8008624 <_dtoa_r+0x48c>
 800860a:	4b48      	ldr	r3, [pc, #288]	@ (800872c <_dtoa_r+0x594>)
 800860c:	2200      	movs	r2, #0
 800860e:	ec51 0b17 	vmov	r0, r1, d7
 8008612:	f7f8 f809 	bl	8000628 <__aeabi_dmul>
 8008616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861a:	f7f8 fa8b 	bl	8000b34 <__aeabi_dcmpge>
 800861e:	2800      	cmp	r0, #0
 8008620:	f000 8266 	beq.w	8008af0 <_dtoa_r+0x958>
 8008624:	2400      	movs	r4, #0
 8008626:	4625      	mov	r5, r4
 8008628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800862a:	4656      	mov	r6, sl
 800862c:	ea6f 0803 	mvn.w	r8, r3
 8008630:	2700      	movs	r7, #0
 8008632:	4621      	mov	r1, r4
 8008634:	4648      	mov	r0, r9
 8008636:	f000 fcbf 	bl	8008fb8 <_Bfree>
 800863a:	2d00      	cmp	r5, #0
 800863c:	f000 80bd 	beq.w	80087ba <_dtoa_r+0x622>
 8008640:	b12f      	cbz	r7, 800864e <_dtoa_r+0x4b6>
 8008642:	42af      	cmp	r7, r5
 8008644:	d003      	beq.n	800864e <_dtoa_r+0x4b6>
 8008646:	4639      	mov	r1, r7
 8008648:	4648      	mov	r0, r9
 800864a:	f000 fcb5 	bl	8008fb8 <_Bfree>
 800864e:	4629      	mov	r1, r5
 8008650:	4648      	mov	r0, r9
 8008652:	f000 fcb1 	bl	8008fb8 <_Bfree>
 8008656:	e0b0      	b.n	80087ba <_dtoa_r+0x622>
 8008658:	07e2      	lsls	r2, r4, #31
 800865a:	d505      	bpl.n	8008668 <_dtoa_r+0x4d0>
 800865c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008660:	f7f7 ffe2 	bl	8000628 <__aeabi_dmul>
 8008664:	3601      	adds	r6, #1
 8008666:	2301      	movs	r3, #1
 8008668:	1064      	asrs	r4, r4, #1
 800866a:	3508      	adds	r5, #8
 800866c:	e762      	b.n	8008534 <_dtoa_r+0x39c>
 800866e:	2602      	movs	r6, #2
 8008670:	e765      	b.n	800853e <_dtoa_r+0x3a6>
 8008672:	9c03      	ldr	r4, [sp, #12]
 8008674:	46b8      	mov	r8, r7
 8008676:	e784      	b.n	8008582 <_dtoa_r+0x3ea>
 8008678:	4b27      	ldr	r3, [pc, #156]	@ (8008718 <_dtoa_r+0x580>)
 800867a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800867c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008684:	4454      	add	r4, sl
 8008686:	2900      	cmp	r1, #0
 8008688:	d054      	beq.n	8008734 <_dtoa_r+0x59c>
 800868a:	4929      	ldr	r1, [pc, #164]	@ (8008730 <_dtoa_r+0x598>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f8f5 	bl	800087c <__aeabi_ddiv>
 8008692:	4633      	mov	r3, r6
 8008694:	462a      	mov	r2, r5
 8008696:	f7f7 fe0f 	bl	80002b8 <__aeabi_dsub>
 800869a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800869e:	4656      	mov	r6, sl
 80086a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a4:	f7f8 fa70 	bl	8000b88 <__aeabi_d2iz>
 80086a8:	4605      	mov	r5, r0
 80086aa:	f7f7 ff53 	bl	8000554 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086b6:	f7f7 fdff 	bl	80002b8 <__aeabi_dsub>
 80086ba:	3530      	adds	r5, #48	@ 0x30
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086c4:	f806 5b01 	strb.w	r5, [r6], #1
 80086c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086cc:	f7f8 fa1e 	bl	8000b0c <__aeabi_dcmplt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d172      	bne.n	80087ba <_dtoa_r+0x622>
 80086d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d8:	4911      	ldr	r1, [pc, #68]	@ (8008720 <_dtoa_r+0x588>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f7 fdec 	bl	80002b8 <__aeabi_dsub>
 80086e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086e4:	f7f8 fa12 	bl	8000b0c <__aeabi_dcmplt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f040 80b4 	bne.w	8008856 <_dtoa_r+0x6be>
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	f43f af70 	beq.w	80085d4 <_dtoa_r+0x43c>
 80086f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <_dtoa_r+0x58c>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	f7f7 ff94 	bl	8000628 <__aeabi_dmul>
 8008700:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <_dtoa_r+0x58c>)
 8008702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008706:	2200      	movs	r2, #0
 8008708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800870c:	f7f7 ff8c 	bl	8000628 <__aeabi_dmul>
 8008710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008714:	e7c4      	b.n	80086a0 <_dtoa_r+0x508>
 8008716:	bf00      	nop
 8008718:	0800a418 	.word	0x0800a418
 800871c:	0800a3f0 	.word	0x0800a3f0
 8008720:	3ff00000 	.word	0x3ff00000
 8008724:	40240000 	.word	0x40240000
 8008728:	401c0000 	.word	0x401c0000
 800872c:	40140000 	.word	0x40140000
 8008730:	3fe00000 	.word	0x3fe00000
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	f7f7 ff76 	bl	8000628 <__aeabi_dmul>
 800873c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008740:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008742:	4656      	mov	r6, sl
 8008744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008748:	f7f8 fa1e 	bl	8000b88 <__aeabi_d2iz>
 800874c:	4605      	mov	r5, r0
 800874e:	f7f7 ff01 	bl	8000554 <__aeabi_i2d>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800875a:	f7f7 fdad 	bl	80002b8 <__aeabi_dsub>
 800875e:	3530      	adds	r5, #48	@ 0x30
 8008760:	f806 5b01 	strb.w	r5, [r6], #1
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	42a6      	cmp	r6, r4
 800876a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800876e:	f04f 0200 	mov.w	r2, #0
 8008772:	d124      	bne.n	80087be <_dtoa_r+0x626>
 8008774:	4baf      	ldr	r3, [pc, #700]	@ (8008a34 <_dtoa_r+0x89c>)
 8008776:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800877a:	f7f7 fd9f 	bl	80002bc <__adddf3>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008786:	f7f8 f9df 	bl	8000b48 <__aeabi_dcmpgt>
 800878a:	2800      	cmp	r0, #0
 800878c:	d163      	bne.n	8008856 <_dtoa_r+0x6be>
 800878e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008792:	49a8      	ldr	r1, [pc, #672]	@ (8008a34 <_dtoa_r+0x89c>)
 8008794:	2000      	movs	r0, #0
 8008796:	f7f7 fd8f 	bl	80002b8 <__aeabi_dsub>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a2:	f7f8 f9b3 	bl	8000b0c <__aeabi_dcmplt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f af14 	beq.w	80085d4 <_dtoa_r+0x43c>
 80087ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80087ae:	1e73      	subs	r3, r6, #1
 80087b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087b6:	2b30      	cmp	r3, #48	@ 0x30
 80087b8:	d0f8      	beq.n	80087ac <_dtoa_r+0x614>
 80087ba:	4647      	mov	r7, r8
 80087bc:	e03b      	b.n	8008836 <_dtoa_r+0x69e>
 80087be:	4b9e      	ldr	r3, [pc, #632]	@ (8008a38 <_dtoa_r+0x8a0>)
 80087c0:	f7f7 ff32 	bl	8000628 <__aeabi_dmul>
 80087c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c8:	e7bc      	b.n	8008744 <_dtoa_r+0x5ac>
 80087ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80087ce:	4656      	mov	r6, sl
 80087d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f8 f850 	bl	800087c <__aeabi_ddiv>
 80087dc:	f7f8 f9d4 	bl	8000b88 <__aeabi_d2iz>
 80087e0:	4680      	mov	r8, r0
 80087e2:	f7f7 feb7 	bl	8000554 <__aeabi_i2d>
 80087e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ea:	f7f7 ff1d 	bl	8000628 <__aeabi_dmul>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4620      	mov	r0, r4
 80087f4:	4629      	mov	r1, r5
 80087f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087fa:	f7f7 fd5d 	bl	80002b8 <__aeabi_dsub>
 80087fe:	f806 4b01 	strb.w	r4, [r6], #1
 8008802:	9d03      	ldr	r5, [sp, #12]
 8008804:	eba6 040a 	sub.w	r4, r6, sl
 8008808:	42a5      	cmp	r5, r4
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	d133      	bne.n	8008878 <_dtoa_r+0x6e0>
 8008810:	f7f7 fd54 	bl	80002bc <__adddf3>
 8008814:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008818:	4604      	mov	r4, r0
 800881a:	460d      	mov	r5, r1
 800881c:	f7f8 f994 	bl	8000b48 <__aeabi_dcmpgt>
 8008820:	b9c0      	cbnz	r0, 8008854 <_dtoa_r+0x6bc>
 8008822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f8 f965 	bl	8000af8 <__aeabi_dcmpeq>
 800882e:	b110      	cbz	r0, 8008836 <_dtoa_r+0x69e>
 8008830:	f018 0f01 	tst.w	r8, #1
 8008834:	d10e      	bne.n	8008854 <_dtoa_r+0x6bc>
 8008836:	9902      	ldr	r1, [sp, #8]
 8008838:	4648      	mov	r0, r9
 800883a:	f000 fbbd 	bl	8008fb8 <_Bfree>
 800883e:	2300      	movs	r3, #0
 8008840:	7033      	strb	r3, [r6, #0]
 8008842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008844:	3701      	adds	r7, #1
 8008846:	601f      	str	r7, [r3, #0]
 8008848:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 824b 	beq.w	8008ce6 <_dtoa_r+0xb4e>
 8008850:	601e      	str	r6, [r3, #0]
 8008852:	e248      	b.n	8008ce6 <_dtoa_r+0xb4e>
 8008854:	46b8      	mov	r8, r7
 8008856:	4633      	mov	r3, r6
 8008858:	461e      	mov	r6, r3
 800885a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885e:	2a39      	cmp	r2, #57	@ 0x39
 8008860:	d106      	bne.n	8008870 <_dtoa_r+0x6d8>
 8008862:	459a      	cmp	sl, r3
 8008864:	d1f8      	bne.n	8008858 <_dtoa_r+0x6c0>
 8008866:	2230      	movs	r2, #48	@ 0x30
 8008868:	f108 0801 	add.w	r8, r8, #1
 800886c:	f88a 2000 	strb.w	r2, [sl]
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	3201      	adds	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	e7a0      	b.n	80087ba <_dtoa_r+0x622>
 8008878:	4b6f      	ldr	r3, [pc, #444]	@ (8008a38 <_dtoa_r+0x8a0>)
 800887a:	2200      	movs	r2, #0
 800887c:	f7f7 fed4 	bl	8000628 <__aeabi_dmul>
 8008880:	2200      	movs	r2, #0
 8008882:	2300      	movs	r3, #0
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	f7f8 f936 	bl	8000af8 <__aeabi_dcmpeq>
 800888c:	2800      	cmp	r0, #0
 800888e:	d09f      	beq.n	80087d0 <_dtoa_r+0x638>
 8008890:	e7d1      	b.n	8008836 <_dtoa_r+0x69e>
 8008892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008894:	2a00      	cmp	r2, #0
 8008896:	f000 80ea 	beq.w	8008a6e <_dtoa_r+0x8d6>
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	2a01      	cmp	r2, #1
 800889e:	f300 80cd 	bgt.w	8008a3c <_dtoa_r+0x8a4>
 80088a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	f000 80c1 	beq.w	8008a2c <_dtoa_r+0x894>
 80088aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088ae:	9c08      	ldr	r4, [sp, #32]
 80088b0:	9e00      	ldr	r6, [sp, #0]
 80088b2:	9a00      	ldr	r2, [sp, #0]
 80088b4:	441a      	add	r2, r3
 80088b6:	9200      	str	r2, [sp, #0]
 80088b8:	9a06      	ldr	r2, [sp, #24]
 80088ba:	2101      	movs	r1, #1
 80088bc:	441a      	add	r2, r3
 80088be:	4648      	mov	r0, r9
 80088c0:	9206      	str	r2, [sp, #24]
 80088c2:	f000 fc2d 	bl	8009120 <__i2b>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b166      	cbz	r6, 80088e4 <_dtoa_r+0x74c>
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd09      	ble.n	80088e4 <_dtoa_r+0x74c>
 80088d0:	42b3      	cmp	r3, r6
 80088d2:	9a00      	ldr	r2, [sp, #0]
 80088d4:	bfa8      	it	ge
 80088d6:	4633      	movge	r3, r6
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	9200      	str	r2, [sp, #0]
 80088dc:	9a06      	ldr	r2, [sp, #24]
 80088de:	1af6      	subs	r6, r6, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	9b08      	ldr	r3, [sp, #32]
 80088e6:	b30b      	cbz	r3, 800892c <_dtoa_r+0x794>
 80088e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80c6 	beq.w	8008a7c <_dtoa_r+0x8e4>
 80088f0:	2c00      	cmp	r4, #0
 80088f2:	f000 80c0 	beq.w	8008a76 <_dtoa_r+0x8de>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4622      	mov	r2, r4
 80088fa:	4648      	mov	r0, r9
 80088fc:	f000 fcc8 	bl	8009290 <__pow5mult>
 8008900:	9a02      	ldr	r2, [sp, #8]
 8008902:	4601      	mov	r1, r0
 8008904:	4605      	mov	r5, r0
 8008906:	4648      	mov	r0, r9
 8008908:	f000 fc20 	bl	800914c <__multiply>
 800890c:	9902      	ldr	r1, [sp, #8]
 800890e:	4680      	mov	r8, r0
 8008910:	4648      	mov	r0, r9
 8008912:	f000 fb51 	bl	8008fb8 <_Bfree>
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	1b1b      	subs	r3, r3, r4
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	f000 80b1 	beq.w	8008a82 <_dtoa_r+0x8ea>
 8008920:	9a08      	ldr	r2, [sp, #32]
 8008922:	4641      	mov	r1, r8
 8008924:	4648      	mov	r0, r9
 8008926:	f000 fcb3 	bl	8009290 <__pow5mult>
 800892a:	9002      	str	r0, [sp, #8]
 800892c:	2101      	movs	r1, #1
 800892e:	4648      	mov	r0, r9
 8008930:	f000 fbf6 	bl	8009120 <__i2b>
 8008934:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008936:	4604      	mov	r4, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 81d8 	beq.w	8008cee <_dtoa_r+0xb56>
 800893e:	461a      	mov	r2, r3
 8008940:	4601      	mov	r1, r0
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fca4 	bl	8009290 <__pow5mult>
 8008948:	9b07      	ldr	r3, [sp, #28]
 800894a:	2b01      	cmp	r3, #1
 800894c:	4604      	mov	r4, r0
 800894e:	f300 809f 	bgt.w	8008a90 <_dtoa_r+0x8f8>
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f040 8097 	bne.w	8008a88 <_dtoa_r+0x8f0>
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 8093 	bne.w	8008a8c <_dtoa_r+0x8f4>
 8008966:	9b05      	ldr	r3, [sp, #20]
 8008968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800896c:	0d1b      	lsrs	r3, r3, #20
 800896e:	051b      	lsls	r3, r3, #20
 8008970:	b133      	cbz	r3, 8008980 <_dtoa_r+0x7e8>
 8008972:	9b00      	ldr	r3, [sp, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	9b06      	ldr	r3, [sp, #24]
 800897a:	3301      	adds	r3, #1
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	2301      	movs	r3, #1
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 81b8 	beq.w	8008cfa <_dtoa_r+0xb62>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008990:	6918      	ldr	r0, [r3, #16]
 8008992:	f000 fb79 	bl	8009088 <__hi0bits>
 8008996:	f1c0 0020 	rsb	r0, r0, #32
 800899a:	9b06      	ldr	r3, [sp, #24]
 800899c:	4418      	add	r0, r3
 800899e:	f010 001f 	ands.w	r0, r0, #31
 80089a2:	f000 8082 	beq.w	8008aaa <_dtoa_r+0x912>
 80089a6:	f1c0 0320 	rsb	r3, r0, #32
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	dd73      	ble.n	8008a96 <_dtoa_r+0x8fe>
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	f1c0 001c 	rsb	r0, r0, #28
 80089b4:	4403      	add	r3, r0
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	4403      	add	r3, r0
 80089bc:	4406      	add	r6, r0
 80089be:	9306      	str	r3, [sp, #24]
 80089c0:	9b00      	ldr	r3, [sp, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dd05      	ble.n	80089d2 <_dtoa_r+0x83a>
 80089c6:	9902      	ldr	r1, [sp, #8]
 80089c8:	461a      	mov	r2, r3
 80089ca:	4648      	mov	r0, r9
 80089cc:	f000 fcba 	bl	8009344 <__lshift>
 80089d0:	9002      	str	r0, [sp, #8]
 80089d2:	9b06      	ldr	r3, [sp, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd05      	ble.n	80089e4 <_dtoa_r+0x84c>
 80089d8:	4621      	mov	r1, r4
 80089da:	461a      	mov	r2, r3
 80089dc:	4648      	mov	r0, r9
 80089de:	f000 fcb1 	bl	8009344 <__lshift>
 80089e2:	4604      	mov	r4, r0
 80089e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d061      	beq.n	8008aae <_dtoa_r+0x916>
 80089ea:	9802      	ldr	r0, [sp, #8]
 80089ec:	4621      	mov	r1, r4
 80089ee:	f000 fd15 	bl	800941c <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	da5b      	bge.n	8008aae <_dtoa_r+0x916>
 80089f6:	2300      	movs	r3, #0
 80089f8:	9902      	ldr	r1, [sp, #8]
 80089fa:	220a      	movs	r2, #10
 80089fc:	4648      	mov	r0, r9
 80089fe:	f000 fafd 	bl	8008ffc <__multadd>
 8008a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 8177 	beq.w	8008cfe <_dtoa_r+0xb66>
 8008a10:	4629      	mov	r1, r5
 8008a12:	2300      	movs	r3, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	4648      	mov	r0, r9
 8008a18:	f000 faf0 	bl	8008ffc <__multadd>
 8008a1c:	f1bb 0f00 	cmp.w	fp, #0
 8008a20:	4605      	mov	r5, r0
 8008a22:	dc6f      	bgt.n	8008b04 <_dtoa_r+0x96c>
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	dc49      	bgt.n	8008abe <_dtoa_r+0x926>
 8008a2a:	e06b      	b.n	8008b04 <_dtoa_r+0x96c>
 8008a2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a32:	e73c      	b.n	80088ae <_dtoa_r+0x716>
 8008a34:	3fe00000 	.word	0x3fe00000
 8008a38:	40240000 	.word	0x40240000
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	1e5c      	subs	r4, r3, #1
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	db09      	blt.n	8008a5a <_dtoa_r+0x8c2>
 8008a46:	1b1c      	subs	r4, r3, r4
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f6bf af30 	bge.w	80088b0 <_dtoa_r+0x718>
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	9a03      	ldr	r2, [sp, #12]
 8008a54:	1a9e      	subs	r6, r3, r2
 8008a56:	2300      	movs	r3, #0
 8008a58:	e72b      	b.n	80088b2 <_dtoa_r+0x71a>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a5e:	9408      	str	r4, [sp, #32]
 8008a60:	1ae3      	subs	r3, r4, r3
 8008a62:	441a      	add	r2, r3
 8008a64:	9e00      	ldr	r6, [sp, #0]
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	920d      	str	r2, [sp, #52]	@ 0x34
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	e721      	b.n	80088b2 <_dtoa_r+0x71a>
 8008a6e:	9c08      	ldr	r4, [sp, #32]
 8008a70:	9e00      	ldr	r6, [sp, #0]
 8008a72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008a74:	e728      	b.n	80088c8 <_dtoa_r+0x730>
 8008a76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008a7a:	e751      	b.n	8008920 <_dtoa_r+0x788>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	9902      	ldr	r1, [sp, #8]
 8008a80:	e750      	b.n	8008924 <_dtoa_r+0x78c>
 8008a82:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a86:	e751      	b.n	800892c <_dtoa_r+0x794>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e779      	b.n	8008980 <_dtoa_r+0x7e8>
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	e777      	b.n	8008980 <_dtoa_r+0x7e8>
 8008a90:	2300      	movs	r3, #0
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	e779      	b.n	800898a <_dtoa_r+0x7f2>
 8008a96:	d093      	beq.n	80089c0 <_dtoa_r+0x828>
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	331c      	adds	r3, #28
 8008a9c:	441a      	add	r2, r3
 8008a9e:	9200      	str	r2, [sp, #0]
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	441e      	add	r6, r3
 8008aa6:	9206      	str	r2, [sp, #24]
 8008aa8:	e78a      	b.n	80089c0 <_dtoa_r+0x828>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	e7f4      	b.n	8008a98 <_dtoa_r+0x900>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	46b8      	mov	r8, r7
 8008ab4:	dc20      	bgt.n	8008af8 <_dtoa_r+0x960>
 8008ab6:	469b      	mov	fp, r3
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	dd1e      	ble.n	8008afc <_dtoa_r+0x964>
 8008abe:	f1bb 0f00 	cmp.w	fp, #0
 8008ac2:	f47f adb1 	bne.w	8008628 <_dtoa_r+0x490>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	465b      	mov	r3, fp
 8008aca:	2205      	movs	r2, #5
 8008acc:	4648      	mov	r0, r9
 8008ace:	f000 fa95 	bl	8008ffc <__multadd>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	9802      	ldr	r0, [sp, #8]
 8008ad8:	f000 fca0 	bl	800941c <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f77f ada3 	ble.w	8008628 <_dtoa_r+0x490>
 8008ae2:	4656      	mov	r6, sl
 8008ae4:	2331      	movs	r3, #49	@ 0x31
 8008ae6:	f806 3b01 	strb.w	r3, [r6], #1
 8008aea:	f108 0801 	add.w	r8, r8, #1
 8008aee:	e59f      	b.n	8008630 <_dtoa_r+0x498>
 8008af0:	9c03      	ldr	r4, [sp, #12]
 8008af2:	46b8      	mov	r8, r7
 8008af4:	4625      	mov	r5, r4
 8008af6:	e7f4      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008af8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8101 	beq.w	8008d06 <_dtoa_r+0xb6e>
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	dd05      	ble.n	8008b14 <_dtoa_r+0x97c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	f000 fc19 	bl	8009344 <__lshift>
 8008b12:	4605      	mov	r5, r0
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d05c      	beq.n	8008bd4 <_dtoa_r+0xa3c>
 8008b1a:	6869      	ldr	r1, [r5, #4]
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 fa0b 	bl	8008f38 <_Balloc>
 8008b22:	4606      	mov	r6, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <_dtoa_r+0x99a>
 8008b26:	4b82      	ldr	r3, [pc, #520]	@ (8008d30 <_dtoa_r+0xb98>)
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b2e:	f7ff bb4a 	b.w	80081c6 <_dtoa_r+0x2e>
 8008b32:	692a      	ldr	r2, [r5, #16]
 8008b34:	3202      	adds	r2, #2
 8008b36:	0092      	lsls	r2, r2, #2
 8008b38:	f105 010c 	add.w	r1, r5, #12
 8008b3c:	300c      	adds	r0, #12
 8008b3e:	f000 ffa3 	bl	8009a88 <memcpy>
 8008b42:	2201      	movs	r2, #1
 8008b44:	4631      	mov	r1, r6
 8008b46:	4648      	mov	r0, r9
 8008b48:	f000 fbfc 	bl	8009344 <__lshift>
 8008b4c:	f10a 0301 	add.w	r3, sl, #1
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	eb0a 030b 	add.w	r3, sl, fp
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	462f      	mov	r7, r5
 8008b60:	9306      	str	r3, [sp, #24]
 8008b62:	4605      	mov	r5, r0
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	9802      	ldr	r0, [sp, #8]
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b6e:	f7ff fa8a 	bl	8008086 <quorem>
 8008b72:	4603      	mov	r3, r0
 8008b74:	3330      	adds	r3, #48	@ 0x30
 8008b76:	9003      	str	r0, [sp, #12]
 8008b78:	4639      	mov	r1, r7
 8008b7a:	9802      	ldr	r0, [sp, #8]
 8008b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7e:	f000 fc4d 	bl	800941c <__mcmp>
 8008b82:	462a      	mov	r2, r5
 8008b84:	9004      	str	r0, [sp, #16]
 8008b86:	4621      	mov	r1, r4
 8008b88:	4648      	mov	r0, r9
 8008b8a:	f000 fc63 	bl	8009454 <__mdiff>
 8008b8e:	68c2      	ldr	r2, [r0, #12]
 8008b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b92:	4606      	mov	r6, r0
 8008b94:	bb02      	cbnz	r2, 8008bd8 <_dtoa_r+0xa40>
 8008b96:	4601      	mov	r1, r0
 8008b98:	9802      	ldr	r0, [sp, #8]
 8008b9a:	f000 fc3f 	bl	800941c <__mcmp>
 8008b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008baa:	f000 fa05 	bl	8008fb8 <_Bfree>
 8008bae:	9b07      	ldr	r3, [sp, #28]
 8008bb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008bb2:	9e00      	ldr	r6, [sp, #0]
 8008bb4:	ea42 0103 	orr.w	r1, r2, r3
 8008bb8:	9b06      	ldr	r3, [sp, #24]
 8008bba:	4319      	orrs	r1, r3
 8008bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbe:	d10d      	bne.n	8008bdc <_dtoa_r+0xa44>
 8008bc0:	2b39      	cmp	r3, #57	@ 0x39
 8008bc2:	d027      	beq.n	8008c14 <_dtoa_r+0xa7c>
 8008bc4:	9a04      	ldr	r2, [sp, #16]
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	dd01      	ble.n	8008bce <_dtoa_r+0xa36>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	3331      	adds	r3, #49	@ 0x31
 8008bce:	f88b 3000 	strb.w	r3, [fp]
 8008bd2:	e52e      	b.n	8008632 <_dtoa_r+0x49a>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e7b9      	b.n	8008b4c <_dtoa_r+0x9b4>
 8008bd8:	2201      	movs	r2, #1
 8008bda:	e7e2      	b.n	8008ba2 <_dtoa_r+0xa0a>
 8008bdc:	9904      	ldr	r1, [sp, #16]
 8008bde:	2900      	cmp	r1, #0
 8008be0:	db04      	blt.n	8008bec <_dtoa_r+0xa54>
 8008be2:	9807      	ldr	r0, [sp, #28]
 8008be4:	4301      	orrs	r1, r0
 8008be6:	9806      	ldr	r0, [sp, #24]
 8008be8:	4301      	orrs	r1, r0
 8008bea:	d120      	bne.n	8008c2e <_dtoa_r+0xa96>
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	ddee      	ble.n	8008bce <_dtoa_r+0xa36>
 8008bf0:	9902      	ldr	r1, [sp, #8]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4648      	mov	r0, r9
 8008bf8:	f000 fba4 	bl	8009344 <__lshift>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	9002      	str	r0, [sp, #8]
 8008c00:	f000 fc0c 	bl	800941c <__mcmp>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	dc02      	bgt.n	8008c10 <_dtoa_r+0xa78>
 8008c0a:	d1e0      	bne.n	8008bce <_dtoa_r+0xa36>
 8008c0c:	07da      	lsls	r2, r3, #31
 8008c0e:	d5de      	bpl.n	8008bce <_dtoa_r+0xa36>
 8008c10:	2b39      	cmp	r3, #57	@ 0x39
 8008c12:	d1da      	bne.n	8008bca <_dtoa_r+0xa32>
 8008c14:	2339      	movs	r3, #57	@ 0x39
 8008c16:	f88b 3000 	strb.w	r3, [fp]
 8008c1a:	4633      	mov	r3, r6
 8008c1c:	461e      	mov	r6, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c24:	2a39      	cmp	r2, #57	@ 0x39
 8008c26:	d04e      	beq.n	8008cc6 <_dtoa_r+0xb2e>
 8008c28:	3201      	adds	r2, #1
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e501      	b.n	8008632 <_dtoa_r+0x49a>
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	dd03      	ble.n	8008c3a <_dtoa_r+0xaa2>
 8008c32:	2b39      	cmp	r3, #57	@ 0x39
 8008c34:	d0ee      	beq.n	8008c14 <_dtoa_r+0xa7c>
 8008c36:	3301      	adds	r3, #1
 8008c38:	e7c9      	b.n	8008bce <_dtoa_r+0xa36>
 8008c3a:	9a00      	ldr	r2, [sp, #0]
 8008c3c:	9908      	ldr	r1, [sp, #32]
 8008c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c42:	428a      	cmp	r2, r1
 8008c44:	d028      	beq.n	8008c98 <_dtoa_r+0xb00>
 8008c46:	9902      	ldr	r1, [sp, #8]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	220a      	movs	r2, #10
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f000 f9d5 	bl	8008ffc <__multadd>
 8008c52:	42af      	cmp	r7, r5
 8008c54:	9002      	str	r0, [sp, #8]
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	f04f 020a 	mov.w	r2, #10
 8008c5e:	4639      	mov	r1, r7
 8008c60:	4648      	mov	r0, r9
 8008c62:	d107      	bne.n	8008c74 <_dtoa_r+0xadc>
 8008c64:	f000 f9ca 	bl	8008ffc <__multadd>
 8008c68:	4607      	mov	r7, r0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	e777      	b.n	8008b64 <_dtoa_r+0x9cc>
 8008c74:	f000 f9c2 	bl	8008ffc <__multadd>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	220a      	movs	r2, #10
 8008c80:	4648      	mov	r0, r9
 8008c82:	f000 f9bb 	bl	8008ffc <__multadd>
 8008c86:	4605      	mov	r5, r0
 8008c88:	e7f0      	b.n	8008c6c <_dtoa_r+0xad4>
 8008c8a:	f1bb 0f00 	cmp.w	fp, #0
 8008c8e:	bfcc      	ite	gt
 8008c90:	465e      	movgt	r6, fp
 8008c92:	2601      	movle	r6, #1
 8008c94:	4456      	add	r6, sl
 8008c96:	2700      	movs	r7, #0
 8008c98:	9902      	ldr	r1, [sp, #8]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	f000 fb50 	bl	8009344 <__lshift>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	9002      	str	r0, [sp, #8]
 8008ca8:	f000 fbb8 	bl	800941c <__mcmp>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dcb4      	bgt.n	8008c1a <_dtoa_r+0xa82>
 8008cb0:	d102      	bne.n	8008cb8 <_dtoa_r+0xb20>
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d4b0      	bmi.n	8008c1a <_dtoa_r+0xa82>
 8008cb8:	4633      	mov	r3, r6
 8008cba:	461e      	mov	r6, r3
 8008cbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cc0:	2a30      	cmp	r2, #48	@ 0x30
 8008cc2:	d0fa      	beq.n	8008cba <_dtoa_r+0xb22>
 8008cc4:	e4b5      	b.n	8008632 <_dtoa_r+0x49a>
 8008cc6:	459a      	cmp	sl, r3
 8008cc8:	d1a8      	bne.n	8008c1c <_dtoa_r+0xa84>
 8008cca:	2331      	movs	r3, #49	@ 0x31
 8008ccc:	f108 0801 	add.w	r8, r8, #1
 8008cd0:	f88a 3000 	strb.w	r3, [sl]
 8008cd4:	e4ad      	b.n	8008632 <_dtoa_r+0x49a>
 8008cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cd8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008d34 <_dtoa_r+0xb9c>
 8008cdc:	b11b      	cbz	r3, 8008ce6 <_dtoa_r+0xb4e>
 8008cde:	f10a 0308 	add.w	r3, sl, #8
 8008ce2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	b017      	add	sp, #92	@ 0x5c
 8008cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cee:	9b07      	ldr	r3, [sp, #28]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	f77f ae2e 	ble.w	8008952 <_dtoa_r+0x7ba>
 8008cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	e64d      	b.n	800899a <_dtoa_r+0x802>
 8008cfe:	f1bb 0f00 	cmp.w	fp, #0
 8008d02:	f77f aed9 	ble.w	8008ab8 <_dtoa_r+0x920>
 8008d06:	4656      	mov	r6, sl
 8008d08:	9802      	ldr	r0, [sp, #8]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	f7ff f9bb 	bl	8008086 <quorem>
 8008d10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008d14:	f806 3b01 	strb.w	r3, [r6], #1
 8008d18:	eba6 020a 	sub.w	r2, r6, sl
 8008d1c:	4593      	cmp	fp, r2
 8008d1e:	ddb4      	ble.n	8008c8a <_dtoa_r+0xaf2>
 8008d20:	9902      	ldr	r1, [sp, #8]
 8008d22:	2300      	movs	r3, #0
 8008d24:	220a      	movs	r2, #10
 8008d26:	4648      	mov	r0, r9
 8008d28:	f000 f968 	bl	8008ffc <__multadd>
 8008d2c:	9002      	str	r0, [sp, #8]
 8008d2e:	e7eb      	b.n	8008d08 <_dtoa_r+0xb70>
 8008d30:	0800a320 	.word	0x0800a320
 8008d34:	0800a2a4 	.word	0x0800a2a4

08008d38 <_free_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d041      	beq.n	8008dc4 <_free_r+0x8c>
 8008d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d44:	1f0c      	subs	r4, r1, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfb8      	it	lt
 8008d4a:	18e4      	addlt	r4, r4, r3
 8008d4c:	f000 f8e8 	bl	8008f20 <__malloc_lock>
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <_free_r+0x90>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x2c>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d60:	f000 b8e4 	b.w	8008f2c <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x1e>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x4c>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x42>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1850      	adds	r0, r2, r1
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x6c>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4401      	add	r1, r0
 8008d90:	1850      	adds	r0, r2, r1
 8008d92:	4283      	cmp	r3, r0
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x22>
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4408      	add	r0, r1
 8008da0:	6010      	str	r0, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x22>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x74>
 8008da6:	230c      	movs	r3, #12
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x22>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1809      	addeq	r1, r1, r0
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x22>
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2004062c 	.word	0x2004062c

08008dcc <malloc>:
 8008dcc:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <malloc+0xc>)
 8008dce:	4601      	mov	r1, r0
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	f000 b825 	b.w	8008e20 <_malloc_r>
 8008dd6:	bf00      	nop
 8008dd8:	20040018 	.word	0x20040018

08008ddc <sbrk_aligned>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	4e0f      	ldr	r6, [pc, #60]	@ (8008e1c <sbrk_aligned+0x40>)
 8008de0:	460c      	mov	r4, r1
 8008de2:	6831      	ldr	r1, [r6, #0]
 8008de4:	4605      	mov	r5, r0
 8008de6:	b911      	cbnz	r1, 8008dee <sbrk_aligned+0x12>
 8008de8:	f000 fe3e 	bl	8009a68 <_sbrk_r>
 8008dec:	6030      	str	r0, [r6, #0]
 8008dee:	4621      	mov	r1, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 fe39 	bl	8009a68 <_sbrk_r>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d103      	bne.n	8008e02 <sbrk_aligned+0x26>
 8008dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8008dfe:	4620      	mov	r0, r4
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
 8008e02:	1cc4      	adds	r4, r0, #3
 8008e04:	f024 0403 	bic.w	r4, r4, #3
 8008e08:	42a0      	cmp	r0, r4
 8008e0a:	d0f8      	beq.n	8008dfe <sbrk_aligned+0x22>
 8008e0c:	1a21      	subs	r1, r4, r0
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f000 fe2a 	bl	8009a68 <_sbrk_r>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d1f2      	bne.n	8008dfe <sbrk_aligned+0x22>
 8008e18:	e7ef      	b.n	8008dfa <sbrk_aligned+0x1e>
 8008e1a:	bf00      	nop
 8008e1c:	20040628 	.word	0x20040628

08008e20 <_malloc_r>:
 8008e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e24:	1ccd      	adds	r5, r1, #3
 8008e26:	f025 0503 	bic.w	r5, r5, #3
 8008e2a:	3508      	adds	r5, #8
 8008e2c:	2d0c      	cmp	r5, #12
 8008e2e:	bf38      	it	cc
 8008e30:	250c      	movcc	r5, #12
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	4606      	mov	r6, r0
 8008e36:	db01      	blt.n	8008e3c <_malloc_r+0x1c>
 8008e38:	42a9      	cmp	r1, r5
 8008e3a:	d904      	bls.n	8008e46 <_malloc_r+0x26>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	6033      	str	r3, [r6, #0]
 8008e40:	2000      	movs	r0, #0
 8008e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f1c <_malloc_r+0xfc>
 8008e4a:	f000 f869 	bl	8008f20 <__malloc_lock>
 8008e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e52:	461c      	mov	r4, r3
 8008e54:	bb44      	cbnz	r4, 8008ea8 <_malloc_r+0x88>
 8008e56:	4629      	mov	r1, r5
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff ffbf 	bl	8008ddc <sbrk_aligned>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	4604      	mov	r4, r0
 8008e62:	d158      	bne.n	8008f16 <_malloc_r+0xf6>
 8008e64:	f8d8 4000 	ldr.w	r4, [r8]
 8008e68:	4627      	mov	r7, r4
 8008e6a:	2f00      	cmp	r7, #0
 8008e6c:	d143      	bne.n	8008ef6 <_malloc_r+0xd6>
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d04b      	beq.n	8008f0a <_malloc_r+0xea>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	4639      	mov	r1, r7
 8008e76:	4630      	mov	r0, r6
 8008e78:	eb04 0903 	add.w	r9, r4, r3
 8008e7c:	f000 fdf4 	bl	8009a68 <_sbrk_r>
 8008e80:	4581      	cmp	r9, r0
 8008e82:	d142      	bne.n	8008f0a <_malloc_r+0xea>
 8008e84:	6821      	ldr	r1, [r4, #0]
 8008e86:	1a6d      	subs	r5, r5, r1
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ffa6 	bl	8008ddc <sbrk_aligned>
 8008e90:	3001      	adds	r0, #1
 8008e92:	d03a      	beq.n	8008f0a <_malloc_r+0xea>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	442b      	add	r3, r5
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	bb62      	cbnz	r2, 8008efc <_malloc_r+0xdc>
 8008ea2:	f8c8 7000 	str.w	r7, [r8]
 8008ea6:	e00f      	b.n	8008ec8 <_malloc_r+0xa8>
 8008ea8:	6822      	ldr	r2, [r4, #0]
 8008eaa:	1b52      	subs	r2, r2, r5
 8008eac:	d420      	bmi.n	8008ef0 <_malloc_r+0xd0>
 8008eae:	2a0b      	cmp	r2, #11
 8008eb0:	d917      	bls.n	8008ee2 <_malloc_r+0xc2>
 8008eb2:	1961      	adds	r1, r4, r5
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	6025      	str	r5, [r4, #0]
 8008eb8:	bf18      	it	ne
 8008eba:	6059      	strne	r1, [r3, #4]
 8008ebc:	6863      	ldr	r3, [r4, #4]
 8008ebe:	bf08      	it	eq
 8008ec0:	f8c8 1000 	streq.w	r1, [r8]
 8008ec4:	5162      	str	r2, [r4, r5]
 8008ec6:	604b      	str	r3, [r1, #4]
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 f82f 	bl	8008f2c <__malloc_unlock>
 8008ece:	f104 000b 	add.w	r0, r4, #11
 8008ed2:	1d23      	adds	r3, r4, #4
 8008ed4:	f020 0007 	bic.w	r0, r0, #7
 8008ed8:	1ac2      	subs	r2, r0, r3
 8008eda:	bf1c      	itt	ne
 8008edc:	1a1b      	subne	r3, r3, r0
 8008ede:	50a3      	strne	r3, [r4, r2]
 8008ee0:	e7af      	b.n	8008e42 <_malloc_r+0x22>
 8008ee2:	6862      	ldr	r2, [r4, #4]
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	bf0c      	ite	eq
 8008ee8:	f8c8 2000 	streq.w	r2, [r8]
 8008eec:	605a      	strne	r2, [r3, #4]
 8008eee:	e7eb      	b.n	8008ec8 <_malloc_r+0xa8>
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	6864      	ldr	r4, [r4, #4]
 8008ef4:	e7ae      	b.n	8008e54 <_malloc_r+0x34>
 8008ef6:	463c      	mov	r4, r7
 8008ef8:	687f      	ldr	r7, [r7, #4]
 8008efa:	e7b6      	b.n	8008e6a <_malloc_r+0x4a>
 8008efc:	461a      	mov	r2, r3
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	d1fb      	bne.n	8008efc <_malloc_r+0xdc>
 8008f04:	2300      	movs	r3, #0
 8008f06:	6053      	str	r3, [r2, #4]
 8008f08:	e7de      	b.n	8008ec8 <_malloc_r+0xa8>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	6033      	str	r3, [r6, #0]
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f000 f80c 	bl	8008f2c <__malloc_unlock>
 8008f14:	e794      	b.n	8008e40 <_malloc_r+0x20>
 8008f16:	6005      	str	r5, [r0, #0]
 8008f18:	e7d6      	b.n	8008ec8 <_malloc_r+0xa8>
 8008f1a:	bf00      	nop
 8008f1c:	2004062c 	.word	0x2004062c

08008f20 <__malloc_lock>:
 8008f20:	4801      	ldr	r0, [pc, #4]	@ (8008f28 <__malloc_lock+0x8>)
 8008f22:	f7ff b8ae 	b.w	8008082 <__retarget_lock_acquire_recursive>
 8008f26:	bf00      	nop
 8008f28:	20040624 	.word	0x20040624

08008f2c <__malloc_unlock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	@ (8008f34 <__malloc_unlock+0x8>)
 8008f2e:	f7ff b8a9 	b.w	8008084 <__retarget_lock_release_recursive>
 8008f32:	bf00      	nop
 8008f34:	20040624 	.word	0x20040624

08008f38 <_Balloc>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	69c6      	ldr	r6, [r0, #28]
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	460d      	mov	r5, r1
 8008f40:	b976      	cbnz	r6, 8008f60 <_Balloc+0x28>
 8008f42:	2010      	movs	r0, #16
 8008f44:	f7ff ff42 	bl	8008dcc <malloc>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	61e0      	str	r0, [r4, #28]
 8008f4c:	b920      	cbnz	r0, 8008f58 <_Balloc+0x20>
 8008f4e:	4b18      	ldr	r3, [pc, #96]	@ (8008fb0 <_Balloc+0x78>)
 8008f50:	4818      	ldr	r0, [pc, #96]	@ (8008fb4 <_Balloc+0x7c>)
 8008f52:	216b      	movs	r1, #107	@ 0x6b
 8008f54:	f000 fda6 	bl	8009aa4 <__assert_func>
 8008f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f5c:	6006      	str	r6, [r0, #0]
 8008f5e:	60c6      	str	r6, [r0, #12]
 8008f60:	69e6      	ldr	r6, [r4, #28]
 8008f62:	68f3      	ldr	r3, [r6, #12]
 8008f64:	b183      	cbz	r3, 8008f88 <_Balloc+0x50>
 8008f66:	69e3      	ldr	r3, [r4, #28]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f6e:	b9b8      	cbnz	r0, 8008fa0 <_Balloc+0x68>
 8008f70:	2101      	movs	r1, #1
 8008f72:	fa01 f605 	lsl.w	r6, r1, r5
 8008f76:	1d72      	adds	r2, r6, #5
 8008f78:	0092      	lsls	r2, r2, #2
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fdb0 	bl	8009ae0 <_calloc_r>
 8008f80:	b160      	cbz	r0, 8008f9c <_Balloc+0x64>
 8008f82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f86:	e00e      	b.n	8008fa6 <_Balloc+0x6e>
 8008f88:	2221      	movs	r2, #33	@ 0x21
 8008f8a:	2104      	movs	r1, #4
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fda7 	bl	8009ae0 <_calloc_r>
 8008f92:	69e3      	ldr	r3, [r4, #28]
 8008f94:	60f0      	str	r0, [r6, #12]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e4      	bne.n	8008f66 <_Balloc+0x2e>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	6802      	ldr	r2, [r0, #0]
 8008fa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fac:	e7f7      	b.n	8008f9e <_Balloc+0x66>
 8008fae:	bf00      	nop
 8008fb0:	0800a2b1 	.word	0x0800a2b1
 8008fb4:	0800a331 	.word	0x0800a331

08008fb8 <_Bfree>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	69c6      	ldr	r6, [r0, #28]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	b976      	cbnz	r6, 8008fe0 <_Bfree+0x28>
 8008fc2:	2010      	movs	r0, #16
 8008fc4:	f7ff ff02 	bl	8008dcc <malloc>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	61e8      	str	r0, [r5, #28]
 8008fcc:	b920      	cbnz	r0, 8008fd8 <_Bfree+0x20>
 8008fce:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <_Bfree+0x3c>)
 8008fd0:	4809      	ldr	r0, [pc, #36]	@ (8008ff8 <_Bfree+0x40>)
 8008fd2:	218f      	movs	r1, #143	@ 0x8f
 8008fd4:	f000 fd66 	bl	8009aa4 <__assert_func>
 8008fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fdc:	6006      	str	r6, [r0, #0]
 8008fde:	60c6      	str	r6, [r0, #12]
 8008fe0:	b13c      	cbz	r4, 8008ff2 <_Bfree+0x3a>
 8008fe2:	69eb      	ldr	r3, [r5, #28]
 8008fe4:	6862      	ldr	r2, [r4, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fec:	6021      	str	r1, [r4, #0]
 8008fee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	0800a2b1 	.word	0x0800a2b1
 8008ff8:	0800a331 	.word	0x0800a331

08008ffc <__multadd>:
 8008ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009000:	690d      	ldr	r5, [r1, #16]
 8009002:	4607      	mov	r7, r0
 8009004:	460c      	mov	r4, r1
 8009006:	461e      	mov	r6, r3
 8009008:	f101 0c14 	add.w	ip, r1, #20
 800900c:	2000      	movs	r0, #0
 800900e:	f8dc 3000 	ldr.w	r3, [ip]
 8009012:	b299      	uxth	r1, r3
 8009014:	fb02 6101 	mla	r1, r2, r1, r6
 8009018:	0c1e      	lsrs	r6, r3, #16
 800901a:	0c0b      	lsrs	r3, r1, #16
 800901c:	fb02 3306 	mla	r3, r2, r6, r3
 8009020:	b289      	uxth	r1, r1
 8009022:	3001      	adds	r0, #1
 8009024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009028:	4285      	cmp	r5, r0
 800902a:	f84c 1b04 	str.w	r1, [ip], #4
 800902e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009032:	dcec      	bgt.n	800900e <__multadd+0x12>
 8009034:	b30e      	cbz	r6, 800907a <__multadd+0x7e>
 8009036:	68a3      	ldr	r3, [r4, #8]
 8009038:	42ab      	cmp	r3, r5
 800903a:	dc19      	bgt.n	8009070 <__multadd+0x74>
 800903c:	6861      	ldr	r1, [r4, #4]
 800903e:	4638      	mov	r0, r7
 8009040:	3101      	adds	r1, #1
 8009042:	f7ff ff79 	bl	8008f38 <_Balloc>
 8009046:	4680      	mov	r8, r0
 8009048:	b928      	cbnz	r0, 8009056 <__multadd+0x5a>
 800904a:	4602      	mov	r2, r0
 800904c:	4b0c      	ldr	r3, [pc, #48]	@ (8009080 <__multadd+0x84>)
 800904e:	480d      	ldr	r0, [pc, #52]	@ (8009084 <__multadd+0x88>)
 8009050:	21ba      	movs	r1, #186	@ 0xba
 8009052:	f000 fd27 	bl	8009aa4 <__assert_func>
 8009056:	6922      	ldr	r2, [r4, #16]
 8009058:	3202      	adds	r2, #2
 800905a:	f104 010c 	add.w	r1, r4, #12
 800905e:	0092      	lsls	r2, r2, #2
 8009060:	300c      	adds	r0, #12
 8009062:	f000 fd11 	bl	8009a88 <memcpy>
 8009066:	4621      	mov	r1, r4
 8009068:	4638      	mov	r0, r7
 800906a:	f7ff ffa5 	bl	8008fb8 <_Bfree>
 800906e:	4644      	mov	r4, r8
 8009070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009074:	3501      	adds	r5, #1
 8009076:	615e      	str	r6, [r3, #20]
 8009078:	6125      	str	r5, [r4, #16]
 800907a:	4620      	mov	r0, r4
 800907c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009080:	0800a320 	.word	0x0800a320
 8009084:	0800a331 	.word	0x0800a331

08009088 <__hi0bits>:
 8009088:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800908c:	4603      	mov	r3, r0
 800908e:	bf36      	itet	cc
 8009090:	0403      	lslcc	r3, r0, #16
 8009092:	2000      	movcs	r0, #0
 8009094:	2010      	movcc	r0, #16
 8009096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800909a:	bf3c      	itt	cc
 800909c:	021b      	lslcc	r3, r3, #8
 800909e:	3008      	addcc	r0, #8
 80090a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090a4:	bf3c      	itt	cc
 80090a6:	011b      	lslcc	r3, r3, #4
 80090a8:	3004      	addcc	r0, #4
 80090aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ae:	bf3c      	itt	cc
 80090b0:	009b      	lslcc	r3, r3, #2
 80090b2:	3002      	addcc	r0, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	db05      	blt.n	80090c4 <__hi0bits+0x3c>
 80090b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090bc:	f100 0001 	add.w	r0, r0, #1
 80090c0:	bf08      	it	eq
 80090c2:	2020      	moveq	r0, #32
 80090c4:	4770      	bx	lr

080090c6 <__lo0bits>:
 80090c6:	6803      	ldr	r3, [r0, #0]
 80090c8:	4602      	mov	r2, r0
 80090ca:	f013 0007 	ands.w	r0, r3, #7
 80090ce:	d00b      	beq.n	80090e8 <__lo0bits+0x22>
 80090d0:	07d9      	lsls	r1, r3, #31
 80090d2:	d421      	bmi.n	8009118 <__lo0bits+0x52>
 80090d4:	0798      	lsls	r0, r3, #30
 80090d6:	bf49      	itett	mi
 80090d8:	085b      	lsrmi	r3, r3, #1
 80090da:	089b      	lsrpl	r3, r3, #2
 80090dc:	2001      	movmi	r0, #1
 80090de:	6013      	strmi	r3, [r2, #0]
 80090e0:	bf5c      	itt	pl
 80090e2:	6013      	strpl	r3, [r2, #0]
 80090e4:	2002      	movpl	r0, #2
 80090e6:	4770      	bx	lr
 80090e8:	b299      	uxth	r1, r3
 80090ea:	b909      	cbnz	r1, 80090f0 <__lo0bits+0x2a>
 80090ec:	0c1b      	lsrs	r3, r3, #16
 80090ee:	2010      	movs	r0, #16
 80090f0:	b2d9      	uxtb	r1, r3
 80090f2:	b909      	cbnz	r1, 80090f8 <__lo0bits+0x32>
 80090f4:	3008      	adds	r0, #8
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	0719      	lsls	r1, r3, #28
 80090fa:	bf04      	itt	eq
 80090fc:	091b      	lsreq	r3, r3, #4
 80090fe:	3004      	addeq	r0, #4
 8009100:	0799      	lsls	r1, r3, #30
 8009102:	bf04      	itt	eq
 8009104:	089b      	lsreq	r3, r3, #2
 8009106:	3002      	addeq	r0, #2
 8009108:	07d9      	lsls	r1, r3, #31
 800910a:	d403      	bmi.n	8009114 <__lo0bits+0x4e>
 800910c:	085b      	lsrs	r3, r3, #1
 800910e:	f100 0001 	add.w	r0, r0, #1
 8009112:	d003      	beq.n	800911c <__lo0bits+0x56>
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	4770      	bx	lr
 8009118:	2000      	movs	r0, #0
 800911a:	4770      	bx	lr
 800911c:	2020      	movs	r0, #32
 800911e:	4770      	bx	lr

08009120 <__i2b>:
 8009120:	b510      	push	{r4, lr}
 8009122:	460c      	mov	r4, r1
 8009124:	2101      	movs	r1, #1
 8009126:	f7ff ff07 	bl	8008f38 <_Balloc>
 800912a:	4602      	mov	r2, r0
 800912c:	b928      	cbnz	r0, 800913a <__i2b+0x1a>
 800912e:	4b05      	ldr	r3, [pc, #20]	@ (8009144 <__i2b+0x24>)
 8009130:	4805      	ldr	r0, [pc, #20]	@ (8009148 <__i2b+0x28>)
 8009132:	f240 1145 	movw	r1, #325	@ 0x145
 8009136:	f000 fcb5 	bl	8009aa4 <__assert_func>
 800913a:	2301      	movs	r3, #1
 800913c:	6144      	str	r4, [r0, #20]
 800913e:	6103      	str	r3, [r0, #16]
 8009140:	bd10      	pop	{r4, pc}
 8009142:	bf00      	nop
 8009144:	0800a320 	.word	0x0800a320
 8009148:	0800a331 	.word	0x0800a331

0800914c <__multiply>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	4617      	mov	r7, r2
 8009152:	690a      	ldr	r2, [r1, #16]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	bfa8      	it	ge
 800915a:	463b      	movge	r3, r7
 800915c:	4689      	mov	r9, r1
 800915e:	bfa4      	itt	ge
 8009160:	460f      	movge	r7, r1
 8009162:	4699      	movge	r9, r3
 8009164:	693d      	ldr	r5, [r7, #16]
 8009166:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	eb05 060a 	add.w	r6, r5, sl
 8009172:	42b3      	cmp	r3, r6
 8009174:	b085      	sub	sp, #20
 8009176:	bfb8      	it	lt
 8009178:	3101      	addlt	r1, #1
 800917a:	f7ff fedd 	bl	8008f38 <_Balloc>
 800917e:	b930      	cbnz	r0, 800918e <__multiply+0x42>
 8009180:	4602      	mov	r2, r0
 8009182:	4b41      	ldr	r3, [pc, #260]	@ (8009288 <__multiply+0x13c>)
 8009184:	4841      	ldr	r0, [pc, #260]	@ (800928c <__multiply+0x140>)
 8009186:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800918a:	f000 fc8b 	bl	8009aa4 <__assert_func>
 800918e:	f100 0414 	add.w	r4, r0, #20
 8009192:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009196:	4623      	mov	r3, r4
 8009198:	2200      	movs	r2, #0
 800919a:	4573      	cmp	r3, lr
 800919c:	d320      	bcc.n	80091e0 <__multiply+0x94>
 800919e:	f107 0814 	add.w	r8, r7, #20
 80091a2:	f109 0114 	add.w	r1, r9, #20
 80091a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80091aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80091ae:	9302      	str	r3, [sp, #8]
 80091b0:	1beb      	subs	r3, r5, r7
 80091b2:	3b15      	subs	r3, #21
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	3304      	adds	r3, #4
 80091ba:	3715      	adds	r7, #21
 80091bc:	42bd      	cmp	r5, r7
 80091be:	bf38      	it	cc
 80091c0:	2304      	movcc	r3, #4
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	9103      	str	r1, [sp, #12]
 80091c8:	428b      	cmp	r3, r1
 80091ca:	d80c      	bhi.n	80091e6 <__multiply+0x9a>
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	dd03      	ble.n	80091d8 <__multiply+0x8c>
 80091d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d055      	beq.n	8009284 <__multiply+0x138>
 80091d8:	6106      	str	r6, [r0, #16]
 80091da:	b005      	add	sp, #20
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e0:	f843 2b04 	str.w	r2, [r3], #4
 80091e4:	e7d9      	b.n	800919a <__multiply+0x4e>
 80091e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80091ea:	f1ba 0f00 	cmp.w	sl, #0
 80091ee:	d01f      	beq.n	8009230 <__multiply+0xe4>
 80091f0:	46c4      	mov	ip, r8
 80091f2:	46a1      	mov	r9, r4
 80091f4:	2700      	movs	r7, #0
 80091f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091fa:	f8d9 3000 	ldr.w	r3, [r9]
 80091fe:	fa1f fb82 	uxth.w	fp, r2
 8009202:	b29b      	uxth	r3, r3
 8009204:	fb0a 330b 	mla	r3, sl, fp, r3
 8009208:	443b      	add	r3, r7
 800920a:	f8d9 7000 	ldr.w	r7, [r9]
 800920e:	0c12      	lsrs	r2, r2, #16
 8009210:	0c3f      	lsrs	r7, r7, #16
 8009212:	fb0a 7202 	mla	r2, sl, r2, r7
 8009216:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800921a:	b29b      	uxth	r3, r3
 800921c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009220:	4565      	cmp	r5, ip
 8009222:	f849 3b04 	str.w	r3, [r9], #4
 8009226:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800922a:	d8e4      	bhi.n	80091f6 <__multiply+0xaa>
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	50e7      	str	r7, [r4, r3]
 8009230:	9b03      	ldr	r3, [sp, #12]
 8009232:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009236:	3104      	adds	r1, #4
 8009238:	f1b9 0f00 	cmp.w	r9, #0
 800923c:	d020      	beq.n	8009280 <__multiply+0x134>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	4647      	mov	r7, r8
 8009242:	46a4      	mov	ip, r4
 8009244:	f04f 0a00 	mov.w	sl, #0
 8009248:	f8b7 b000 	ldrh.w	fp, [r7]
 800924c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009250:	fb09 220b 	mla	r2, r9, fp, r2
 8009254:	4452      	add	r2, sl
 8009256:	b29b      	uxth	r3, r3
 8009258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800925c:	f84c 3b04 	str.w	r3, [ip], #4
 8009260:	f857 3b04 	ldr.w	r3, [r7], #4
 8009264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009268:	f8bc 3000 	ldrh.w	r3, [ip]
 800926c:	fb09 330a 	mla	r3, r9, sl, r3
 8009270:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009274:	42bd      	cmp	r5, r7
 8009276:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800927a:	d8e5      	bhi.n	8009248 <__multiply+0xfc>
 800927c:	9a01      	ldr	r2, [sp, #4]
 800927e:	50a3      	str	r3, [r4, r2]
 8009280:	3404      	adds	r4, #4
 8009282:	e79f      	b.n	80091c4 <__multiply+0x78>
 8009284:	3e01      	subs	r6, #1
 8009286:	e7a1      	b.n	80091cc <__multiply+0x80>
 8009288:	0800a320 	.word	0x0800a320
 800928c:	0800a331 	.word	0x0800a331

08009290 <__pow5mult>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	4615      	mov	r5, r2
 8009296:	f012 0203 	ands.w	r2, r2, #3
 800929a:	4607      	mov	r7, r0
 800929c:	460e      	mov	r6, r1
 800929e:	d007      	beq.n	80092b0 <__pow5mult+0x20>
 80092a0:	4c25      	ldr	r4, [pc, #148]	@ (8009338 <__pow5mult+0xa8>)
 80092a2:	3a01      	subs	r2, #1
 80092a4:	2300      	movs	r3, #0
 80092a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092aa:	f7ff fea7 	bl	8008ffc <__multadd>
 80092ae:	4606      	mov	r6, r0
 80092b0:	10ad      	asrs	r5, r5, #2
 80092b2:	d03d      	beq.n	8009330 <__pow5mult+0xa0>
 80092b4:	69fc      	ldr	r4, [r7, #28]
 80092b6:	b97c      	cbnz	r4, 80092d8 <__pow5mult+0x48>
 80092b8:	2010      	movs	r0, #16
 80092ba:	f7ff fd87 	bl	8008dcc <malloc>
 80092be:	4602      	mov	r2, r0
 80092c0:	61f8      	str	r0, [r7, #28]
 80092c2:	b928      	cbnz	r0, 80092d0 <__pow5mult+0x40>
 80092c4:	4b1d      	ldr	r3, [pc, #116]	@ (800933c <__pow5mult+0xac>)
 80092c6:	481e      	ldr	r0, [pc, #120]	@ (8009340 <__pow5mult+0xb0>)
 80092c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092cc:	f000 fbea 	bl	8009aa4 <__assert_func>
 80092d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092d4:	6004      	str	r4, [r0, #0]
 80092d6:	60c4      	str	r4, [r0, #12]
 80092d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092e0:	b94c      	cbnz	r4, 80092f6 <__pow5mult+0x66>
 80092e2:	f240 2171 	movw	r1, #625	@ 0x271
 80092e6:	4638      	mov	r0, r7
 80092e8:	f7ff ff1a 	bl	8009120 <__i2b>
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80092f2:	4604      	mov	r4, r0
 80092f4:	6003      	str	r3, [r0, #0]
 80092f6:	f04f 0900 	mov.w	r9, #0
 80092fa:	07eb      	lsls	r3, r5, #31
 80092fc:	d50a      	bpl.n	8009314 <__pow5mult+0x84>
 80092fe:	4631      	mov	r1, r6
 8009300:	4622      	mov	r2, r4
 8009302:	4638      	mov	r0, r7
 8009304:	f7ff ff22 	bl	800914c <__multiply>
 8009308:	4631      	mov	r1, r6
 800930a:	4680      	mov	r8, r0
 800930c:	4638      	mov	r0, r7
 800930e:	f7ff fe53 	bl	8008fb8 <_Bfree>
 8009312:	4646      	mov	r6, r8
 8009314:	106d      	asrs	r5, r5, #1
 8009316:	d00b      	beq.n	8009330 <__pow5mult+0xa0>
 8009318:	6820      	ldr	r0, [r4, #0]
 800931a:	b938      	cbnz	r0, 800932c <__pow5mult+0x9c>
 800931c:	4622      	mov	r2, r4
 800931e:	4621      	mov	r1, r4
 8009320:	4638      	mov	r0, r7
 8009322:	f7ff ff13 	bl	800914c <__multiply>
 8009326:	6020      	str	r0, [r4, #0]
 8009328:	f8c0 9000 	str.w	r9, [r0]
 800932c:	4604      	mov	r4, r0
 800932e:	e7e4      	b.n	80092fa <__pow5mult+0x6a>
 8009330:	4630      	mov	r0, r6
 8009332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009336:	bf00      	nop
 8009338:	0800a3e4 	.word	0x0800a3e4
 800933c:	0800a2b1 	.word	0x0800a2b1
 8009340:	0800a331 	.word	0x0800a331

08009344 <__lshift>:
 8009344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	460c      	mov	r4, r1
 800934a:	6849      	ldr	r1, [r1, #4]
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	4607      	mov	r7, r0
 8009356:	4691      	mov	r9, r2
 8009358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800935c:	f108 0601 	add.w	r6, r8, #1
 8009360:	42b3      	cmp	r3, r6
 8009362:	db0b      	blt.n	800937c <__lshift+0x38>
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff fde7 	bl	8008f38 <_Balloc>
 800936a:	4605      	mov	r5, r0
 800936c:	b948      	cbnz	r0, 8009382 <__lshift+0x3e>
 800936e:	4602      	mov	r2, r0
 8009370:	4b28      	ldr	r3, [pc, #160]	@ (8009414 <__lshift+0xd0>)
 8009372:	4829      	ldr	r0, [pc, #164]	@ (8009418 <__lshift+0xd4>)
 8009374:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009378:	f000 fb94 	bl	8009aa4 <__assert_func>
 800937c:	3101      	adds	r1, #1
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	e7ee      	b.n	8009360 <__lshift+0x1c>
 8009382:	2300      	movs	r3, #0
 8009384:	f100 0114 	add.w	r1, r0, #20
 8009388:	f100 0210 	add.w	r2, r0, #16
 800938c:	4618      	mov	r0, r3
 800938e:	4553      	cmp	r3, sl
 8009390:	db33      	blt.n	80093fa <__lshift+0xb6>
 8009392:	6920      	ldr	r0, [r4, #16]
 8009394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009398:	f104 0314 	add.w	r3, r4, #20
 800939c:	f019 091f 	ands.w	r9, r9, #31
 80093a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093a8:	d02b      	beq.n	8009402 <__lshift+0xbe>
 80093aa:	f1c9 0e20 	rsb	lr, r9, #32
 80093ae:	468a      	mov	sl, r1
 80093b0:	2200      	movs	r2, #0
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	fa00 f009 	lsl.w	r0, r0, r9
 80093b8:	4310      	orrs	r0, r2
 80093ba:	f84a 0b04 	str.w	r0, [sl], #4
 80093be:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c2:	459c      	cmp	ip, r3
 80093c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80093c8:	d8f3      	bhi.n	80093b2 <__lshift+0x6e>
 80093ca:	ebac 0304 	sub.w	r3, ip, r4
 80093ce:	3b15      	subs	r3, #21
 80093d0:	f023 0303 	bic.w	r3, r3, #3
 80093d4:	3304      	adds	r3, #4
 80093d6:	f104 0015 	add.w	r0, r4, #21
 80093da:	4560      	cmp	r0, ip
 80093dc:	bf88      	it	hi
 80093de:	2304      	movhi	r3, #4
 80093e0:	50ca      	str	r2, [r1, r3]
 80093e2:	b10a      	cbz	r2, 80093e8 <__lshift+0xa4>
 80093e4:	f108 0602 	add.w	r6, r8, #2
 80093e8:	3e01      	subs	r6, #1
 80093ea:	4638      	mov	r0, r7
 80093ec:	612e      	str	r6, [r5, #16]
 80093ee:	4621      	mov	r1, r4
 80093f0:	f7ff fde2 	bl	8008fb8 <_Bfree>
 80093f4:	4628      	mov	r0, r5
 80093f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80093fe:	3301      	adds	r3, #1
 8009400:	e7c5      	b.n	800938e <__lshift+0x4a>
 8009402:	3904      	subs	r1, #4
 8009404:	f853 2b04 	ldr.w	r2, [r3], #4
 8009408:	f841 2f04 	str.w	r2, [r1, #4]!
 800940c:	459c      	cmp	ip, r3
 800940e:	d8f9      	bhi.n	8009404 <__lshift+0xc0>
 8009410:	e7ea      	b.n	80093e8 <__lshift+0xa4>
 8009412:	bf00      	nop
 8009414:	0800a320 	.word	0x0800a320
 8009418:	0800a331 	.word	0x0800a331

0800941c <__mcmp>:
 800941c:	690a      	ldr	r2, [r1, #16]
 800941e:	4603      	mov	r3, r0
 8009420:	6900      	ldr	r0, [r0, #16]
 8009422:	1a80      	subs	r0, r0, r2
 8009424:	b530      	push	{r4, r5, lr}
 8009426:	d10e      	bne.n	8009446 <__mcmp+0x2a>
 8009428:	3314      	adds	r3, #20
 800942a:	3114      	adds	r1, #20
 800942c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800943c:	4295      	cmp	r5, r2
 800943e:	d003      	beq.n	8009448 <__mcmp+0x2c>
 8009440:	d205      	bcs.n	800944e <__mcmp+0x32>
 8009442:	f04f 30ff 	mov.w	r0, #4294967295
 8009446:	bd30      	pop	{r4, r5, pc}
 8009448:	42a3      	cmp	r3, r4
 800944a:	d3f3      	bcc.n	8009434 <__mcmp+0x18>
 800944c:	e7fb      	b.n	8009446 <__mcmp+0x2a>
 800944e:	2001      	movs	r0, #1
 8009450:	e7f9      	b.n	8009446 <__mcmp+0x2a>
	...

08009454 <__mdiff>:
 8009454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009458:	4689      	mov	r9, r1
 800945a:	4606      	mov	r6, r0
 800945c:	4611      	mov	r1, r2
 800945e:	4648      	mov	r0, r9
 8009460:	4614      	mov	r4, r2
 8009462:	f7ff ffdb 	bl	800941c <__mcmp>
 8009466:	1e05      	subs	r5, r0, #0
 8009468:	d112      	bne.n	8009490 <__mdiff+0x3c>
 800946a:	4629      	mov	r1, r5
 800946c:	4630      	mov	r0, r6
 800946e:	f7ff fd63 	bl	8008f38 <_Balloc>
 8009472:	4602      	mov	r2, r0
 8009474:	b928      	cbnz	r0, 8009482 <__mdiff+0x2e>
 8009476:	4b3f      	ldr	r3, [pc, #252]	@ (8009574 <__mdiff+0x120>)
 8009478:	f240 2137 	movw	r1, #567	@ 0x237
 800947c:	483e      	ldr	r0, [pc, #248]	@ (8009578 <__mdiff+0x124>)
 800947e:	f000 fb11 	bl	8009aa4 <__assert_func>
 8009482:	2301      	movs	r3, #1
 8009484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009488:	4610      	mov	r0, r2
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009490:	bfbc      	itt	lt
 8009492:	464b      	movlt	r3, r9
 8009494:	46a1      	movlt	r9, r4
 8009496:	4630      	mov	r0, r6
 8009498:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800949c:	bfba      	itte	lt
 800949e:	461c      	movlt	r4, r3
 80094a0:	2501      	movlt	r5, #1
 80094a2:	2500      	movge	r5, #0
 80094a4:	f7ff fd48 	bl	8008f38 <_Balloc>
 80094a8:	4602      	mov	r2, r0
 80094aa:	b918      	cbnz	r0, 80094b4 <__mdiff+0x60>
 80094ac:	4b31      	ldr	r3, [pc, #196]	@ (8009574 <__mdiff+0x120>)
 80094ae:	f240 2145 	movw	r1, #581	@ 0x245
 80094b2:	e7e3      	b.n	800947c <__mdiff+0x28>
 80094b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094b8:	6926      	ldr	r6, [r4, #16]
 80094ba:	60c5      	str	r5, [r0, #12]
 80094bc:	f109 0310 	add.w	r3, r9, #16
 80094c0:	f109 0514 	add.w	r5, r9, #20
 80094c4:	f104 0e14 	add.w	lr, r4, #20
 80094c8:	f100 0b14 	add.w	fp, r0, #20
 80094cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	46d9      	mov	r9, fp
 80094d8:	f04f 0c00 	mov.w	ip, #0
 80094dc:	9b01      	ldr	r3, [sp, #4]
 80094de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	fa1f f38a 	uxth.w	r3, sl
 80094ec:	4619      	mov	r1, r3
 80094ee:	b283      	uxth	r3, r0
 80094f0:	1acb      	subs	r3, r1, r3
 80094f2:	0c00      	lsrs	r0, r0, #16
 80094f4:	4463      	add	r3, ip
 80094f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009504:	4576      	cmp	r6, lr
 8009506:	f849 3b04 	str.w	r3, [r9], #4
 800950a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800950e:	d8e5      	bhi.n	80094dc <__mdiff+0x88>
 8009510:	1b33      	subs	r3, r6, r4
 8009512:	3b15      	subs	r3, #21
 8009514:	f023 0303 	bic.w	r3, r3, #3
 8009518:	3415      	adds	r4, #21
 800951a:	3304      	adds	r3, #4
 800951c:	42a6      	cmp	r6, r4
 800951e:	bf38      	it	cc
 8009520:	2304      	movcc	r3, #4
 8009522:	441d      	add	r5, r3
 8009524:	445b      	add	r3, fp
 8009526:	461e      	mov	r6, r3
 8009528:	462c      	mov	r4, r5
 800952a:	4544      	cmp	r4, r8
 800952c:	d30e      	bcc.n	800954c <__mdiff+0xf8>
 800952e:	f108 0103 	add.w	r1, r8, #3
 8009532:	1b49      	subs	r1, r1, r5
 8009534:	f021 0103 	bic.w	r1, r1, #3
 8009538:	3d03      	subs	r5, #3
 800953a:	45a8      	cmp	r8, r5
 800953c:	bf38      	it	cc
 800953e:	2100      	movcc	r1, #0
 8009540:	440b      	add	r3, r1
 8009542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009546:	b191      	cbz	r1, 800956e <__mdiff+0x11a>
 8009548:	6117      	str	r7, [r2, #16]
 800954a:	e79d      	b.n	8009488 <__mdiff+0x34>
 800954c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009550:	46e6      	mov	lr, ip
 8009552:	0c08      	lsrs	r0, r1, #16
 8009554:	fa1c fc81 	uxtah	ip, ip, r1
 8009558:	4471      	add	r1, lr
 800955a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800955e:	b289      	uxth	r1, r1
 8009560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009564:	f846 1b04 	str.w	r1, [r6], #4
 8009568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800956c:	e7dd      	b.n	800952a <__mdiff+0xd6>
 800956e:	3f01      	subs	r7, #1
 8009570:	e7e7      	b.n	8009542 <__mdiff+0xee>
 8009572:	bf00      	nop
 8009574:	0800a320 	.word	0x0800a320
 8009578:	0800a331 	.word	0x0800a331

0800957c <__d2b>:
 800957c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009580:	460f      	mov	r7, r1
 8009582:	2101      	movs	r1, #1
 8009584:	ec59 8b10 	vmov	r8, r9, d0
 8009588:	4616      	mov	r6, r2
 800958a:	f7ff fcd5 	bl	8008f38 <_Balloc>
 800958e:	4604      	mov	r4, r0
 8009590:	b930      	cbnz	r0, 80095a0 <__d2b+0x24>
 8009592:	4602      	mov	r2, r0
 8009594:	4b23      	ldr	r3, [pc, #140]	@ (8009624 <__d2b+0xa8>)
 8009596:	4824      	ldr	r0, [pc, #144]	@ (8009628 <__d2b+0xac>)
 8009598:	f240 310f 	movw	r1, #783	@ 0x30f
 800959c:	f000 fa82 	bl	8009aa4 <__assert_func>
 80095a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a8:	b10d      	cbz	r5, 80095ae <__d2b+0x32>
 80095aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	f1b8 0300 	subs.w	r3, r8, #0
 80095b4:	d023      	beq.n	80095fe <__d2b+0x82>
 80095b6:	4668      	mov	r0, sp
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	f7ff fd84 	bl	80090c6 <__lo0bits>
 80095be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095c2:	b1d0      	cbz	r0, 80095fa <__d2b+0x7e>
 80095c4:	f1c0 0320 	rsb	r3, r0, #32
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	430b      	orrs	r3, r1
 80095ce:	40c2      	lsrs	r2, r0
 80095d0:	6163      	str	r3, [r4, #20]
 80095d2:	9201      	str	r2, [sp, #4]
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	61a3      	str	r3, [r4, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bf0c      	ite	eq
 80095dc:	2201      	moveq	r2, #1
 80095de:	2202      	movne	r2, #2
 80095e0:	6122      	str	r2, [r4, #16]
 80095e2:	b1a5      	cbz	r5, 800960e <__d2b+0x92>
 80095e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095e8:	4405      	add	r5, r0
 80095ea:	603d      	str	r5, [r7, #0]
 80095ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095f0:	6030      	str	r0, [r6, #0]
 80095f2:	4620      	mov	r0, r4
 80095f4:	b003      	add	sp, #12
 80095f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095fa:	6161      	str	r1, [r4, #20]
 80095fc:	e7ea      	b.n	80095d4 <__d2b+0x58>
 80095fe:	a801      	add	r0, sp, #4
 8009600:	f7ff fd61 	bl	80090c6 <__lo0bits>
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	6163      	str	r3, [r4, #20]
 8009608:	3020      	adds	r0, #32
 800960a:	2201      	movs	r2, #1
 800960c:	e7e8      	b.n	80095e0 <__d2b+0x64>
 800960e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009616:	6038      	str	r0, [r7, #0]
 8009618:	6918      	ldr	r0, [r3, #16]
 800961a:	f7ff fd35 	bl	8009088 <__hi0bits>
 800961e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009622:	e7e5      	b.n	80095f0 <__d2b+0x74>
 8009624:	0800a320 	.word	0x0800a320
 8009628:	0800a331 	.word	0x0800a331

0800962c <__ssputs_r>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	688e      	ldr	r6, [r1, #8]
 8009632:	461f      	mov	r7, r3
 8009634:	42be      	cmp	r6, r7
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	4682      	mov	sl, r0
 800963a:	460c      	mov	r4, r1
 800963c:	4690      	mov	r8, r2
 800963e:	d82d      	bhi.n	800969c <__ssputs_r+0x70>
 8009640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009648:	d026      	beq.n	8009698 <__ssputs_r+0x6c>
 800964a:	6965      	ldr	r5, [r4, #20]
 800964c:	6909      	ldr	r1, [r1, #16]
 800964e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009652:	eba3 0901 	sub.w	r9, r3, r1
 8009656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800965a:	1c7b      	adds	r3, r7, #1
 800965c:	444b      	add	r3, r9
 800965e:	106d      	asrs	r5, r5, #1
 8009660:	429d      	cmp	r5, r3
 8009662:	bf38      	it	cc
 8009664:	461d      	movcc	r5, r3
 8009666:	0553      	lsls	r3, r2, #21
 8009668:	d527      	bpl.n	80096ba <__ssputs_r+0x8e>
 800966a:	4629      	mov	r1, r5
 800966c:	f7ff fbd8 	bl	8008e20 <_malloc_r>
 8009670:	4606      	mov	r6, r0
 8009672:	b360      	cbz	r0, 80096ce <__ssputs_r+0xa2>
 8009674:	6921      	ldr	r1, [r4, #16]
 8009676:	464a      	mov	r2, r9
 8009678:	f000 fa06 	bl	8009a88 <memcpy>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	6126      	str	r6, [r4, #16]
 800968a:	6165      	str	r5, [r4, #20]
 800968c:	444e      	add	r6, r9
 800968e:	eba5 0509 	sub.w	r5, r5, r9
 8009692:	6026      	str	r6, [r4, #0]
 8009694:	60a5      	str	r5, [r4, #8]
 8009696:	463e      	mov	r6, r7
 8009698:	42be      	cmp	r6, r7
 800969a:	d900      	bls.n	800969e <__ssputs_r+0x72>
 800969c:	463e      	mov	r6, r7
 800969e:	6820      	ldr	r0, [r4, #0]
 80096a0:	4632      	mov	r2, r6
 80096a2:	4641      	mov	r1, r8
 80096a4:	f000 f9c6 	bl	8009a34 <memmove>
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	1b9b      	subs	r3, r3, r6
 80096ac:	60a3      	str	r3, [r4, #8]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	4433      	add	r3, r6
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	2000      	movs	r0, #0
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	462a      	mov	r2, r5
 80096bc:	f000 fa36 	bl	8009b2c <_realloc_r>
 80096c0:	4606      	mov	r6, r0
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1e0      	bne.n	8009688 <__ssputs_r+0x5c>
 80096c6:	6921      	ldr	r1, [r4, #16]
 80096c8:	4650      	mov	r0, sl
 80096ca:	f7ff fb35 	bl	8008d38 <_free_r>
 80096ce:	230c      	movs	r3, #12
 80096d0:	f8ca 3000 	str.w	r3, [sl]
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	e7e9      	b.n	80096b6 <__ssputs_r+0x8a>
	...

080096e4 <_svfiprintf_r>:
 80096e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	4698      	mov	r8, r3
 80096ea:	898b      	ldrh	r3, [r1, #12]
 80096ec:	061b      	lsls	r3, r3, #24
 80096ee:	b09d      	sub	sp, #116	@ 0x74
 80096f0:	4607      	mov	r7, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	4614      	mov	r4, r2
 80096f6:	d510      	bpl.n	800971a <_svfiprintf_r+0x36>
 80096f8:	690b      	ldr	r3, [r1, #16]
 80096fa:	b973      	cbnz	r3, 800971a <_svfiprintf_r+0x36>
 80096fc:	2140      	movs	r1, #64	@ 0x40
 80096fe:	f7ff fb8f 	bl	8008e20 <_malloc_r>
 8009702:	6028      	str	r0, [r5, #0]
 8009704:	6128      	str	r0, [r5, #16]
 8009706:	b930      	cbnz	r0, 8009716 <_svfiprintf_r+0x32>
 8009708:	230c      	movs	r3, #12
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	b01d      	add	sp, #116	@ 0x74
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	2340      	movs	r3, #64	@ 0x40
 8009718:	616b      	str	r3, [r5, #20]
 800971a:	2300      	movs	r3, #0
 800971c:	9309      	str	r3, [sp, #36]	@ 0x24
 800971e:	2320      	movs	r3, #32
 8009720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009724:	f8cd 800c 	str.w	r8, [sp, #12]
 8009728:	2330      	movs	r3, #48	@ 0x30
 800972a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098c8 <_svfiprintf_r+0x1e4>
 800972e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009732:	f04f 0901 	mov.w	r9, #1
 8009736:	4623      	mov	r3, r4
 8009738:	469a      	mov	sl, r3
 800973a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973e:	b10a      	cbz	r2, 8009744 <_svfiprintf_r+0x60>
 8009740:	2a25      	cmp	r2, #37	@ 0x25
 8009742:	d1f9      	bne.n	8009738 <_svfiprintf_r+0x54>
 8009744:	ebba 0b04 	subs.w	fp, sl, r4
 8009748:	d00b      	beq.n	8009762 <_svfiprintf_r+0x7e>
 800974a:	465b      	mov	r3, fp
 800974c:	4622      	mov	r2, r4
 800974e:	4629      	mov	r1, r5
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff ff6b 	bl	800962c <__ssputs_r>
 8009756:	3001      	adds	r0, #1
 8009758:	f000 80a7 	beq.w	80098aa <_svfiprintf_r+0x1c6>
 800975c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800975e:	445a      	add	r2, fp
 8009760:	9209      	str	r2, [sp, #36]	@ 0x24
 8009762:	f89a 3000 	ldrb.w	r3, [sl]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 809f 	beq.w	80098aa <_svfiprintf_r+0x1c6>
 800976c:	2300      	movs	r3, #0
 800976e:	f04f 32ff 	mov.w	r2, #4294967295
 8009772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009776:	f10a 0a01 	add.w	sl, sl, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	9307      	str	r3, [sp, #28]
 800977e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009782:	931a      	str	r3, [sp, #104]	@ 0x68
 8009784:	4654      	mov	r4, sl
 8009786:	2205      	movs	r2, #5
 8009788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978c:	484e      	ldr	r0, [pc, #312]	@ (80098c8 <_svfiprintf_r+0x1e4>)
 800978e:	f7f6 fd37 	bl	8000200 <memchr>
 8009792:	9a04      	ldr	r2, [sp, #16]
 8009794:	b9d8      	cbnz	r0, 80097ce <_svfiprintf_r+0xea>
 8009796:	06d0      	lsls	r0, r2, #27
 8009798:	bf44      	itt	mi
 800979a:	2320      	movmi	r3, #32
 800979c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a0:	0711      	lsls	r1, r2, #28
 80097a2:	bf44      	itt	mi
 80097a4:	232b      	movmi	r3, #43	@ 0x2b
 80097a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097aa:	f89a 3000 	ldrb.w	r3, [sl]
 80097ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b0:	d015      	beq.n	80097de <_svfiprintf_r+0xfa>
 80097b2:	9a07      	ldr	r2, [sp, #28]
 80097b4:	4654      	mov	r4, sl
 80097b6:	2000      	movs	r0, #0
 80097b8:	f04f 0c0a 	mov.w	ip, #10
 80097bc:	4621      	mov	r1, r4
 80097be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c2:	3b30      	subs	r3, #48	@ 0x30
 80097c4:	2b09      	cmp	r3, #9
 80097c6:	d94b      	bls.n	8009860 <_svfiprintf_r+0x17c>
 80097c8:	b1b0      	cbz	r0, 80097f8 <_svfiprintf_r+0x114>
 80097ca:	9207      	str	r2, [sp, #28]
 80097cc:	e014      	b.n	80097f8 <_svfiprintf_r+0x114>
 80097ce:	eba0 0308 	sub.w	r3, r0, r8
 80097d2:	fa09 f303 	lsl.w	r3, r9, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	46a2      	mov	sl, r4
 80097dc:	e7d2      	b.n	8009784 <_svfiprintf_r+0xa0>
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	1d19      	adds	r1, r3, #4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	9103      	str	r1, [sp, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	bfbb      	ittet	lt
 80097ea:	425b      	neglt	r3, r3
 80097ec:	f042 0202 	orrlt.w	r2, r2, #2
 80097f0:	9307      	strge	r3, [sp, #28]
 80097f2:	9307      	strlt	r3, [sp, #28]
 80097f4:	bfb8      	it	lt
 80097f6:	9204      	strlt	r2, [sp, #16]
 80097f8:	7823      	ldrb	r3, [r4, #0]
 80097fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80097fc:	d10a      	bne.n	8009814 <_svfiprintf_r+0x130>
 80097fe:	7863      	ldrb	r3, [r4, #1]
 8009800:	2b2a      	cmp	r3, #42	@ 0x2a
 8009802:	d132      	bne.n	800986a <_svfiprintf_r+0x186>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	9203      	str	r2, [sp, #12]
 800980c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009810:	3402      	adds	r4, #2
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098d8 <_svfiprintf_r+0x1f4>
 8009818:	7821      	ldrb	r1, [r4, #0]
 800981a:	2203      	movs	r2, #3
 800981c:	4650      	mov	r0, sl
 800981e:	f7f6 fcef 	bl	8000200 <memchr>
 8009822:	b138      	cbz	r0, 8009834 <_svfiprintf_r+0x150>
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	eba0 000a 	sub.w	r0, r0, sl
 800982a:	2240      	movs	r2, #64	@ 0x40
 800982c:	4082      	lsls	r2, r0
 800982e:	4313      	orrs	r3, r2
 8009830:	3401      	adds	r4, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009838:	4824      	ldr	r0, [pc, #144]	@ (80098cc <_svfiprintf_r+0x1e8>)
 800983a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800983e:	2206      	movs	r2, #6
 8009840:	f7f6 fcde 	bl	8000200 <memchr>
 8009844:	2800      	cmp	r0, #0
 8009846:	d036      	beq.n	80098b6 <_svfiprintf_r+0x1d2>
 8009848:	4b21      	ldr	r3, [pc, #132]	@ (80098d0 <_svfiprintf_r+0x1ec>)
 800984a:	bb1b      	cbnz	r3, 8009894 <_svfiprintf_r+0x1b0>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	3307      	adds	r3, #7
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	3308      	adds	r3, #8
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985a:	4433      	add	r3, r6
 800985c:	9309      	str	r3, [sp, #36]	@ 0x24
 800985e:	e76a      	b.n	8009736 <_svfiprintf_r+0x52>
 8009860:	fb0c 3202 	mla	r2, ip, r2, r3
 8009864:	460c      	mov	r4, r1
 8009866:	2001      	movs	r0, #1
 8009868:	e7a8      	b.n	80097bc <_svfiprintf_r+0xd8>
 800986a:	2300      	movs	r3, #0
 800986c:	3401      	adds	r4, #1
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	4619      	mov	r1, r3
 8009872:	f04f 0c0a 	mov.w	ip, #10
 8009876:	4620      	mov	r0, r4
 8009878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987c:	3a30      	subs	r2, #48	@ 0x30
 800987e:	2a09      	cmp	r2, #9
 8009880:	d903      	bls.n	800988a <_svfiprintf_r+0x1a6>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0c6      	beq.n	8009814 <_svfiprintf_r+0x130>
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	e7c4      	b.n	8009814 <_svfiprintf_r+0x130>
 800988a:	fb0c 2101 	mla	r1, ip, r1, r2
 800988e:	4604      	mov	r4, r0
 8009890:	2301      	movs	r3, #1
 8009892:	e7f0      	b.n	8009876 <_svfiprintf_r+0x192>
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	462a      	mov	r2, r5
 800989a:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <_svfiprintf_r+0x1f0>)
 800989c:	a904      	add	r1, sp, #16
 800989e:	4638      	mov	r0, r7
 80098a0:	f7fd fe94 	bl	80075cc <_printf_float>
 80098a4:	1c42      	adds	r2, r0, #1
 80098a6:	4606      	mov	r6, r0
 80098a8:	d1d6      	bne.n	8009858 <_svfiprintf_r+0x174>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	065b      	lsls	r3, r3, #25
 80098ae:	f53f af2d 	bmi.w	800970c <_svfiprintf_r+0x28>
 80098b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098b4:	e72c      	b.n	8009710 <_svfiprintf_r+0x2c>
 80098b6:	ab03      	add	r3, sp, #12
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	462a      	mov	r2, r5
 80098bc:	4b05      	ldr	r3, [pc, #20]	@ (80098d4 <_svfiprintf_r+0x1f0>)
 80098be:	a904      	add	r1, sp, #16
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7fe f91b 	bl	8007afc <_printf_i>
 80098c6:	e7ed      	b.n	80098a4 <_svfiprintf_r+0x1c0>
 80098c8:	0800a38a 	.word	0x0800a38a
 80098cc:	0800a394 	.word	0x0800a394
 80098d0:	080075cd 	.word	0x080075cd
 80098d4:	0800962d 	.word	0x0800962d
 80098d8:	0800a390 	.word	0x0800a390

080098dc <__sflush_r>:
 80098dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	0716      	lsls	r6, r2, #28
 80098e6:	4605      	mov	r5, r0
 80098e8:	460c      	mov	r4, r1
 80098ea:	d454      	bmi.n	8009996 <__sflush_r+0xba>
 80098ec:	684b      	ldr	r3, [r1, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dc02      	bgt.n	80098f8 <__sflush_r+0x1c>
 80098f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd48      	ble.n	800998a <__sflush_r+0xae>
 80098f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098fa:	2e00      	cmp	r6, #0
 80098fc:	d045      	beq.n	800998a <__sflush_r+0xae>
 80098fe:	2300      	movs	r3, #0
 8009900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009904:	682f      	ldr	r7, [r5, #0]
 8009906:	6a21      	ldr	r1, [r4, #32]
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	d030      	beq.n	800996e <__sflush_r+0x92>
 800990c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	0759      	lsls	r1, r3, #29
 8009912:	d505      	bpl.n	8009920 <__sflush_r+0x44>
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800991a:	b10b      	cbz	r3, 8009920 <__sflush_r+0x44>
 800991c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	2300      	movs	r3, #0
 8009922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009924:	6a21      	ldr	r1, [r4, #32]
 8009926:	4628      	mov	r0, r5
 8009928:	47b0      	blx	r6
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	d106      	bne.n	800993e <__sflush_r+0x62>
 8009930:	6829      	ldr	r1, [r5, #0]
 8009932:	291d      	cmp	r1, #29
 8009934:	d82b      	bhi.n	800998e <__sflush_r+0xb2>
 8009936:	4a2a      	ldr	r2, [pc, #168]	@ (80099e0 <__sflush_r+0x104>)
 8009938:	40ca      	lsrs	r2, r1
 800993a:	07d6      	lsls	r6, r2, #31
 800993c:	d527      	bpl.n	800998e <__sflush_r+0xb2>
 800993e:	2200      	movs	r2, #0
 8009940:	6062      	str	r2, [r4, #4]
 8009942:	04d9      	lsls	r1, r3, #19
 8009944:	6922      	ldr	r2, [r4, #16]
 8009946:	6022      	str	r2, [r4, #0]
 8009948:	d504      	bpl.n	8009954 <__sflush_r+0x78>
 800994a:	1c42      	adds	r2, r0, #1
 800994c:	d101      	bne.n	8009952 <__sflush_r+0x76>
 800994e:	682b      	ldr	r3, [r5, #0]
 8009950:	b903      	cbnz	r3, 8009954 <__sflush_r+0x78>
 8009952:	6560      	str	r0, [r4, #84]	@ 0x54
 8009954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009956:	602f      	str	r7, [r5, #0]
 8009958:	b1b9      	cbz	r1, 800998a <__sflush_r+0xae>
 800995a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800995e:	4299      	cmp	r1, r3
 8009960:	d002      	beq.n	8009968 <__sflush_r+0x8c>
 8009962:	4628      	mov	r0, r5
 8009964:	f7ff f9e8 	bl	8008d38 <_free_r>
 8009968:	2300      	movs	r3, #0
 800996a:	6363      	str	r3, [r4, #52]	@ 0x34
 800996c:	e00d      	b.n	800998a <__sflush_r+0xae>
 800996e:	2301      	movs	r3, #1
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	4602      	mov	r2, r0
 8009976:	1c50      	adds	r0, r2, #1
 8009978:	d1c9      	bne.n	800990e <__sflush_r+0x32>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0c6      	beq.n	800990e <__sflush_r+0x32>
 8009980:	2b1d      	cmp	r3, #29
 8009982:	d001      	beq.n	8009988 <__sflush_r+0xac>
 8009984:	2b16      	cmp	r3, #22
 8009986:	d11e      	bne.n	80099c6 <__sflush_r+0xea>
 8009988:	602f      	str	r7, [r5, #0]
 800998a:	2000      	movs	r0, #0
 800998c:	e022      	b.n	80099d4 <__sflush_r+0xf8>
 800998e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009992:	b21b      	sxth	r3, r3
 8009994:	e01b      	b.n	80099ce <__sflush_r+0xf2>
 8009996:	690f      	ldr	r7, [r1, #16]
 8009998:	2f00      	cmp	r7, #0
 800999a:	d0f6      	beq.n	800998a <__sflush_r+0xae>
 800999c:	0793      	lsls	r3, r2, #30
 800999e:	680e      	ldr	r6, [r1, #0]
 80099a0:	bf08      	it	eq
 80099a2:	694b      	ldreq	r3, [r1, #20]
 80099a4:	600f      	str	r7, [r1, #0]
 80099a6:	bf18      	it	ne
 80099a8:	2300      	movne	r3, #0
 80099aa:	eba6 0807 	sub.w	r8, r6, r7
 80099ae:	608b      	str	r3, [r1, #8]
 80099b0:	f1b8 0f00 	cmp.w	r8, #0
 80099b4:	dde9      	ble.n	800998a <__sflush_r+0xae>
 80099b6:	6a21      	ldr	r1, [r4, #32]
 80099b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ba:	4643      	mov	r3, r8
 80099bc:	463a      	mov	r2, r7
 80099be:	4628      	mov	r0, r5
 80099c0:	47b0      	blx	r6
 80099c2:	2800      	cmp	r0, #0
 80099c4:	dc08      	bgt.n	80099d8 <__sflush_r+0xfc>
 80099c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	4407      	add	r7, r0
 80099da:	eba8 0800 	sub.w	r8, r8, r0
 80099de:	e7e7      	b.n	80099b0 <__sflush_r+0xd4>
 80099e0:	20400001 	.word	0x20400001

080099e4 <_fflush_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	690b      	ldr	r3, [r1, #16]
 80099e8:	4605      	mov	r5, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	b913      	cbnz	r3, 80099f4 <_fflush_r+0x10>
 80099ee:	2500      	movs	r5, #0
 80099f0:	4628      	mov	r0, r5
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	b118      	cbz	r0, 80099fe <_fflush_r+0x1a>
 80099f6:	6a03      	ldr	r3, [r0, #32]
 80099f8:	b90b      	cbnz	r3, 80099fe <_fflush_r+0x1a>
 80099fa:	f7fe fa29 	bl	8007e50 <__sinit>
 80099fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0f3      	beq.n	80099ee <_fflush_r+0xa>
 8009a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a08:	07d0      	lsls	r0, r2, #31
 8009a0a:	d404      	bmi.n	8009a16 <_fflush_r+0x32>
 8009a0c:	0599      	lsls	r1, r3, #22
 8009a0e:	d402      	bmi.n	8009a16 <_fflush_r+0x32>
 8009a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a12:	f7fe fb36 	bl	8008082 <__retarget_lock_acquire_recursive>
 8009a16:	4628      	mov	r0, r5
 8009a18:	4621      	mov	r1, r4
 8009a1a:	f7ff ff5f 	bl	80098dc <__sflush_r>
 8009a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a20:	07da      	lsls	r2, r3, #31
 8009a22:	4605      	mov	r5, r0
 8009a24:	d4e4      	bmi.n	80099f0 <_fflush_r+0xc>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	059b      	lsls	r3, r3, #22
 8009a2a:	d4e1      	bmi.n	80099f0 <_fflush_r+0xc>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a2e:	f7fe fb29 	bl	8008084 <__retarget_lock_release_recursive>
 8009a32:	e7dd      	b.n	80099f0 <_fflush_r+0xc>

08009a34 <memmove>:
 8009a34:	4288      	cmp	r0, r1
 8009a36:	b510      	push	{r4, lr}
 8009a38:	eb01 0402 	add.w	r4, r1, r2
 8009a3c:	d902      	bls.n	8009a44 <memmove+0x10>
 8009a3e:	4284      	cmp	r4, r0
 8009a40:	4623      	mov	r3, r4
 8009a42:	d807      	bhi.n	8009a54 <memmove+0x20>
 8009a44:	1e43      	subs	r3, r0, #1
 8009a46:	42a1      	cmp	r1, r4
 8009a48:	d008      	beq.n	8009a5c <memmove+0x28>
 8009a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a52:	e7f8      	b.n	8009a46 <memmove+0x12>
 8009a54:	4402      	add	r2, r0
 8009a56:	4601      	mov	r1, r0
 8009a58:	428a      	cmp	r2, r1
 8009a5a:	d100      	bne.n	8009a5e <memmove+0x2a>
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a66:	e7f7      	b.n	8009a58 <memmove+0x24>

08009a68 <_sbrk_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4d06      	ldr	r5, [pc, #24]	@ (8009a84 <_sbrk_r+0x1c>)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4604      	mov	r4, r0
 8009a70:	4608      	mov	r0, r1
 8009a72:	602b      	str	r3, [r5, #0]
 8009a74:	f7f8 fb7e 	bl	8002174 <_sbrk>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	d102      	bne.n	8009a82 <_sbrk_r+0x1a>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	b103      	cbz	r3, 8009a82 <_sbrk_r+0x1a>
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	bd38      	pop	{r3, r4, r5, pc}
 8009a84:	20040620 	.word	0x20040620

08009a88 <memcpy>:
 8009a88:	440a      	add	r2, r1
 8009a8a:	4291      	cmp	r1, r2
 8009a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a90:	d100      	bne.n	8009a94 <memcpy+0xc>
 8009a92:	4770      	bx	lr
 8009a94:	b510      	push	{r4, lr}
 8009a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	d1f9      	bne.n	8009a96 <memcpy+0xe>
 8009aa2:	bd10      	pop	{r4, pc}

08009aa4 <__assert_func>:
 8009aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aa6:	4614      	mov	r4, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b09      	ldr	r3, [pc, #36]	@ (8009ad0 <__assert_func+0x2c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4605      	mov	r5, r0
 8009ab0:	68d8      	ldr	r0, [r3, #12]
 8009ab2:	b14c      	cbz	r4, 8009ac8 <__assert_func+0x24>
 8009ab4:	4b07      	ldr	r3, [pc, #28]	@ (8009ad4 <__assert_func+0x30>)
 8009ab6:	9100      	str	r1, [sp, #0]
 8009ab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009abc:	4906      	ldr	r1, [pc, #24]	@ (8009ad8 <__assert_func+0x34>)
 8009abe:	462b      	mov	r3, r5
 8009ac0:	f000 f870 	bl	8009ba4 <fiprintf>
 8009ac4:	f000 f880 	bl	8009bc8 <abort>
 8009ac8:	4b04      	ldr	r3, [pc, #16]	@ (8009adc <__assert_func+0x38>)
 8009aca:	461c      	mov	r4, r3
 8009acc:	e7f3      	b.n	8009ab6 <__assert_func+0x12>
 8009ace:	bf00      	nop
 8009ad0:	20040018 	.word	0x20040018
 8009ad4:	0800a3a5 	.word	0x0800a3a5
 8009ad8:	0800a3b2 	.word	0x0800a3b2
 8009adc:	0800a3e0 	.word	0x0800a3e0

08009ae0 <_calloc_r>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	fba1 5402 	umull	r5, r4, r1, r2
 8009ae6:	b934      	cbnz	r4, 8009af6 <_calloc_r+0x16>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7ff f999 	bl	8008e20 <_malloc_r>
 8009aee:	4606      	mov	r6, r0
 8009af0:	b928      	cbnz	r0, 8009afe <_calloc_r+0x1e>
 8009af2:	4630      	mov	r0, r6
 8009af4:	bd70      	pop	{r4, r5, r6, pc}
 8009af6:	220c      	movs	r2, #12
 8009af8:	6002      	str	r2, [r0, #0]
 8009afa:	2600      	movs	r6, #0
 8009afc:	e7f9      	b.n	8009af2 <_calloc_r+0x12>
 8009afe:	462a      	mov	r2, r5
 8009b00:	4621      	mov	r1, r4
 8009b02:	f7fe fa40 	bl	8007f86 <memset>
 8009b06:	e7f4      	b.n	8009af2 <_calloc_r+0x12>

08009b08 <__ascii_mbtowc>:
 8009b08:	b082      	sub	sp, #8
 8009b0a:	b901      	cbnz	r1, 8009b0e <__ascii_mbtowc+0x6>
 8009b0c:	a901      	add	r1, sp, #4
 8009b0e:	b142      	cbz	r2, 8009b22 <__ascii_mbtowc+0x1a>
 8009b10:	b14b      	cbz	r3, 8009b26 <__ascii_mbtowc+0x1e>
 8009b12:	7813      	ldrb	r3, [r2, #0]
 8009b14:	600b      	str	r3, [r1, #0]
 8009b16:	7812      	ldrb	r2, [r2, #0]
 8009b18:	1e10      	subs	r0, r2, #0
 8009b1a:	bf18      	it	ne
 8009b1c:	2001      	movne	r0, #1
 8009b1e:	b002      	add	sp, #8
 8009b20:	4770      	bx	lr
 8009b22:	4610      	mov	r0, r2
 8009b24:	e7fb      	b.n	8009b1e <__ascii_mbtowc+0x16>
 8009b26:	f06f 0001 	mvn.w	r0, #1
 8009b2a:	e7f8      	b.n	8009b1e <__ascii_mbtowc+0x16>

08009b2c <_realloc_r>:
 8009b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	4607      	mov	r7, r0
 8009b32:	4614      	mov	r4, r2
 8009b34:	460d      	mov	r5, r1
 8009b36:	b921      	cbnz	r1, 8009b42 <_realloc_r+0x16>
 8009b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	f7ff b96f 	b.w	8008e20 <_malloc_r>
 8009b42:	b92a      	cbnz	r2, 8009b50 <_realloc_r+0x24>
 8009b44:	f7ff f8f8 	bl	8008d38 <_free_r>
 8009b48:	4625      	mov	r5, r4
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b50:	f000 f841 	bl	8009bd6 <_malloc_usable_size_r>
 8009b54:	4284      	cmp	r4, r0
 8009b56:	4606      	mov	r6, r0
 8009b58:	d802      	bhi.n	8009b60 <_realloc_r+0x34>
 8009b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b5e:	d8f4      	bhi.n	8009b4a <_realloc_r+0x1e>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4638      	mov	r0, r7
 8009b64:	f7ff f95c 	bl	8008e20 <_malloc_r>
 8009b68:	4680      	mov	r8, r0
 8009b6a:	b908      	cbnz	r0, 8009b70 <_realloc_r+0x44>
 8009b6c:	4645      	mov	r5, r8
 8009b6e:	e7ec      	b.n	8009b4a <_realloc_r+0x1e>
 8009b70:	42b4      	cmp	r4, r6
 8009b72:	4622      	mov	r2, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	bf28      	it	cs
 8009b78:	4632      	movcs	r2, r6
 8009b7a:	f7ff ff85 	bl	8009a88 <memcpy>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7ff f8d9 	bl	8008d38 <_free_r>
 8009b86:	e7f1      	b.n	8009b6c <_realloc_r+0x40>

08009b88 <__ascii_wctomb>:
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	b141      	cbz	r1, 8009ba0 <__ascii_wctomb+0x18>
 8009b8e:	2aff      	cmp	r2, #255	@ 0xff
 8009b90:	d904      	bls.n	8009b9c <__ascii_wctomb+0x14>
 8009b92:	228a      	movs	r2, #138	@ 0x8a
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9a:	4770      	bx	lr
 8009b9c:	700a      	strb	r2, [r1, #0]
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	4770      	bx	lr
	...

08009ba4 <fiprintf>:
 8009ba4:	b40e      	push	{r1, r2, r3}
 8009ba6:	b503      	push	{r0, r1, lr}
 8009ba8:	4601      	mov	r1, r0
 8009baa:	ab03      	add	r3, sp, #12
 8009bac:	4805      	ldr	r0, [pc, #20]	@ (8009bc4 <fiprintf+0x20>)
 8009bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb2:	6800      	ldr	r0, [r0, #0]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	f000 f83f 	bl	8009c38 <_vfiprintf_r>
 8009bba:	b002      	add	sp, #8
 8009bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc0:	b003      	add	sp, #12
 8009bc2:	4770      	bx	lr
 8009bc4:	20040018 	.word	0x20040018

08009bc8 <abort>:
 8009bc8:	b508      	push	{r3, lr}
 8009bca:	2006      	movs	r0, #6
 8009bcc:	f000 fa08 	bl	8009fe0 <raise>
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f7f8 fa56 	bl	8002082 <_exit>

08009bd6 <_malloc_usable_size_r>:
 8009bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bda:	1f18      	subs	r0, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bfbc      	itt	lt
 8009be0:	580b      	ldrlt	r3, [r1, r0]
 8009be2:	18c0      	addlt	r0, r0, r3
 8009be4:	4770      	bx	lr

08009be6 <__sfputc_r>:
 8009be6:	6893      	ldr	r3, [r2, #8]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	b410      	push	{r4}
 8009bee:	6093      	str	r3, [r2, #8]
 8009bf0:	da08      	bge.n	8009c04 <__sfputc_r+0x1e>
 8009bf2:	6994      	ldr	r4, [r2, #24]
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	db01      	blt.n	8009bfc <__sfputc_r+0x16>
 8009bf8:	290a      	cmp	r1, #10
 8009bfa:	d103      	bne.n	8009c04 <__sfputc_r+0x1e>
 8009bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c00:	f000 b932 	b.w	8009e68 <__swbuf_r>
 8009c04:	6813      	ldr	r3, [r2, #0]
 8009c06:	1c58      	adds	r0, r3, #1
 8009c08:	6010      	str	r0, [r2, #0]
 8009c0a:	7019      	strb	r1, [r3, #0]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <__sfputs_r>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	4606      	mov	r6, r0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	4614      	mov	r4, r2
 8009c1c:	18d5      	adds	r5, r2, r3
 8009c1e:	42ac      	cmp	r4, r5
 8009c20:	d101      	bne.n	8009c26 <__sfputs_r+0x12>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e007      	b.n	8009c36 <__sfputs_r+0x22>
 8009c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff ffda 	bl	8009be6 <__sfputc_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d1f3      	bne.n	8009c1e <__sfputs_r+0xa>
 8009c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c38 <_vfiprintf_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	b09d      	sub	sp, #116	@ 0x74
 8009c40:	4614      	mov	r4, r2
 8009c42:	4698      	mov	r8, r3
 8009c44:	4606      	mov	r6, r0
 8009c46:	b118      	cbz	r0, 8009c50 <_vfiprintf_r+0x18>
 8009c48:	6a03      	ldr	r3, [r0, #32]
 8009c4a:	b90b      	cbnz	r3, 8009c50 <_vfiprintf_r+0x18>
 8009c4c:	f7fe f900 	bl	8007e50 <__sinit>
 8009c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	d405      	bmi.n	8009c62 <_vfiprintf_r+0x2a>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	059a      	lsls	r2, r3, #22
 8009c5a:	d402      	bmi.n	8009c62 <_vfiprintf_r+0x2a>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c5e:	f7fe fa10 	bl	8008082 <__retarget_lock_acquire_recursive>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	071b      	lsls	r3, r3, #28
 8009c66:	d501      	bpl.n	8009c6c <_vfiprintf_r+0x34>
 8009c68:	692b      	ldr	r3, [r5, #16]
 8009c6a:	b99b      	cbnz	r3, 8009c94 <_vfiprintf_r+0x5c>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f000 f938 	bl	8009ee4 <__swsetup_r>
 8009c74:	b170      	cbz	r0, 8009c94 <_vfiprintf_r+0x5c>
 8009c76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c78:	07dc      	lsls	r4, r3, #31
 8009c7a:	d504      	bpl.n	8009c86 <_vfiprintf_r+0x4e>
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	b01d      	add	sp, #116	@ 0x74
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	89ab      	ldrh	r3, [r5, #12]
 8009c88:	0598      	lsls	r0, r3, #22
 8009c8a:	d4f7      	bmi.n	8009c7c <_vfiprintf_r+0x44>
 8009c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c8e:	f7fe f9f9 	bl	8008084 <__retarget_lock_release_recursive>
 8009c92:	e7f3      	b.n	8009c7c <_vfiprintf_r+0x44>
 8009c94:	2300      	movs	r3, #0
 8009c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c98:	2320      	movs	r3, #32
 8009c9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ca2:	2330      	movs	r3, #48	@ 0x30
 8009ca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e54 <_vfiprintf_r+0x21c>
 8009ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cac:	f04f 0901 	mov.w	r9, #1
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	469a      	mov	sl, r3
 8009cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb8:	b10a      	cbz	r2, 8009cbe <_vfiprintf_r+0x86>
 8009cba:	2a25      	cmp	r2, #37	@ 0x25
 8009cbc:	d1f9      	bne.n	8009cb2 <_vfiprintf_r+0x7a>
 8009cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009cc2:	d00b      	beq.n	8009cdc <_vfiprintf_r+0xa4>
 8009cc4:	465b      	mov	r3, fp
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ffa2 	bl	8009c14 <__sfputs_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f000 80a7 	beq.w	8009e24 <_vfiprintf_r+0x1ec>
 8009cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cd8:	445a      	add	r2, fp
 8009cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 809f 	beq.w	8009e24 <_vfiprintf_r+0x1ec>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf0:	f10a 0a01 	add.w	sl, sl, #1
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cfe:	4654      	mov	r4, sl
 8009d00:	2205      	movs	r2, #5
 8009d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d06:	4853      	ldr	r0, [pc, #332]	@ (8009e54 <_vfiprintf_r+0x21c>)
 8009d08:	f7f6 fa7a 	bl	8000200 <memchr>
 8009d0c:	9a04      	ldr	r2, [sp, #16]
 8009d0e:	b9d8      	cbnz	r0, 8009d48 <_vfiprintf_r+0x110>
 8009d10:	06d1      	lsls	r1, r2, #27
 8009d12:	bf44      	itt	mi
 8009d14:	2320      	movmi	r3, #32
 8009d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d1a:	0713      	lsls	r3, r2, #28
 8009d1c:	bf44      	itt	mi
 8009d1e:	232b      	movmi	r3, #43	@ 0x2b
 8009d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d24:	f89a 3000 	ldrb.w	r3, [sl]
 8009d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d2a:	d015      	beq.n	8009d58 <_vfiprintf_r+0x120>
 8009d2c:	9a07      	ldr	r2, [sp, #28]
 8009d2e:	4654      	mov	r4, sl
 8009d30:	2000      	movs	r0, #0
 8009d32:	f04f 0c0a 	mov.w	ip, #10
 8009d36:	4621      	mov	r1, r4
 8009d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d3c:	3b30      	subs	r3, #48	@ 0x30
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d94b      	bls.n	8009dda <_vfiprintf_r+0x1a2>
 8009d42:	b1b0      	cbz	r0, 8009d72 <_vfiprintf_r+0x13a>
 8009d44:	9207      	str	r2, [sp, #28]
 8009d46:	e014      	b.n	8009d72 <_vfiprintf_r+0x13a>
 8009d48:	eba0 0308 	sub.w	r3, r0, r8
 8009d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	46a2      	mov	sl, r4
 8009d56:	e7d2      	b.n	8009cfe <_vfiprintf_r+0xc6>
 8009d58:	9b03      	ldr	r3, [sp, #12]
 8009d5a:	1d19      	adds	r1, r3, #4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	9103      	str	r1, [sp, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bfbb      	ittet	lt
 8009d64:	425b      	neglt	r3, r3
 8009d66:	f042 0202 	orrlt.w	r2, r2, #2
 8009d6a:	9307      	strge	r3, [sp, #28]
 8009d6c:	9307      	strlt	r3, [sp, #28]
 8009d6e:	bfb8      	it	lt
 8009d70:	9204      	strlt	r2, [sp, #16]
 8009d72:	7823      	ldrb	r3, [r4, #0]
 8009d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d76:	d10a      	bne.n	8009d8e <_vfiprintf_r+0x156>
 8009d78:	7863      	ldrb	r3, [r4, #1]
 8009d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d7c:	d132      	bne.n	8009de4 <_vfiprintf_r+0x1ac>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	1d1a      	adds	r2, r3, #4
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	9203      	str	r2, [sp, #12]
 8009d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d8a:	3402      	adds	r4, #2
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e64 <_vfiprintf_r+0x22c>
 8009d92:	7821      	ldrb	r1, [r4, #0]
 8009d94:	2203      	movs	r2, #3
 8009d96:	4650      	mov	r0, sl
 8009d98:	f7f6 fa32 	bl	8000200 <memchr>
 8009d9c:	b138      	cbz	r0, 8009dae <_vfiprintf_r+0x176>
 8009d9e:	9b04      	ldr	r3, [sp, #16]
 8009da0:	eba0 000a 	sub.w	r0, r0, sl
 8009da4:	2240      	movs	r2, #64	@ 0x40
 8009da6:	4082      	lsls	r2, r0
 8009da8:	4313      	orrs	r3, r2
 8009daa:	3401      	adds	r4, #1
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db2:	4829      	ldr	r0, [pc, #164]	@ (8009e58 <_vfiprintf_r+0x220>)
 8009db4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009db8:	2206      	movs	r2, #6
 8009dba:	f7f6 fa21 	bl	8000200 <memchr>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d03f      	beq.n	8009e42 <_vfiprintf_r+0x20a>
 8009dc2:	4b26      	ldr	r3, [pc, #152]	@ (8009e5c <_vfiprintf_r+0x224>)
 8009dc4:	bb1b      	cbnz	r3, 8009e0e <_vfiprintf_r+0x1d6>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	3307      	adds	r3, #7
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	3308      	adds	r3, #8
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd4:	443b      	add	r3, r7
 8009dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd8:	e76a      	b.n	8009cb0 <_vfiprintf_r+0x78>
 8009dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dde:	460c      	mov	r4, r1
 8009de0:	2001      	movs	r0, #1
 8009de2:	e7a8      	b.n	8009d36 <_vfiprintf_r+0xfe>
 8009de4:	2300      	movs	r3, #0
 8009de6:	3401      	adds	r4, #1
 8009de8:	9305      	str	r3, [sp, #20]
 8009dea:	4619      	mov	r1, r3
 8009dec:	f04f 0c0a 	mov.w	ip, #10
 8009df0:	4620      	mov	r0, r4
 8009df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df6:	3a30      	subs	r2, #48	@ 0x30
 8009df8:	2a09      	cmp	r2, #9
 8009dfa:	d903      	bls.n	8009e04 <_vfiprintf_r+0x1cc>
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0c6      	beq.n	8009d8e <_vfiprintf_r+0x156>
 8009e00:	9105      	str	r1, [sp, #20]
 8009e02:	e7c4      	b.n	8009d8e <_vfiprintf_r+0x156>
 8009e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e08:	4604      	mov	r4, r0
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e7f0      	b.n	8009df0 <_vfiprintf_r+0x1b8>
 8009e0e:	ab03      	add	r3, sp, #12
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	462a      	mov	r2, r5
 8009e14:	4b12      	ldr	r3, [pc, #72]	@ (8009e60 <_vfiprintf_r+0x228>)
 8009e16:	a904      	add	r1, sp, #16
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7fd fbd7 	bl	80075cc <_printf_float>
 8009e1e:	4607      	mov	r7, r0
 8009e20:	1c78      	adds	r0, r7, #1
 8009e22:	d1d6      	bne.n	8009dd2 <_vfiprintf_r+0x19a>
 8009e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e26:	07d9      	lsls	r1, r3, #31
 8009e28:	d405      	bmi.n	8009e36 <_vfiprintf_r+0x1fe>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	059a      	lsls	r2, r3, #22
 8009e2e:	d402      	bmi.n	8009e36 <_vfiprintf_r+0x1fe>
 8009e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e32:	f7fe f927 	bl	8008084 <__retarget_lock_release_recursive>
 8009e36:	89ab      	ldrh	r3, [r5, #12]
 8009e38:	065b      	lsls	r3, r3, #25
 8009e3a:	f53f af1f 	bmi.w	8009c7c <_vfiprintf_r+0x44>
 8009e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e40:	e71e      	b.n	8009c80 <_vfiprintf_r+0x48>
 8009e42:	ab03      	add	r3, sp, #12
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	462a      	mov	r2, r5
 8009e48:	4b05      	ldr	r3, [pc, #20]	@ (8009e60 <_vfiprintf_r+0x228>)
 8009e4a:	a904      	add	r1, sp, #16
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7fd fe55 	bl	8007afc <_printf_i>
 8009e52:	e7e4      	b.n	8009e1e <_vfiprintf_r+0x1e6>
 8009e54:	0800a38a 	.word	0x0800a38a
 8009e58:	0800a394 	.word	0x0800a394
 8009e5c:	080075cd 	.word	0x080075cd
 8009e60:	08009c15 	.word	0x08009c15
 8009e64:	0800a390 	.word	0x0800a390

08009e68 <__swbuf_r>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	4605      	mov	r5, r0
 8009e70:	b118      	cbz	r0, 8009e7a <__swbuf_r+0x12>
 8009e72:	6a03      	ldr	r3, [r0, #32]
 8009e74:	b90b      	cbnz	r3, 8009e7a <__swbuf_r+0x12>
 8009e76:	f7fd ffeb 	bl	8007e50 <__sinit>
 8009e7a:	69a3      	ldr	r3, [r4, #24]
 8009e7c:	60a3      	str	r3, [r4, #8]
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	071a      	lsls	r2, r3, #28
 8009e82:	d501      	bpl.n	8009e88 <__swbuf_r+0x20>
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	b943      	cbnz	r3, 8009e9a <__swbuf_r+0x32>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f82a 	bl	8009ee4 <__swsetup_r>
 8009e90:	b118      	cbz	r0, 8009e9a <__swbuf_r+0x32>
 8009e92:	f04f 37ff 	mov.w	r7, #4294967295
 8009e96:	4638      	mov	r0, r7
 8009e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	6922      	ldr	r2, [r4, #16]
 8009e9e:	1a98      	subs	r0, r3, r2
 8009ea0:	6963      	ldr	r3, [r4, #20]
 8009ea2:	b2f6      	uxtb	r6, r6
 8009ea4:	4283      	cmp	r3, r0
 8009ea6:	4637      	mov	r7, r6
 8009ea8:	dc05      	bgt.n	8009eb6 <__swbuf_r+0x4e>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fd99 	bl	80099e4 <_fflush_r>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d1ed      	bne.n	8009e92 <__swbuf_r+0x2a>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	701e      	strb	r6, [r3, #0]
 8009ec4:	6962      	ldr	r2, [r4, #20]
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d004      	beq.n	8009ed6 <__swbuf_r+0x6e>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	07db      	lsls	r3, r3, #31
 8009ed0:	d5e1      	bpl.n	8009e96 <__swbuf_r+0x2e>
 8009ed2:	2e0a      	cmp	r6, #10
 8009ed4:	d1df      	bne.n	8009e96 <__swbuf_r+0x2e>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fd83 	bl	80099e4 <_fflush_r>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d0d9      	beq.n	8009e96 <__swbuf_r+0x2e>
 8009ee2:	e7d6      	b.n	8009e92 <__swbuf_r+0x2a>

08009ee4 <__swsetup_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4b29      	ldr	r3, [pc, #164]	@ (8009f8c <__swsetup_r+0xa8>)
 8009ee8:	4605      	mov	r5, r0
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	460c      	mov	r4, r1
 8009eee:	b118      	cbz	r0, 8009ef8 <__swsetup_r+0x14>
 8009ef0:	6a03      	ldr	r3, [r0, #32]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <__swsetup_r+0x14>
 8009ef4:	f7fd ffac 	bl	8007e50 <__sinit>
 8009ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efc:	0719      	lsls	r1, r3, #28
 8009efe:	d422      	bmi.n	8009f46 <__swsetup_r+0x62>
 8009f00:	06da      	lsls	r2, r3, #27
 8009f02:	d407      	bmi.n	8009f14 <__swsetup_r+0x30>
 8009f04:	2209      	movs	r2, #9
 8009f06:	602a      	str	r2, [r5, #0]
 8009f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	e033      	b.n	8009f7c <__swsetup_r+0x98>
 8009f14:	0758      	lsls	r0, r3, #29
 8009f16:	d512      	bpl.n	8009f3e <__swsetup_r+0x5a>
 8009f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f1a:	b141      	cbz	r1, 8009f2e <__swsetup_r+0x4a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__swsetup_r+0x46>
 8009f24:	4628      	mov	r0, r5
 8009f26:	f7fe ff07 	bl	8008d38 <_free_r>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	2300      	movs	r3, #0
 8009f38:	6063      	str	r3, [r4, #4]
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f043 0308 	orr.w	r3, r3, #8
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	b94b      	cbnz	r3, 8009f5e <__swsetup_r+0x7a>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f54:	d003      	beq.n	8009f5e <__swsetup_r+0x7a>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f883 	bl	800a064 <__smakebuf_r>
 8009f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f62:	f013 0201 	ands.w	r2, r3, #1
 8009f66:	d00a      	beq.n	8009f7e <__swsetup_r+0x9a>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	60a2      	str	r2, [r4, #8]
 8009f6c:	6962      	ldr	r2, [r4, #20]
 8009f6e:	4252      	negs	r2, r2
 8009f70:	61a2      	str	r2, [r4, #24]
 8009f72:	6922      	ldr	r2, [r4, #16]
 8009f74:	b942      	cbnz	r2, 8009f88 <__swsetup_r+0xa4>
 8009f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f7a:	d1c5      	bne.n	8009f08 <__swsetup_r+0x24>
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	0799      	lsls	r1, r3, #30
 8009f80:	bf58      	it	pl
 8009f82:	6962      	ldrpl	r2, [r4, #20]
 8009f84:	60a2      	str	r2, [r4, #8]
 8009f86:	e7f4      	b.n	8009f72 <__swsetup_r+0x8e>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7f7      	b.n	8009f7c <__swsetup_r+0x98>
 8009f8c:	20040018 	.word	0x20040018

08009f90 <_raise_r>:
 8009f90:	291f      	cmp	r1, #31
 8009f92:	b538      	push	{r3, r4, r5, lr}
 8009f94:	4605      	mov	r5, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	d904      	bls.n	8009fa4 <_raise_r+0x14>
 8009f9a:	2316      	movs	r3, #22
 8009f9c:	6003      	str	r3, [r0, #0]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fa6:	b112      	cbz	r2, 8009fae <_raise_r+0x1e>
 8009fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fac:	b94b      	cbnz	r3, 8009fc2 <_raise_r+0x32>
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 f830 	bl	800a014 <_getpid_r>
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	4628      	mov	r0, r5
 8009fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fbe:	f000 b817 	b.w	8009ff0 <_kill_r>
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d00a      	beq.n	8009fdc <_raise_r+0x4c>
 8009fc6:	1c59      	adds	r1, r3, #1
 8009fc8:	d103      	bne.n	8009fd2 <_raise_r+0x42>
 8009fca:	2316      	movs	r3, #22
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	2001      	movs	r0, #1
 8009fd0:	e7e7      	b.n	8009fa2 <_raise_r+0x12>
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4798      	blx	r3
 8009fdc:	2000      	movs	r0, #0
 8009fde:	e7e0      	b.n	8009fa2 <_raise_r+0x12>

08009fe0 <raise>:
 8009fe0:	4b02      	ldr	r3, [pc, #8]	@ (8009fec <raise+0xc>)
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f7ff bfd3 	b.w	8009f90 <_raise_r>
 8009fea:	bf00      	nop
 8009fec:	20040018 	.word	0x20040018

08009ff0 <_kill_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	@ (800a010 <_kill_r+0x20>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	f7f8 f830 	bl	8002062 <_kill>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d102      	bne.n	800a00c <_kill_r+0x1c>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	b103      	cbz	r3, 800a00c <_kill_r+0x1c>
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	bf00      	nop
 800a010:	20040620 	.word	0x20040620

0800a014 <_getpid_r>:
 800a014:	f7f8 b81d 	b.w	8002052 <_getpid>

0800a018 <__swhatbuf_r>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	460c      	mov	r4, r1
 800a01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a020:	2900      	cmp	r1, #0
 800a022:	b096      	sub	sp, #88	@ 0x58
 800a024:	4615      	mov	r5, r2
 800a026:	461e      	mov	r6, r3
 800a028:	da0d      	bge.n	800a046 <__swhatbuf_r+0x2e>
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a030:	f04f 0100 	mov.w	r1, #0
 800a034:	bf14      	ite	ne
 800a036:	2340      	movne	r3, #64	@ 0x40
 800a038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a03c:	2000      	movs	r0, #0
 800a03e:	6031      	str	r1, [r6, #0]
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	b016      	add	sp, #88	@ 0x58
 800a044:	bd70      	pop	{r4, r5, r6, pc}
 800a046:	466a      	mov	r2, sp
 800a048:	f000 f848 	bl	800a0dc <_fstat_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	dbec      	blt.n	800a02a <__swhatbuf_r+0x12>
 800a050:	9901      	ldr	r1, [sp, #4]
 800a052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a05a:	4259      	negs	r1, r3
 800a05c:	4159      	adcs	r1, r3
 800a05e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a062:	e7eb      	b.n	800a03c <__swhatbuf_r+0x24>

0800a064 <__smakebuf_r>:
 800a064:	898b      	ldrh	r3, [r1, #12]
 800a066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a068:	079d      	lsls	r5, r3, #30
 800a06a:	4606      	mov	r6, r0
 800a06c:	460c      	mov	r4, r1
 800a06e:	d507      	bpl.n	800a080 <__smakebuf_r+0x1c>
 800a070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	2301      	movs	r3, #1
 800a07a:	6163      	str	r3, [r4, #20]
 800a07c:	b003      	add	sp, #12
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a080:	ab01      	add	r3, sp, #4
 800a082:	466a      	mov	r2, sp
 800a084:	f7ff ffc8 	bl	800a018 <__swhatbuf_r>
 800a088:	9f00      	ldr	r7, [sp, #0]
 800a08a:	4605      	mov	r5, r0
 800a08c:	4639      	mov	r1, r7
 800a08e:	4630      	mov	r0, r6
 800a090:	f7fe fec6 	bl	8008e20 <_malloc_r>
 800a094:	b948      	cbnz	r0, 800a0aa <__smakebuf_r+0x46>
 800a096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09a:	059a      	lsls	r2, r3, #22
 800a09c:	d4ee      	bmi.n	800a07c <__smakebuf_r+0x18>
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	f043 0302 	orr.w	r3, r3, #2
 800a0a6:	81a3      	strh	r3, [r4, #12]
 800a0a8:	e7e2      	b.n	800a070 <__smakebuf_r+0xc>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	6020      	str	r0, [r4, #0]
 800a0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	9b01      	ldr	r3, [sp, #4]
 800a0b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0ba:	b15b      	cbz	r3, 800a0d4 <__smakebuf_r+0x70>
 800a0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f000 f81d 	bl	800a100 <_isatty_r>
 800a0c6:	b128      	cbz	r0, 800a0d4 <__smakebuf_r+0x70>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	431d      	orrs	r5, r3
 800a0d8:	81a5      	strh	r5, [r4, #12]
 800a0da:	e7cf      	b.n	800a07c <__smakebuf_r+0x18>

0800a0dc <_fstat_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	@ (800a0fc <_fstat_r+0x20>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	602b      	str	r3, [r5, #0]
 800a0ea:	f7f8 f81a 	bl	8002122 <_fstat>
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	d102      	bne.n	800a0f8 <_fstat_r+0x1c>
 800a0f2:	682b      	ldr	r3, [r5, #0]
 800a0f4:	b103      	cbz	r3, 800a0f8 <_fstat_r+0x1c>
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	bd38      	pop	{r3, r4, r5, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20040620 	.word	0x20040620

0800a100 <_isatty_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d06      	ldr	r5, [pc, #24]	@ (800a11c <_isatty_r+0x1c>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7f8 f819 	bl	8002142 <_isatty>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_isatty_r+0x1a>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_isatty_r+0x1a>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	20040620 	.word	0x20040620

0800a120 <_init>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr

0800a12c <_fini>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	bf00      	nop
 800a130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a132:	bc08      	pop	{r3}
 800a134:	469e      	mov	lr, r3
 800a136:	4770      	bx	lr
